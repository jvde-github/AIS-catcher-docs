{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AIS-Catcher","text":"<p>Welcome to the AIS-Catcher documentation. AIS-Catcher is an open-source software package designed to convert your inexpensive general-purpose Software Defined Radio (SDR) into a robust, dual-channel Automatic Identification System (AIS) receiver. Empower yourself with complete control over maritime data monitoring and sharing without the need for expensive commercial AIS receivers. </p> <p>Get Started What is new?</p>"},{"location":"#important-disclaimer","title":"Important Disclaimer","text":"<p>AIS-Catcher is intended for hobbyist and research projects only. It is NOT approved for use in navigation or safety-of-life applications.</p> <p>Read the full disclaimer.</p>"},{"location":"#what-is-ais","title":"What is AIS?","text":"<p>The Automatic Identification System (AIS) is a vital maritime safety technology, akin to ADSB used in aviation. AIS enables real-time tracking of vessels by transmitting critical information such as position, speed, and heading over VHF radio frequencies (around 162 MHz). This data enhances maritime navigation safety, situational awareness, and traffic management.</p>"},{"location":"#community-features","title":"Community Features","text":"<p>Join the vibrant AIS-Catcher community at aiscatcher.org. Our platform offers:</p> <ol> <li> <p>Station Performance Tracking    Monitor and analyze your AIS receiver's performance, and benchmark it against other stations in your vicinity.</p> </li> <li> <p>Global Ship Movement Overview    Gain access to a comprehensive, real-time view of maritime traffic aggregated from our global network of contributors.</p> </li> </ol> <p>Community Site</p>"},{"location":"#free-and-open-source","title":"Free and Open-Source","text":"<p>AIS-Catcher is free and open-source software published under the GPLv3 license. You can easily install it by following our comprehensive installation guide or by visiting our GitHub repository.</p> <p>View on GitHub</p>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Complete User Guide: Detailed instructions and feature walkthroughs.</li> <li>Community and Support: Join the AIS-Catcher community to share insights and get help.</li> <li>FAQ: Answers to frequently asked questions.</li> <li>References: Links to additional resources and documentation.</li> </ul>"},{"location":"community/","title":"Purpose","text":"<p>AIS-catcher is designed to be a dynamic platform that fosters the continuous improvement of AIS receiver models. We highly value and welcome any suggestions, observations, or shared recordings, especially from setups where current models face challenges.</p>"},{"location":"community/#join-the-aiscatcherorg-community","title":"Join the aiscatcher.org Community","text":"<p>AIS-catcher is a free and open-source project dedicated to transforming computers equipped with Software-Defined Radios (SDRs) into robust Automatic Identification System (AIS) receivers. Our mission is to enhance AIS data decoding, provide a versatile tool that supports various input and output methods, and aggregate AIS data at aiscatcher.org to enable real-time global visualization. Integrating this aggregated data into local web viewers offers a powerful tool to calibrate and improve station performance by identifying its limitations and blind spots.</p>"},{"location":"community/#how-to-get-involved","title":"How to Get Involved","text":"<p>Update to the Latest Version:  Ensure your AIS-catcher installation is up-to-date to benefit from the latest features and improvements.</p> <p>Add Your Station:  Register your station by visiting Register Station. Upon registration, you will receive a unique sharing key.</p> <p>Share Your AIS Data:  Run AIS-catcher using the <code>-X</code> option followed by your sharing key:      <pre><code>ais-catcher -X YOUR_SHARING_KEY\n</code></pre> This command shares your station's raw AIS data with the community hub/ More details can be found in the Configuration section.</p> <p>Explore Community Data in local Web Viewer  Sharing activates additional features. Start exploring in your station's web viewer, see below. </p>"},{"location":"community/#web-viewer-benefits","title":"Web Viewer Benefits","text":"<p>Enhancing your AIS-catcher experience, the Web Viewer offers two additional map overlays when sharing a community feed: </p>"},{"location":"community/#1-community-feed","title":"1. Community Feed","text":"<p>Features:</p> <ul> <li>Displays vessels and objects reported by the AIS-catcher community using grey icons.</li> <li>Helps identify potential blind spots and assess the reception area of your station.</li> </ul> <p>Benefits:</p> <ul> <li>Improved situational awareness by visualizing community-reported AIS data.</li> <li>Enhanced understanding of your station's coverage and limitations.</li> </ul>"},{"location":"community/#2-ais-tropo-ducting-conditions","title":"2. AIS Tropo Ducting Conditions","text":"<p>Features:</p> <ul> <li>Provides an overlay of AIS tropo ducting conditions, refreshed every six hours.</li> <li>Explains AIS observations that typically occur beyond the line-of-sight, extending into hundreds of miles.</li> </ul> <p>Benefits:</p> <ul> <li>Enhances the interpretation of long-range AIS signals.</li> <li>Assists in distinguishing between direct and ducted AIS receptions.</li> </ul>"},{"location":"community/#get-started-today","title":"Get Started Today","text":"<p>Become a part of the AIS-catcher community to contribute to and benefit from a collaborative effort in improving AIS reception and data visualization. Together, we can enhance maritime situational awareness and advance AIS technology for everyone.</p> <p>For more information and to join, visit aiscatcher.org.</p>"},{"location":"disclaimer/","title":"Disclaimer","text":""},{"location":"disclaimer/#important-disclaimer","title":"Important Disclaimer","text":"<p>AIS-Catcher is for hobby and research use only. Not for navigation or safety-critical applications.</p> <ul> <li>Does not broadcast location data</li> <li>Not certified for safety-critical use</li> <li>Use only where legally permitted</li> </ul> <p>Provided as-is without guarantees. Comply with local laws regarding AIS signal reception. Licensed under GPLv3.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#how-to-connect-to-opencpn","title":"How to Connect to OpenCPN?","text":"<p>In this example, we have AIS-catcher running on a Raspberry PI and aim to receive the messages in OpenCPN running on a Windows computer with IP address <code>192.168.1.239</code>. We have chosen to use port <code>10101</code>. On the Raspberry, we start AIS-catcher with the following command to send the NMEA messages to the Windows machine: <pre><code> AIS-catcher -u 192.168.1.239 10101\n</code></pre></p> <p>In OpenCPN the only thing we need to do is create a Connection with the following settings:</p> <p> </p> <p>In newer versions of OpenCPN, the user has to specify a protocol, in this case select NMEA0183.</p>"},{"location":"what-is-new/","title":"What's New?","text":""},{"location":"what-is-new/#edge-version-features","title":"Edge Version Features","text":""},{"location":"what-is-new/#offline-maps","title":"Offline Maps","text":"<pre><code> # include an offline map in mbtiles format\nAIS-catcher -N 8100 MBTILES map.mbtiles\n# or as overlay\nAIS-catcher -N 8100 MBOVERLAY map.mbtiles\n</code></pre>"},{"location":"what-is-new/#version-061","title":"Version 0.61","text":""},{"location":"what-is-new/#mqtt-integration","title":"MQTT Integration","text":"<ul> <li> <p>Publishing Messages <pre><code># Basic MQTT connection\nAIS-catcher -Q mqtt://127.0.0.1:1883\n\n# WebSocket MQTT connection\nAIS-catcher -Q wsmqtt://127.0.0.1:1883\n\n# With message format and topic\nAIS-catcher -Q mqtt://127.0.0.1:1883 admin MSGFORMAT JSON_FULL TOPIC data/ais\n\n# With authentication and client ID\nAIS-catcher -Q mqtt://username:password@127.0.0.1:1883 admin CLIENT aiscatcher\n</code></pre></p> </li> <li> <p>Reading Messages <pre><code># Read from MQTT broker\nAIS-catcher -t mqtt://username:password@127.0.0.1:1883\n</code></pre></p> </li> </ul>"},{"location":"what-is-new/#websocket-support","title":"WebSocket Support","text":"<ul> <li>Text data transmission via WebSockets using <code>ws://</code> protocol with <code>-t</code> and <code>-Q</code> options</li> </ul>"},{"location":"what-is-new/#web-viewer-enhancements","title":"Web Viewer Enhancements","text":"<ul> <li>Default map view on startup</li> <li>Optimized color scheme</li> <li>Draggable shipcard functionality</li> <li>Smart shipcard positioning near vessels</li> <li>Automatic vessel track display options: On hover and On selection</li> </ul>"},{"location":"what-is-new/#additional-updates","title":"Additional Updates","text":"<ul> <li>Server protocol support:</li> <li>SDR data: <code>sdr://127.0.0.1:5555</code></li> <li>Text over TCP: <code>txt://127.0.0.1:4001</code></li> <li>GPSD: <code>gpsd://127.0.0.1:4267</code></li> <li>RTL_TCP: <code>rtltcp://127.0.0.1:4099</code></li> <li>Raw IQ data: <code>tcp://127.0.0.1:1313</code></li> <li>NMEA2000 configuration added to JSON settings</li> <li>System daemon restart interval set to 10s</li> </ul>"},{"location":"advanced/FM-decoding/","title":"Input from FM discriminator","text":"<p>We can run AIS-catcher on a RAW audio file as in this tutorial: <pre><code>wget \"https://github.com/freerange/ais-on-sdr/wiki/example-data/helsinki-210-messages.raw\"\nAIS-catcher  -m 3 -v -s 48K -r cs16 helsinki-210-messages.raw\n</code></pre> On this file we should extract roughly <code>362</code> AIVDM lines. Notice that with switch <code>-m 3</code> on the command line AIS-catcher runs a decoding model that assumes the input is the output of an FM discriminator. In this case, the program is similar to the following usage of GNUAIS: <pre><code>gnuais -l helsinki-210-messages.raw\n</code></pre> which produces: <pre><code>INFO: A: Received correctly: 153 packets, wrong CRC: 49 packets, wrong size: 4 packets\nINFO: B: Received correctly: 52 packets, wrong CRC: 65 packets, wrong size: 10 packets\n</code></pre></p>"},{"location":"advanced/GNUradio/","title":"Connecting to GNU Radio via ZMQ","text":"<p>The latest code base of AIS-catcher can take streaming data via ZeroMQ (ZMQ) as input. This eases the interface with packages like GNU Radio. The steps are simple and will be demonstrated by decoding the messages in the AIS example file from here. AIS-catcher cannot directly decode this file as the file contains only one channel, the frequency is shifted away from the center at 162Mhz and the sample rate of 62.5 KHz is not supported in our program. We can however perform decoding with some help from <code>GNU Radio</code>. First start AIS-catcher to receive a stream (data format is complex float and sample rate is 96K) at a defined ZMQ endpoint: <pre><code>AIS-catcher -z CF32 tcp://127.0.0.1:5555 -s 96000\n</code></pre> Next we can build a simple GRC model that performs all the necessary steps and has a ZMQ Pub Sink with the chosen endpoint:  Running this model, will allow us to successfully decode the messages in the file:</p> <p></p> <p>The ZMQ interface is useful if a datastream from an SDR needs to be shared and processed by multiple decoders or for experimentation with different decoder models with support from GNU Radio.</p> <p>Note that with CSDR and SoX we can also decode this file as follows: <pre><code>sox SDRuno_20200907_184926Z_161985kHz.wav -t raw -b 32 -e floating-point - |csdr shift_math_cc 0.165 | AIS-catcher  -r cf32 . -s 62500 -c X -v\n</code></pre></p>"},{"location":"advanced/GPS/","title":"Specifying Station Location","text":"<p>As discussed above, the webserver will only share a known location of the station with the front-end web viewer if <code>share_loc</code> is set for the webserver: <pre><code>AIS-catcher -N 8100 share_loc on\n</code></pre> This option is switched off by default for privacy reasons in case the web viewer is shared externally. The NMEA decoder accepts NMEA lines from a GPS device (NMEA lines GPRMC, GPGLL and GPGGA): <pre><code>echo '$GPGGA, 161229.487, 3723.2475, N, 12158.3416, W, 1, 07, 1.0, 9.0, M, , , , 0000*18' | ./AIS-catcher -r txt .\n</code></pre> These GPS coordinates will be used to set the location of the station. In this way, the station can be visualized and tracked while on the move. This is useful if you use AIS-catcher to read from a hardware AIS receiver that has a built-in GPS. Another approach is to read from a GPSD server, e.g. when GPSD listens on post 2947 of the local PC:  <pre><code>AIS-catcher -t gpsd localhost 2947 -N 8100 share_loc on` \n</code></pre> or from a serial device: <pre><code>AIS-catcher -e 38400 /dev/serial/by-id/usb-u-blox_AG_-_www.u-blox.com_u-blox\n</code></pre> The web viewer has the options <code>-N use_gps on/off</code> and <code>-N own_mmsi xxxxx</code>. The first enables/disables the use of GPS NMEA input as the location for the receiver station (default is on). The latter sets the station's location as the location of the vessel with the specified MMSI. The own MMSI will be highlighted on the web viewer map.</p>"},{"location":"advanced/Low-spec-devices/","title":"Running on RPI Zero W and other devices with performance limitations","text":"<p>AIS-catcher implements a trick to speed up downsampling for RTLSDR input at 1536K samples/second by using fixed point calculations (<code>-F</code>). In essence, the downsampling is done  in 16-bit integers performed in parallel for the I and Q channels using only 32-bit integers.</p> <p> </p> <p>This feature can activated with the <code>-F</code> switch and is only available for RTL-SDR running at a rate 1536K per second (the default).  To give an idea of the performance improvement on a Raspberry Pi Model B Rev 2 (700 MHz), I used the following command to decode from a file on the aforementioned Raspberry Pi:</p> <p><pre><code>AIS-catcher -r posterholt.raw -s 1536K -b -q -v\n</code></pre> Resulting in 38 messages and the <code>-b</code> switch prints the timing used for decoding: <pre><code>[AIS engine v0.31]  : 17312.1 ms\n</code></pre> Adding the <code>-F</code> switch yielded the same number of messages but the timing is now: <pre><code>[AIS engine (speed optimized) v0.31]    : 7722.32 ms\n</code></pre> On an RPI Zero W this will bring down CPU load to ~40% and avoid buffer overruns.</p>"},{"location":"advanced/grafana/","title":"Using AIS-catcher with Grafana and Prometheus","text":"<p><code>Grafana</code> is an analytics platform that can provide alternative graphs for <code>AIS-catcher</code>.</p> <p>In this guide we will be using <code>Prometheus</code> as the data repository.</p> <p>Using Grafana and Prometheus in this configuration does not require a plan, account, or credentials for their respective cloud offerings.</p>"},{"location":"advanced/grafana/#hardware-requirements","title":"Hardware requirements","text":"<p>Prometheus will store a lot of data, and Grafana will do a lot of data queries. As a result, it would be better if you run these programs on a different system than your feeder Raspberry Pi. This will leave your Pi focused on data collection and processing, and unbothered by the CPU and Disk IO load that Prometheus/Grafana will cause.</p> <p>You can do it on a single system. We're assuming below that you are not.</p>"},{"location":"advanced/grafana/#step-1-make-prometheus-data-available-for-ais-catcher","title":"Step 1: Make Prometheus data available for AIS-catcher","text":"<ul> <li>Edit your AIS-catcher's command line and ensure that <code>PROME on</code> is included after the <code>-N &lt;port&gt;</code> directive. For example:</li> </ul> <pre><code>AIS-catcher -N 8100 PROME on\n</code></pre>"},{"location":"advanced/grafana/#step-2-create-a-container-stack-for-prometheus-and-grafana","title":"Step 2: create a container stack for <code>prometheus</code> and <code>grafana</code>","text":"<p>You can skip this if you already have Prometheus and Grafana installed.</p> <p>The example wil use a containerized (Docker) installation of Prometheus and Grafana. If you need to install Docker, please do so first. For a quick and painless way to get started, we suggest that you use this install script.</p> <p>On the machine where you will run Prometheus and Grafana, create a docker-compose file in the <code>/opt/grafana</code> directory:</p> <pre><code>sudo mkdir -p -m777 /opt/grafana/grafana/appdata /opt/grafana/prometheus/config /opt/grafana/prometheus/data\ncd /opt/grafana\ncat &gt; docker-compose.yml\n</code></pre> <p>Now paste in the following text *):</p> &lt;\u2010\u2010 Click the arrow to see the <code>docker-compose.yml</code> text <pre><code>version: '3.9'\n\nvolumes:\n  grafana:\n    driver: local\n    driver_opts:\n      type: none\n      device: \"/opt/grafana/grafana/appdata\"\n      o: bind\n  prom-config:\n    driver: local\n    driver_opts:\n      type: none\n      device: \"/opt/grafana/prometheus/config\"\n      o: bind\n  prom-data:\n    driver: local\n    driver_opts:\n      type: none\n      device: \"/opt/grafana/prometheus/data\"\n      o: bind\n\nservices:\n  grafana:\n    image: grafana/grafana-oss:latest\n    restart: unless-stopped\n    container_name: grafana\n    hostname: grafana\n    tty: true\n    # uncomment the following section and set the variables if you are exposing Grafana to the internet behind a rev web proxy:\n    environment:\n    # snuids-radar-panel plugin is needed for polar plots:\n      - GF_INSTALL_PLUGINS=snuids-radar-panel\n    # uncomment and set the following variables if you are exposing Grafana to the internet behind a rev web proxy:\n    #   - GF_SERVER_ROOT_URL=https://mywebsite.com/grafana/\n    #   - GF_SERVER_SERVE_FROM_SUB_PATH=true\n    ports:\n      - 3000:3000\n    volumes:\n      - grafana:/var/lib/grafana\n\n  prometheus:\n    image: prom/prometheus\n    container_name: prometheus\n    hostname: prometheus\n    restart: unless-stopped\n    tmpfs:\n      - /tmp\n    volumes:\n      - prom-config:/etc/prometheus\n      - prom-data:/prometheus\n    ports:\n      - 9090:9090\n</code></pre> <p>*) The volume definition structure is written this way purposely to ensure that the containers can place files in the persistent directories. Do not try to \"directly\" map volumes (<code>/opt/grafana/grafana/appdata:/var/lib/grafana</code>).</p> <p>Download and create Grafana and Prometheus for the first time with this command:</p> <pre><code>docker compose up -d\n</code></pre> <p>You should now be able to see the following directories:</p> <ul> <li><code>/opt/grafana/grafana/appdata</code></li> <li><code>/opt/grafana/prometheus/config</code></li> <li><code>/opt/grafana/prometheus/data</code></li> </ul>"},{"location":"advanced/grafana/#step-3-configuring-prometheus","title":"Step 3: Configuring Prometheus","text":"<p>Prometheus needs to be told where to look for the data from AIS-catcher. We will create a target prometheus configuration file that does this, please copy and paste the following. Make sure to replace <code>ip_of_AIS-catcher_machine:8100</code> with the IP address or hostname of the machine and the web port where <code>AIS-catcher</code> is running:</p> <pre><code>docker exec -it prometheus sh -c \"echo -e \\\"  - job_name: 'ais'\\n    static_configs:\\n      - targets: ['ip_of_AIS-catcher_machine:8100']\\\" &gt;&gt; /etc/prometheus/prometheus.yml\"\ndocker restart prometheus\n</code></pre> <p>(If you screw this up, do NOT re-run the command. Instead, try <code>sudo nano /opt/grafana/prometheus/config/prometheus.yml</code> and fix it that way.)</p>"},{"location":"advanced/grafana/#accessing-prometheus-and-grafana-via-your-browser","title":"Accessing Prometheus and Grafana via your browser","text":"<p>You should be able to point your web browser at:</p> <ul> <li><code>http://docker.host.ip.addr:9090/</code> to access the <code>prometheus</code> console.</li> <li><code>http://docker.host.ip.addr:3000/</code> to access the <code>grafana</code> console, use admin/admin as initial credentials, you should be prompted to change the password on first login.</li> </ul> <p>Remember to change <code>docker.host.ip.addr</code> to the IP address of the machine where Prometheus and Grafana are located.</p>"},{"location":"advanced/grafana/#configuring-data-source-and-dashboard-in-grafana","title":"Configuring data source and dashboard in Grafana","text":"<p>After you have logged into the <code>grafana</code> console the following manual steps are required to connect to <code>prometheus</code> as the data source. You must do this even if you are already connected to Prometheus for other purposes (such as for getting <code>readsb</code>/<code>ultrafeeder</code>/<code>tar1090</code> data)</p> <ol> <li>In Grafana, click <code>Configuration</code> (cogwheel) -&gt; <code>Data Sources</code></li> <li>Click <code>Add a new data source</code> in the main panel</li> <li>Click <code>Prometheus</code> from the list of options provided</li> <li>Input or select the following options, if the option is not listed, do not input anything for that option:</li> </ol> Option Input Name <code>ais</code> URL <code>http://prometheus:9090/</code> <p>Clicking <code>Save &amp; Test</code> should return a green message indicating success. The dashboard can now be imported with the following steps</p> <ol> <li>Hover over the <code>four squares</code> icon in the sidebar, click <code>+ Import</code></li> <li>Enter <code>18417</code> into the <code>Import via grafana.com</code> section and click <code>Load</code></li> <li>Select <code>readsb</code> from the bottom drop down list</li> <li>Click <code>Import</code> on the subsequent dialogue box</li> </ol> <p>At this point you should see a very nice dashboard, you can find it under <code>General</code> in the <code>Dashboards</code> section. An example for readsb:  </p> <p>Feel free to edit the dashboard or add more panels to your liking.</p>"},{"location":"advanced/long-range/","title":"Long Range AIS messages","text":"<p>AIS-catcher has the option to listen at frequency 156.8 Mhz to receive Channel 3/C and 4/D (vs the default A and B around 162 MHz) with the switch <code>-c CD</code>. This follows ideas from a post on the Shipplotter forum. The default decoder is available with the switch <code>-c AB</code>. Note that <code>gpsdecode</code> cannot handle channel designations C and D in NMEA lines. You can provide an optional argument to use channel designations A and B in the NMEA line with the command <code>-c CD AB</code>.</p> <p>In a similar fashion <code>-c X</code> will decode one channel. This is only useful in some instances, see the ZMQ example below.</p>"},{"location":"advanced/offline/","title":"Offline web viewer","text":"<p>There is an option to run the web viewer without relying on online libraries. This facilitates using the web interface whilst traveling without an internet connection. The steps are simple. First, go to your home directory (say <code>/home/jasper</code>) and clone the necessary offline web assets: <pre><code>git clone https://github.com/jvde-github/webassets.git\n</code></pre> This will create a directory <code>webassets</code> that we need to share with AIS-catcher as an alternative location for online web content  with the CDN argument followed by the location of the web assets directory: <pre><code>AIS-catcher -N 8100 CDN /home/jasper/webassets\n</code></pre> Offline maps can also be included in <code>mbtiles</code> format: <pre><code>AIS-catcher  -N 8100 MBTILES filename.mbtiles\n</code></pre> or as an overlay <pre><code>AIS-catcher  -N 8100 MBOVERLAY filename.mbtiles\n</code></pre></p> <p></p>"},{"location":"advanced/samplerate/","title":"A note on device sample rates","text":"<p>AIS-catcher automatically sets an appropriate sample rate depending on your device but provides the option to overwrite this default using the <code>-s</code> switch. For performance reasons, you can decide to use a lower rate or improve the sensitivity by picking a higher rate than the default. The decoding model supports most sample rates above 96K but will internally upsample a signal, if needed, to one of the following rates: <pre><code>96K, 192K, 288K, 384K, 768K, 1536K, 3072K, 6144K, 12288K \n</code></pre> There is no efficiency advantage of using other rates than in this list apart from limiting the bandwidth and data throughput. Ideally, consider using an option from the list as it avoids upsampling (and additional noise) but it is not required and the model works well with other sampling rates.</p> <p>In recent versions of AIS-catcher you can use the <code>SOXR</code> or <code>libsamplerate</code> (SRC) library for downsampling. In fact, you can compare the four different downsampling approaches with a command like: <pre><code>AIS-catcher -r posterholt.raw -m 2 -m 2 -go FP_DS on  -m 2 -go SOXR on -m 2 -go SRC on -b -q -v\n</code></pre> which produces: <pre><code>[AIS engine v0.35 ]:                     41 msgs at 4.1 msg/s\n[AIS engine v0.35 FP-DS ]:               41 msgs at 4.1 msg/s\n[AIS engine v0.35 SOXR ]:                41 msgs at 4.1 msg/s\n[AIS engine v0.35 SRC]:                  41 msgs at 4.1 msg/s\n</code></pre> with the following timings: <pre><code>[AIS engine v0.35 ]:                     320.624 ms\n[AIS engine v0.35 FP-DS ]:               254.341 ms\n[AIS engine v0.35 SOXR ]:                653.716 ms\n[AIS engine v0.35 SRC]:                  3762.6 ms\n</code></pre> Some libraries will require significant hardware resources. The advice is to use the native built-in downsampling functionality but it is fun to experiment.</p> <p>The default downsampler uses a simple but efficient CIC5 filter. To mitigate some of the drawbacks of this method, version 0.39 onwards uses by default a simple droop compensator in the form of a fast 3 tap filter which can be switched off with the switch <code>-go DROOP off</code>.  The following results are from my home station running for a few hours with the various methods running in parallel and counting the number of messages:</p> Downsampler RTL-SDR @ 1536K AirSpy HF+ @ 192K SDRPlay RSPdx @ 3072K <code>-go DROOP off</code> 94219 16022 16530 <code>-go DROOP on</code> (default) 98176 (+4.20%) 16265 (+1.52%) 17190 (+3.99%) <code>-go SOXR on</code> (SOX downsampling) 97652 (+3.64%) 16209 (+1.17%) 17049 (+3.14%) <p>For reference, the command line instruction to test is: <pre><code>AIS-catcher  -v 10 -gr rtlagc on -m 2 -go droop off -m 2 -m 2 -go soxr on\n</code></pre> Please note that the runs are performed on different days over different time spans so this does not represent a comparison of devices but you can compare within a column.</p>"},{"location":"advanced/troubleshooting/","title":"Troubleshooting","text":""},{"location":"advanced/troubleshooting/#frequency-correction","title":"Frequency Correction","text":"<p>AIS-catcher tunes in on a frequency of 162 MHz. However, due to deviations in the internal oscillator of RTL-SDR devices, the actual frequency can be slightly off which will result in no or poor reception of AIS signals. It is therefore important to provide the program with the necessary correction in parts-per-million (ppm) to offset this deviation where needed. For most of our testing, we have used the RTL-SDR v3 dongle where in principle no frequency correction is needed as deviations are guaranteed to be small. For optimal reception though ensure you determine the necessary correction, e.g. see and provide this as input via the <code>-p</code> switch on the command line.</p> <p>If you are using a cheap RTL-SDR dongle that suffers from thermal drift (i.e. the required PPM correction drifts when the dongle is getting warmer), you can use the option <code>-go AFC_WIDE on</code> (which is the default model in recent releases). This is a relatively new model (per v0.48) that is less sensitive to frequency drift. You can switch off this model using the switch `-go AFC_WIDE off'. Running the new model setting and the previous default yields results that are more stable for frequency drift.</p> <p> </p>"},{"location":"advanced/troubleshooting/#frequency-shift-and-ppm","title":"Frequency Shift and PPM","text":"<p>The Web Viewer include plots of what is called the <code>frequency shift</code>. The <code>frequency shift</code> is the frequency correction from the central frequencies that AIS-catcher has used to decode the signal. This value is related to  the frequency offset of the RTL-SDR dongle as discussed above but also depends on the deviations in the equipment of the sender. The number is in ppm (parts-per-million, so 1ppm ~ 162 Hz) and in some tables and in screen output the quanity is refered to as <code>ppm</code>.  Long-running averages can be used to determine the optimal ppm correction for the receiver setup. These deviations can be corrected with <code>-p</code>. Deviations between -3 and +3 will usually not impact reception quality so for modern dongles with frequency stabilization no action is required.</p>"},{"location":"advanced/troubleshooting/#system-usb-performance","title":"System USB performance","text":"<p>On some laptops we observed that Windows was struggling with the high volume of data transferred from the RTL SDR dongle to the PC. I am not sure why (likely some driver issue as Ubuntu on the same machine worked fine) but it is worthwhile to check if your system supports transferring from the dongle at a sampling rate of 1.536 MHz with the following command which is part of the osmocom rtl-sdr package: <pre><code>rtl_test -s 1536000\n</code></pre> In case you observe a high number of lost data, the advice is to run AIS-catcher at a lower sampling rate for RTL SDR dongles: <pre><code>AIS-catcher -s 288000\n</code></pre> If your system allows for it you might opt to run <code>AIS-catcher</code> at a sample rate of <code>2304000</code>. </p>"},{"location":"advanced/troubleshooting/#known-issues","title":"Known issues","text":"<ul> <li>call of <code>rtlsdr_close</code>  on Windows can result in a crash. This is a problem with the rtlsdr library and not AIS-catcher. Solution: ensure you have the latest version of the library with this patch rtlsdr. For the shared Windows binaries I have included this version of the library in which I did a proper patch to fix this issue (essentially ensuring all usb transfers have been closed before freeing memory.</li> <li>pkg-config on Raspberry Pi returns <code>-L</code> as library path which results in a build error. Temporarily fixed by assuming lib is in standard location, long term fix: switch to cmake</li> <li>...</li> </ul>"},{"location":"advanced/validation/","title":"Validation","text":""},{"location":"advanced/validation/#experiment-at-the-meteotoren-in-scheveningen","title":"Experiment at the Meteotoren in Scheveningen","text":"<p>On August 25, 2022 I was given the opportunity to connect AIS-catcher for a few minutes to the antenna system at the Meteotoren which has a consistently high message rate and availability on MarineTraffic. </p> <p>We ran AIS-catcher on a laptop for 60 seconds and counted the number of messages for two RTL-SDR dongles (<code>-gr rtlagc on -T 60 -v 60</code>): </p> SDR Run 1 Run 2 RTL-SDR blog v3 1061 1255 ShipXplorer AIS dongle 1372 1315 <p>The ShipXplorer AIS dongle, as far as I can see, is an RTL-SDR with an additional SAW filter (TA0395A). The two sets of runs suggest some advantages of using a dongle with a filter. For reference, the AIS-catcher default decoder showed roughly a 30% improvement over an FM-based decoder in message count. An important factor of the high message rate at the Meteotoren though seems to stem from the location and the installed Yagi antenna. An experiment where we reran with a standard antenna placed at a slightly lower height reduced the message count to below 800 messages per second. </p> <p> </p> <p>Meteotoren feeds MarineTraffic with a Comar SLR350NI. According to the MarineTraffic statistics the message count just prior and just after the experiment was in the area of 1350 messages/minute. We did not observe a difference in range with the MarineTraffic statistics to conclude (see pictures - left is AIS-catcher reception for a few minutes visualized with AISdispatcher, right is a screenshot from MarineTraffic). These initial results are promising and it would be interesting to compare, in a more scientific manner, how open-source decoders with a generic RTL-SDR and dedicated AIS receiver hardware compare. Thank you Meteotoren for facilitating!</p>"},{"location":"advanced/validation/#experimenting-with-recorded-signals","title":"Experimenting with recorded signals","text":"<p>The functionality to receive radio input from <code>rtl_tcp</code> provides a route to compare different receiver packages on a deterministic input from a file. I have tweaked the callback function in <code>rtl_tcp</code> so that it instead sends over input from a file to an AIS receiver like <code>AIS-catcher</code> and <code>AISrec</code>. The same trick can be easily done for <code>rtl-ais</code>. The sampling rate of the input file was converted using <code>sox</code> to 240K samples/second for <code>rtl-tcp</code> and 1.6M samples/second for <code>rtl-ais</code>.  These programs, and others like <code>gnuais</code> have been the pioneers in the field of open-source AIS decoding and without them many related programs including this one would arguably not exist. The output of the various receivers was sent via UDP to AISdispatcher which removes any duplicates and counts messages. The results in terms of number of messages/distinct vessels:</p> File AIS-catcher v0.35 AIS-catcher v0.33 rtl-ais AISrec 2.208 (trial - super fast) AISrec 2.208 (pro - slow2) AISrec 2.301 (pro - slow2) Source Scheveningen 44/37 43/37 17/16 30/27 37/31 39/33 recorded @ 1536K with <code>rtl-sdr</code> (auto gain) Moscow 213/35 210/32 146/27 195/31 183/34 198/35 shared by user @ 1920K in discussion Vlieland 93/54 93/53 51/31 72/44 80/52 82/50 recorded @ 1536K with <code>rtl-sdr</code> (auto gain) Posterholt 39/22 39/22 2/2 13/12 31/21 31/20 recorded @ 1536K with <code>rtl-sdr</code> (auto gain) <p>Update 1: AISrec had a version update of 2.208 (October 23, 2021) with improved stability and reception quality and the table above has been updated to include the results from this recent version. </p> <p>Update 2: Feverlaysoft has kindly provided me with a license for version 2.208 of AISrec allowing access to additional decoding models. Some experimentation suggests that \"Slow2\" works best for these particular examples and has been included in the above overview.</p> <p>Update 3: AISrec had a version update to 2.301 (April 17, 2022) with reduced runtime and the table above has been updated to include the results from this recent version. </p>"},{"location":"advanced/validation/#some-stations-with-ais-catcher","title":"Some stations with AIS-catcher","text":"<p>A list of some stations mentioning using AIS-catcher:</p> <ul> <li>A caruna, Spain</li> <li>Asendorf, Germany</li> <li>Blackfield 01, UK</li> <li>Boston, US</li> <li>Chaos Consulting, Germany</li> <li>Edinburgh, UK</li> <li>Haiphong, Vietnam</li> <li>La Linea de la Concepcion, Spain</li> <li>Naha, Okinawa</li> <li>Oranjeplaat Arnemuiden, NL</li> <li>Pickwick Landing, USA</li> <li>SeaRange AIS receiver</li> <li>Seattle Capitol Hill, US</li> <li>Troguarat, France</li> <li>Tyres, Sweden</li> <li>Vancouver North, Canada with hardware description here.</li> <li>Vancouver West End, Canada</li> <li>Vasa, Finland</li> <li>Vernouillet, France</li> <li>Vlissingen, NL</li> </ul> <p>AIS-catcher connected to a commercial AIS receiver via serial port:</p> <ul> <li>Wren Road Rab 2</li> <li>Baltimore, Ireland</li> </ul>"},{"location":"community/overview/","title":"Contributing Data","text":"<p>There are two ways to share your AIS data with our community:</p>"},{"location":"community/overview/#users-of-ais-catcher","title":"Users of AIS-catcher","text":"<p>If you're running AIS-Catcher, you can enable community sharing through a simple configuration setting. This allows direct integration with our platform.</p>"},{"location":"community/overview/#existing-stations","title":"Existing stations","text":"<p>Already feeding data to other aggregators like MarineTraffic, VesselFindr, ShipXplorer? You can easily contribute to our community too:</p> <ol> <li>Request a dedicated UDP port</li> <li>Configure your existing station to forward RAW NMEA data</li> <li>Start contributing to our global network</li> </ol> <p>Join our growing community of maritime enthusiasts and help expand global AIS coverage!</p>"},{"location":"configuration/model/","title":"Decoding Models","text":"AIS-catcher         [-mmodel]         -go         [setting value]         ...      <p>There is typically no need to tweak the model settings but below is provided for the experimenters and the enthusiasts.</p>"},{"location":"configuration/model/#model-selection","title":"Model Selection","text":"<p>The command line provides the <code>-m</code> option which selects the specific decoding model.  In the current version, 4 different receiver models are embedded for raw data samples:</p> <ul> <li>Default Model (<code>-m 2</code>): the default demodulation engine.</li> <li>Base Model (non-coherent) (<code>-m 1</code>): using FM discriminator model, similar to RTL-AIS (and GNUAIS/Aisdecoder) with tweaks to the Phase Locked Loop and main receiver filter (computed with a stochastic search algorithm).</li> <li>Standard Model (non-coherent) (<code>-m 0</code>): as the Base Model with brute force timing recovery.</li> <li>FM Discriminator model: (<code>`-m</code>3`) as the Standard Model but with the input already assumed to be the output of an FM discriminator. Hence no FM demodulation takes place which allows <code>AIS-catcher</code> to be used as GNUAIS and AISdecoder.</li> </ul> <p>The Default Model is the most time and memory consuming but experiments suggest it to be the most effective. In my home station, it improves message count by a factor 2 - 3. The reception quality of the Standard Model over the Base Model is more modest at the expense of roughly a 20% increase in computation time. Advice is to start with the Default Model, which should run fine on most modern hardware including a Raspberry 4B and then scale down to <code>-m 0</code>or even <code>-m 1</code>, if needed.</p>"},{"location":"configuration/model/#running-multiple-models","title":"Running multiple models","text":"<p>Notice that you can execute multiple models for one input device for benchmarking purposes but only the messages from the first model specified are displayed on screen. To benchmark different models specify <code>-b</code> for timing and/or <code>-v</code> to compare message count, e.g. <pre><code>AIS-catcher -s 1536K -r posterholt.raw -m 2 -m 0 -m 1 -q -b -v\n</code></pre> The program will run and summarize the performance (count and timing) of three decoding models (on a Raspberry Pi 4B): <pre><code>[AIS engine v0.35]:                      38 msgs at 6.3 msg/s\n[Standard (non-coherent)]:               4 msgs at 0.7 msg/s\n[Base (non-coherent)]:                   3 msgs at 0.5 msg/s\n</code></pre> <pre><code>[AIS engine v0.35]:                      1036.54 ms\n[Standard (non-coherent)]:               932.47 ms\n[Base (non-coherent)]:                   859.065 ms\n</code></pre> In this example the Default Model performs quite well in contrast to the Standard non-coherent engine with 38 messages identified versus 4 for the standard engine.  This is typical when there are messages of poor quality. However, it increases the decoding time a bit and has a slightly higher memory usage so needs more powerful hardware. Please note that the improvements seen for this particular file are an exception.</p>"},{"location":"configuration/model/#other-models","title":"Other models","text":"<p>For completeness, the decoder for NMEA input as text is activated by <code>-m 5</code> and <code>-m</code>4` is an experimental implementation to test new ideas. In practice, the user will not require these settings.</p>"},{"location":"configuration/model/#nmea-input","title":"NMEA input","text":"<p>AIS-catcher can be used as a command line utility that decodes NMEA lines in a file and prints the results as JSON. It provides a way to move the JSON analysis to the server side (send over NMEA with minimal metadata) or for unit testing the JSON decoder which was the prime reason for the addition of this feature. As an example: <pre><code>echo '!AIVDM,1,1,,B,3776k`5000a3SLPEKnDQQWpH0000,0*78'  | AIS-catcher -r txt . -o 5\n</code></pre> which produces <pre><code>{\"class\":\"AIS\",\"device\":\"AIS-catcher\",\"scaled\":true,\"channel\":\"B\",\"nmea\":[\"!AIVDM,1,1,,B,3776k`5000a3SLPEKnDQQWpH0000,0*78\"],\"type\":3,\"repeat\":0,\"mmsi\":477213600,\"status\":5,\"status_text\":\"Moored\",\"turn\":0,\"speed\":0.000000,\"accuracy\":true,\"lon\":126.605469,\"lat\":37.460617,\"course\":39.000000,\"heading\":252,\"second\":12,\"maneuver\":0,\"raim\":false,\"radio\":0}\n</code></pre> When piping NMEA text lines into AIS-catcher, use format <code>TXT</code> which ensures that the program immediately processes the incoming characters and will not buffer them first. The NMEA decoder can be activated with the switch <code>-m 5</code> but setting the input format to TXT will automatically activate this decoder. </p> <p>This functionality opens a few doors. For example, you can use AIS-catcher to read and forward messages from a dAISy Hat (simply read from the file <code>cat /dev/serial0</code> on Linux) or process the data from Norwegian coastal traffic offered via a TCP server, like this: <pre><code>netcat  153.44.253.27  5631 | AIS-catcher -r txt . -o 5\n</code></pre></p> <p>For input via TCP, you can skip the <code>netcat</code> command and directly read the input into the program as follows: <pre><code>AIS-catcher -t txt 153.44.253.27 5631\n</code></pre> Again, the <code>FORMAT txt</code> option switches off the buffering and automatically selects the NMEA decoder.</p> <p>Finally, you can also receive NMEA input via a built-in UDP server: <pre><code>AIS-catcher -x 192.168.1.235 4002\n</code></pre></p> <p>The functionality to read NMEA lines from text files has been used to validate AIS-catcher JSON output on a file with 80K+ lines against pyais and gpsdecode. Only available switches for this decoder are <code>-go NMEA_REFRESH</code> and <code>-go CRC_CHECK</code> which force AIS-catcher to, respectively, recalculate the NMEA lines if <code>on</code> (default <code>off</code>) and ignore messages with incorrect CRC if <code>on</code> (default <code>off</code>). Example:  <pre><code>echo '$AIVDM,1,1,,,3776k`5000a3SLPEKnDQQWpH0000,0*79' | AIS-catcher -r txt . -n -go nmea_refresh on crc_check off\n</code></pre> returns a warning on the incorrect CRC and: <pre><code>!AIVDM,1,1,,,3776k`5000a3SLPEKnDQQWpH0000,0*3A\n</code></pre> Note that CRC/checksum is the simple xor-checksum for validating that the NMEA line is not corrupted and not the CRC that is transmitted with the AIS message for a decoder to check the correct reception over air. This latter 16-bit checksum/CRC is not included in the NMEA message.</p> <p>AIS-catcher will also accept AIVDO input which is typically used for the MMSI of the own ship. You can enable/disable this with: <code>-go VDO on/off</code>.</p>"},{"location":"configuration/model/#model-settings","title":"Model Settings","text":""},{"location":"configuration/model/#common-settings","title":"Common Settings","text":"Key Type Default Description DROOP boolean true Enable droop compensation in CIC5 filters FP_DS boolean false Enable fixed-point downsampling STATION_ID integer 0 Station identifier OWN_MMSI integer -1 Own vessel MMSI"},{"location":"configuration/model/#downsampling-options","title":"Downsampling Options","text":"Key Type Default Description SOXR boolean false Use SOXR resampler SRC boolean false Use SRC resampler MA boolean false Use moving average downsampling"},{"location":"configuration/model/#nmea-model-settings","title":"NMEA Model Settings","text":"Key Type Default Description NMEA_REFRESH boolean false Recalculate NMEA lines CRC_CHECK boolean false Enable CRC validation VDO boolean true Accept AIVDO messages STAMP boolean false Add timestamps GPS boolean false Enable GPS output UUID string - Set UUID for messages WARNINGS boolean true Show warning messages"},{"location":"configuration/overview/","title":"AIS-catcher Architecture","text":""},{"location":"configuration/overview/#usage-profiles","title":"Usage Profiles","text":"<p>AIS-catcher follows a modular architecture that can scale from simple to complex configurations to cater for various use cases.</p> Receiver <p>Minimal decode &amp; output</p> Aggregator <p>Route &amp; filter streams</p> Database <p>Log to PostgreSQL</p> Experimenter <p>Multi-SDR testing</p> Map Viewer <p>Built-in visualization</p>"},{"location":"configuration/overview/#basic-data-flow","title":"Basic Data Flow","text":"<p>In its simplest form, AIS-catcher processes data through three main stages:</p> Basic Flow Input Model Output"},{"location":"configuration/overview/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is organized along these lines.</p> <p>Input Examples: RTL-SDR, Airspy, network streams, files.</p> <p>Model Message decoding and processing. AIS-catcher includes various decoding models for experimentation.</p> <p>Output Examples: screen display, file logging, network streaming, database storage</p>"},{"location":"configuration/overview/#advanced-architecture","title":"Advanced Architecture","text":"<p>For more complex setups, AIS-catcher supports multiple inputs with input-specific models:</p> Advanced Architecture Input 1 Input 2 Model A1 Model A2 Model B Output 1 Output 2 Output 3 <p>In this advanced setup: Multiple input sources operate independently. Each input can use multiple specialized models for decoding.  Each model can send data to one or more multiple outputs.</p>"},{"location":"configuration/input/NMEA2000/","title":"Input over NMEA2000 format","text":""},{"location":"configuration/input/airspy/","title":"AirSpy Mini/R2","text":"AIS-catcher         [-d serial number]         -gm         [setting value]         ...      <p>The AirSpy Mini/R2 requires careful gain configuration as described here.  As outlined in that reference there are three different gain modes: linearity, sensitivity and so-called free. These can be set via the <code>-gm</code>switch when using the AirSpy. </p> <p>We can activate 'linearity' mode with gain <code>10</code>using the following <code>AIS-catcher</code> command line:</p> <p><pre><code>AIS-catcher -gm linearity 10\n</code></pre> Settings can also be provided per stage: <pre><code>AIS-catcher -gm lna AUTO vga 12 mixer 12\n</code></pre> More guidance on setting the gain model and levels can be obtained in the mentioned link.</p>"},{"location":"configuration/input/airspy/#summary-setings","title":"Summary Setings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer 192K Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000, 0=off) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string CF32 Data type for input source Specific Options SENSITIVITY integer - Sensitivity gain mode (0-21) LINEARITY integer 17 Linearity gain mode (0-21) VGA integer 10 VGA gain in Free mode (0-14) MIXER auto/integer auto Mixer gain/AGC in Free mode (0-14 or AUTO) LNA auto/integer auto LNA gain/AGC in Free mode (0-14 or AUTO) BIASTEE boolean false Enable/disable bias tee power"},{"location":"configuration/input/airspyhf/","title":"AirSpy HF+","text":"AIS-catcher         [-d serial number]         -gh         [setting value]         ...      <p>Gain settings specific for the AirSpy HF+ can be set on the command line with the <code>-gh</code> switch. The following command switches off the preamp:</p> <pre><code>AIS-catcher -gh preamp OFF\n</code></pre> <p>Please note that only AGC mode is supported so there are limited options.</p>"},{"location":"configuration/input/airspyhf/#summary-settings","title":"Summary Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer Device-specific Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT enum Device-specific Data type for input source Specific Options PREAMP boolean false Enable/disable preamplifier THRESHOLD enum LOW AGC threshold setting (\"HIGH\" or \"LOW\")"},{"location":"configuration/input/file/","title":"Input from file and stdin","text":"AIS-catcher -r -ga         [setting value]         ...      AIS-catcher -r filename -ga         [setting value]         ...      AIS-catcher -r format filename -ga setting value         ..."},{"location":"configuration/input/file/#reading-from-stdin","title":"Reading from STDIN","text":"<p>AIS-catcher can read input in two ways using the -r switch: from a file by specifying a filename, or from standard input by using either a dot (.) or stdin as the argument: <pre><code>AIS-catcher -r .\n</code></pre></p>"},{"location":"configuration/input/file/#pipeline-example","title":"Pipeline example","text":"<p>AIS-catcher can be integrated into command-line processing pipelines for real-time signal processing. For example, you can capture radio signals using rtl_sdr and pipe them directly to AIS-catcher for decoding: <pre><code>rtl_sdr -s 288K -f 162M  - | AIS-catcher -r . -s 288K -v\n</code></pre> You can also perform signal transformations using tools like <code>sox</code>. Here's an example of downsampling a signal before processing: <pre><code>sox -c 2 -r 1536000 -b 8 -e unsigned -t raw posterholt.raw -t raw -b 16 -e signed -r 96000 - |AIS-catcher -s 96K -r CS16 . -v\n</code></pre></p> <p>As of version 0.36, AIS-catcher includes built-in sox functionality (if compiled with this feature), allowing for built-in usage of sox: <code>bash AIS-catcher -s 1536K -r CU8 posterholt.raw -v -go SOXR on</code></p> <p>By default, AIS-catcher expects input files to be in raw unsigned 8-bit IQ format (CU8). You can specify other formats using the FORMAT setting.</p>"},{"location":"configuration/input/file/#nmea0183-input-from-file","title":"NMEA0183 input from file","text":"<p>For a text file with NMEA input, we can use: <pre><code>AIS-catcher -r txt nmea-file\n</code></pre> Or equivalently for illustration purposes: <pre><code>AIS-catcher -r -ga FORMAT txt file nmea-file\n</code></pre></p>"},{"location":"configuration/input/file/#summary-settings","title":"Summary Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer 1536K Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000), 0 = off FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string CU8 Data type for input source Specific Options FILE string - Input file path or \"stdin\" for standard input LOOP boolean false Enable continuous file looping"},{"location":"configuration/input/hackrf/","title":"HackRF","text":"AIS-catcher         [-d serial number]         -gf         [setting value]         ...      <p>Settings specific for the HackRF can be set on the command line with the <code>-gf</code> switch, e.g.:</p> <pre><code>AIS-catcher -gf lna 16 vga 16 preamp OFF\n</code></pre>"},{"location":"configuration/input/hackrf/#summary-settings","title":"Summary Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer 6144K Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000, 0=off) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string CS8 Data type for input source Specific Options LNA integer 8 LNA (RF) gain in dB (0-40, rounded to multiples of 8) VGA integer 20 VGA (IF) gain in dB (0-62, rounded to multiples of 2) PREAMP boolean false Enable/disable preamplifier"},{"location":"configuration/input/overview/","title":"Input Configuration","text":""},{"location":"configuration/input/overview/#device-selection-and-discovery","title":"Device Selection and Discovery","text":"<p>To list all connected compatible hardware devices: <pre><code>AIS-catcher -l\n</code></pre> To select a specific device, use either:</p> <p><code>-d:N</code> where N is the device number from the list <code>-d SERIAL</code> where SERIAL is the device's serial number</p>"},{"location":"configuration/input/overview/#universal-settings","title":"Universal Settings","text":"<p>The following settings apply across all input devices. For the most common options there is a command line option available that can be used as a shortcut. </p> Option Command Line Key Description Range Default Sample Rate <code>-s RATE</code> SAMPLE_RATE Sampling rate in Hz 0-20,000,000 Device-specific Bandwidth <code>-a BW</code> BANDWIDTH Tuner bandwidth in Hz 0-1,000,000 0 (none) Frequency Correction <code>-p PPM</code> FREQOFFSET Frequency correction in PPM -150 to +150 0 Data Type FORMAT CU8, CF32, CS16, CS8, TXT Device-specific <p>For example, to set the sample rate to 1536K, frequecy offset of your device to 1 ppm and bandwidth to 192K: <pre><code>AIS-catcher -s 1536K -a 192K -p 1\n</code></pre></p> <p>The format option sets the data type for the input source. This is less relevant for SDRs but is useful when reading raw data from file or an internet connection.</p>"},{"location":"configuration/input/overview/#multiple-device-input","title":"Multiple device input","text":"<p>We can run with multiple receivers in parallel. For example, one dongle for channel A+B and one dongle for channel C+D. To run with two receivers in parallel you can use a command like: <pre><code>AIS-catcher -d serial1 -v -d serial2 -c CD -v -N 8100\n</code></pre></p> <p>Similarly, this functionality allows to receive input from an AIS receiver over UDP via a UDP server and a connected GPS device in parallel, e.g.: <pre><code>AIS-catcher -e 38400 /dev/serial/by-id/usb-u-blox_AG_-_www.u-blox.com_u-blox_7_-_GPS_GNSS_Receiver-if00 -x 192.168.1.235 4002\n</code></pre> The first receiver (<code>-e ...</code>) reads from a GPS device that is connected and emits NMEA lines. The second receiver (<code>-x</code>) reads AIS NMEA lines at port 4002 coming from another instance of AIS-catcher. The station is now plotted on the map with the location as provided by the GPS coordinates. The web page has an option to fix the center of the map on the location of the receiving station (right-click on the station icon on the map).</p>"},{"location":"configuration/input/overview/#further-documentation","title":"Further Documentation","text":"<p>For detailed information about specific devices and input types, please refer to the following documentation:</p> <p>See the Input Overview for a complete introduction to all input options.</p>"},{"location":"configuration/input/overview/#sdr-devices","title":"SDR Devices","text":"<ul> <li>RTL-SDR </li> <li>AirSpy </li> <li>AirSpy HF+ </li> <li>HackRF </li> <li>SDRPlay </li> <li>SoapySDR </li> </ul>"},{"location":"configuration/input/overview/#other-inputs","title":"Other Inputs","text":"<ul> <li>TCP Input</li> <li>UDP Input</li> <li>SpyServer Input</li> <li>File </li> <li>Wave File </li> <li>Serial Port </li> <li>NMEA2000  </li> </ul>"},{"location":"configuration/input/rtlsdr/","title":"RTL SDR","text":"AIS-catcher         [-d serial number]         -gr         [setting value]         ...      <p>Gain and other settings specific to the RTL SDR can be set on the command line with the <code>-gr</code> switch. For example, the following command sets the tuner gain to +33.3 and switches the RTL AGC on:</p> <pre><code>AIS-catcher -gr tuner 33.3 rtlagc ON\n</code></pre> <p>Settings are not case-sensitive.</p>"},{"location":"configuration/input/rtlsdr/#specific-settings","title":"Specific Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer 1536K Sampling rate in Hz (0-20,000,000) BANDWIDTH integer off Tuner bandwidth in Hz (0-1,000,000, 0=auto) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string CU8 Data type for input source Specific Options TUNER auto/float auto Tuner gain/AGC (0-50 dB or AUTO) RTLAGC boolean true Enable/disable RTL2832U AGC BIASTEE boolean false Enable/disable bias tee power BUFFER_COUNT integer 24 Number of FIFO buffers (1-100)"},{"location":"configuration/input/sdrplay/","title":"SDRPlay RSP1/RSP1A/RSPDX (API 3.x)","text":"AIS-catcher         [-d serial number]         -gs         [setting value]         ...      <p>Settings specific for the SDRPlay  can be set on the command line with the <code>-gs</code> switch, e.g.: <pre><code>AIS-catcher -gs lnastate 5\n</code></pre></p>"},{"location":"configuration/input/sdrplay/#summary-settings","title":"Summary Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer 2304K Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string CF32 Data type for input source Specific Options AGC boolean false Enable/disable Automatic Gain Control LNASTATE integer 0 LNA state/gain (0-9) GRDB integer 32 RF gain reduction in dB (0-59) ANTENNA char 'A' Antenna selection (A/B/C) for RSPdx models"},{"location":"configuration/input/serial/","title":"Serial Port","text":""},{"location":"configuration/input/serial/#serial-port","title":"Serial Port","text":"AIS-catcher -e port -ge         [setting value]         ...      AIS-catcher -e baudrate port -ge         [setting value]         ...      <p>Settings specific for reading NMEA lines from a serial port can all be set with the <code>e</code> switch fow now, e.g. on Linux: <pre><code>AIS-catcher -e 368400 /dev/serial1\n</code></pre></p> <p>To dump the raw input from the serial device on-screen use <code>-</code>ge print on`.</p>"},{"location":"configuration/input/serial/#summary-settings","title":"Summary Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer N/A Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000, 0=off) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string TXT Data type for input source Specific Options BAUDRATE integer 38400 Serial port speed PORT string 0 Serial port device path/name PRINT boolean false Enable debug printing of received data"},{"location":"configuration/input/soapysdr/","title":"SoapySDR","text":"AIS-catcher -gu         [setting value]         ...      <p>In general we recommend to use the built-in drivers for supported SDR  devices. However, AIS-catcher also supports a wide variety of other devices via the SoapySDR library which is an independent SDR support library. SoapySDR is not included by default in the standard build. To enable SoapySDR support follow the build instructions below but replace the <code>cmake</code> call with: <pre><code>cmake .. -DSOAPYSDR=ON\n</code></pre> The result is that AIS-catcher adds a few additional \"devices\" to the device list (<code>-l</code>): a generic SoapySDR device and one device for each receiving channel for each device, e.g. with one RTL-SDR dongle connected this would look like: <pre><code>Found 3 device(s):\n0: Realtek, RTL2838UHIDIR, SN: 00000001\n1: SOAPYSDR, 1 device(s), SN: SOAPYSDR\n2: SOAPYSDR, driver=rtlsdr,serial=00000001, SN: SCH0-00000001\n</code></pre> To start streaming via Soapy we can use: <pre><code>AIS-catcher -d SCH0-00000001\n</code></pre> Note that the serial number has a prefix of <code>SCH0</code> (short for SoapySDR Channel 0) to distinguish it from the device accessed via the native SDR library. Alternatively, we can use a device-string to select the device:  <pre><code>AIS-catcher -d SOAPYSDR -gu device \"serial=00000001,driver=rtlsdr\" -s 1536K\n</code></pre> Stream arguments and gain arguments can be set similarly via <code>-gu STREAM</code> and <code>-gu GAIN</code> followed by an argument string (if it contains spaces use \"\"). Please note that SoapySDR does not signal if the input parameters for the device are not set properly. We therefore added the <code>-gu PROBE on</code> switch which displays the actual settings used, e.g. <pre><code>AIS-catcher -d SOAPYSDR -s 1536K -gu GAIN \"TUNER=37.3\" PROBE on SETTINGS \"biastee=true\"\n</code></pre> To complete the example, this command also sets the tuner gain for the RTL-SDR to 37.3 and switches on the bias-tee via the SETTING command giving access to the device's extra settings.</p> <p>If the sample rates for a device are not supported by AIS-catcher, the SOXR functionality could be considered (e.g. <code>-go SOXR on</code>). Again, we advise to use the built-in drivers and include resampling functionality where possible.  </p>"},{"location":"configuration/input/soapysdr/#summary-settings","title":"Summary Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer 0/span&gt; Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000, 0=off) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string CF32 Data type for input source Specific Options DEVICE string \"\" SoapySDR device arguments string GAIN string - Gain settings in key=value pairs STREAM string - Stream arguments in key=value pairs SETTING string - Device settings in key=value pairs ANTENNA string - Antenna selection AGC boolean true Enable/disable Automatic Gain Control PROBE boolean false Print actual device settings CH integer 0 Channel selection (0-32)"},{"location":"configuration/input/spyserver/","title":"SpyServer","text":"AIS-catcher -y url -gy         [setting value]         ...      AIS-catcher -y url port -gy         [setting value]         ...      <p>For SpyServer  use the <code>-y</code> switch like: <pre><code>AIS-catcher -y 192.168.1.235 5555 -gy GAIN 14\n</code></pre></p>"},{"location":"configuration/input/spyserver/#summary-settings","title":"Summary Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer Host specific Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000, 0 = off) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string CF32 Data type for input source Specific Options URL string - Full connection URL (sdr://host:port) HOST string localhost SpyServer host address PORT string 1234 SpyServer port GAIN float 0.0 Tuner gain (0-50 dB) TIMEOUT integer 2 Connection timeout in seconds"},{"location":"configuration/input/tcp/","title":"Input over TCP","text":"AIS-catcher -t url -gt         [setting value]         ...      AIS-catcher -t host port -gt         [setting value]         ...      AIS-catcher -t protocol host port -gt         [setting value]         ...      <p>Input over TCP with various protocols can be done with <code>-t</code> followed by the URL of the server. As an example, to read raw NMEA from a TCP server we can use: <pre><code>AIS-catcher -t txt://192.168.1.120:5011\n</code></pre></p> <p>Various protocols are supported as input. The table below lists the available protocols and their descriptions:</p> Protocol Description Protocol Description <code>txt</code> NMEA0183 <code>mqtt</code> MQTT <code>gpsd</code> GPSD server <code>wsmqtt</code> MQTT over WS <code>rtltcp</code> Connecting to an RTL-TCP server <p>Use the appropriate protocol based on your server's configuration and data format. </p>"},{"location":"configuration/input/tcp/#summary-settings","title":"Summary Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer 288K Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string CU8 Data type for input source Specific Options HOST string - Remote host address PORT string - Remote port number PROTOCOL string rtltcp Protocol (RTLTCP/MQTT/GPSD/WS/WSMQTT) URL string - Complete URL including protocol and credentials TCP Options PERSISTENT boolean true Keep connection alive after errors KEEP_ALIVE boolean false Enable TCP keepalive RESET integer -1 Reset connection after N minutes (-1=never) TIMEOUT integer 0 Connection timeout in seconds WebSocket Options PROTOCOLS string mqtt WebSocket sub-protocols BINARY boolean on Enable binary WebSocket mode ORIGIN string - Origin header for WebSocket MQTT Options TOPIC string ais/data MQTT topic CLIENT_ID string - MQTT client identifier USERNAME string - MQTT username PASSWORD string - MQTT password QOS integer 0 MQTT QoS level (0-2) RTLTCP Options TUNER float 33.0 Tuner gain (0-50, auto) RTLAGC boolean false Enable RTL AGC FREQUENCY integer 0 Frequency in Hz"},{"location":"configuration/input/udp/","title":"Input as UDP server","text":"AIS-catcher -x         [setting value]         ...      <p>You can receive NMEA input via a built-in UDP server: <pre><code>AIS-catcher -x 192.168.1.235 4002\n</code></pre></p>"},{"location":"configuration/input/udp/#summary-settings","title":"Summary Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer Device-specific Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string - Data type for input source Specific Options PORT string - UDP server port to listen on SERVER string - UDP server address to bind to"},{"location":"configuration/input/wav/","title":"Input as WAV-file","text":"AIS-catcher -w filename         [setting value]         ..."},{"location":"configuration/input/wav/#summary-settings","title":"Summary Settings","text":""},{"location":"configuration/input/wav/#specific-settings","title":"Specific Settings","text":"Key Type Default Description Generic Options SAMPLE_RATE integer Device-specific Sampling rate in Hz (0-20,000,000) BANDWIDTH integer 0 Tuner bandwidth in Hz (0-1,000,000) FREQOFFSET integer 0 Frequency correction in PPM (-150 to +150) FORMAT string - Data type for input source Specific Options FILE string - WAV file path to read from"},{"location":"configuration/output/HTTP/","title":"HTTP","text":"AIS-catcher -H url         [setting value]         ...      <p>Some cloud services collecting AIS data prefer messages to be periodically posted via the HTTP protocol, for example, APRS.fi. As per version 0.29, AIS-catcher can do this directly via the <code>-H</code> switch. For example: <pre><code>AIS-catcher -r posterholt.raw -v 60 -H http://localhost:8000 INTERVAL 10 ID MyStation\n</code></pre> will post JSON with the following layout every 10 seconds:</p> <p><pre><code>{\n    \"protocol\": \"jsonaiscatcher\",\n    \"encodetime\": \"20221102171325\",\n    \"stationid\": \"MyStation\",\n    \"receiver\":\n        {\n        \"description\": \"AIS-catcher v0.39\",\n        \"version\": 39,\n        \"engine\": \"Base (non-coherent)\",\n        \"setting\": \"droop ON fp_ds OFF \"\n        },\n    \"device\":\n        {\n        \"product\": \"FILE-RAW\",\n        \"vendor\": \"\",\n        \"serial\": \"\",\n        \"setting\": \"rate 1536K file posterholt.raw format CU8\"\n        },\n    \"msgs\": [ \n        {\"class\":\"AIS\",\"device\":\"AIS-catcher\",\"rxtime\":\"20221102171324\",\"scaled\":true,\"channel\":\"A\",\"nmea\":[\"!AIVDM,1,1,,A,13`fL1PP140KCELMBO7SS?wH0@Jv,0*50\"],\"ppm\":0.000000,\"type\":1,\"mmsi\":244030470,\"status\":0,\"status_text\":\"Under way using engine\",\"speed\":6.800000,\"accuracy\":false,\"lon\":5.964237,\"lat\":51.185970,\"course\":90.800003,\"repeat\":0,\"second\":44,\"maneuver\":0,\"raim\":false,\"radio\":67262}\n    ]\n}\n</code></pre> We can use this functionality to submit data to APRS.fi directly without the need of middleware: <pre><code>AIS-catcher -H http://aprs.fi/jsonais/post/secret-key ID callsign PROTOCOL aprs INTERVAL 30 -q\n</code></pre> Where <code>secret-key</code> should be your password and <code>callsign</code> your callsign.  The <code>PROTOCOL</code> setting instructs AIS-catcher to submit JSON in a form that is accepted by APRS.fi which is a multi-form HTTP message. The response from the server will be printed on screen, if you want to show this message only in case of an error, add <code>RESPONSE OFF</code> to the argument.</p> <p>Another example of this HTTP feed functionality is to provide data to Chaos Consulting without the need to install any additional scripts. The Chaos Consulting server has been set up so that it can read the AIS-catcher JSON format as per above: <pre><code>AIS-catcher -H https://ais.chaos-consulting.de/shipin/index.php USERPWD Station:Password GZIP on INTERVAL 5\n</code></pre> Notice that this server requires authentication with a station name and password and accepts JSON with gzip encoding which significantly reduces bandwidth. </p> <p>Important: to use and build AIS-catcher with HTTP support, please install the following libraries before running cmake: <pre><code>sudo apt install libssl-dev zlib1g-dev\n</code></pre> This step is only required if you want to ZIP content and post data to secure servers.</p> <p>The supported protocol switches are <code>AISCATCHER</code> (default), <code>MINIMAL</code> (NMEA lines and metadata), <code>LINES</code> (one JSON message per line), <code>APRS</code> (to submit to APRS.fi).</p>"},{"location":"configuration/output/HTTP/#summary-settimgs","title":"Summary Settimgs","text":"Key Type Default Description URL string - Target HTTP endpoint URL USERPWD string - Authentication credentials STATIONID string - Station identifier INTERVAL integer 60 Post interval in seconds (1-86400) TIMEOUT integer 10 Connection timeout in seconds (1-30) GZIP boolean false Enable GZIP compression RESPONSE boolean true Show response messages PROTOCOL string AISCATCHER Protocol type (AISCATCHER/MINIMAL/AIRFRAMES/LIST/APRS) LAT float 0.0 Station latitude LON float 0.0 Station longitude DEVICE_SETTING string N/A Device settings <p>Note: filter and routing options can be set as per generic output settings</p>"},{"location":"configuration/output/MQTT/","title":"MQTT Integration","text":"AIS-catcher -Q url         [setting value]         ...      <p>AIS-catcher can push AIS messages via the MQTT protocol (3.1.1) to a broker with the <code>-Q</code> switch. An example with all settings: <pre><code>AIS-catcher -Q mqtt://username:password@127.0.0.1:1883 CLIENT_ID aiscatcher QOS 0 TOPIC data/ais MSGFORMAT JSON_NMEA\n</code></pre></p> <p>More examples:  ```bash   # Basic MQTT connection   AIS-catcher -Q mqtt://127.0.0.1:1883</p> <p># WebSocket MQTT connection   AIS-catcher -Q wsmqtt://127.0.0.1:1883</p> <p># With message format and topic   AIS-catcher -Q mqtt://127.0.0.1:1883 admin MSGFORMAT JSON_FULL TOPIC data/ais</p> <p># With authentication and client ID   AIS-catcher -Q mqtt://username:password@127.0.0.1:1883 admin CLIENT aiscatcher   ```</p>"},{"location":"configuration/output/MQTT/#summary-settings","title":"Summary Settings","text":"Key Type Default Description URL string - MQTT broker URL (mqtt[s]://[user:pass@]host[:port]) HOST string - MQTT broker hostname PORT string - MQTT broker port USERNAME string - MQTT username PASSWORD string - MQTT password TOPIC string ais/data MQTT topic CLIENT_ID string - MQTT client identifier QOS integer 0 MQTT QoS level (0-2) MSGFORMAT string NMEA Output format (NMEA/JSON_NMEA/JSON_FULL) PROTOCOL string MQTT Protocol (MQTT/WS/WSMQTT) WebSocket Options PROTOCOLS string mqtt WebSocket sub-protocols BINARY boolean on Enable binary WebSocket mode"},{"location":"configuration/output/NMEA2000/","title":"NMEA2000 input and output via SocketCAN","text":"<p>In v0.56 we introduced \"Experimenter Mode\" for NMEA2000 input and output via socketCAN on Linux. To properly handle the mechanics of a NMEA2000 network, the NMEA2000 library by  Timo Lappalainen is required, build AIS-catcher in the main directory with:   <pre><code>./scripts/build-NMEA2000.sh\n</code></pre>   This downloads and builds the NMEA2000 library and includes it in the AIS-catcher build process.   The following example creates a UDP server listening on port 4002 and forwards these messages to the CAN-bus (<code>vcan0</code>):   <pre><code>AIS-catcher -x 192.168.1.120 4002 -I vcan0  \n</code></pre>   Current implementation handles AIS messages 1-5, 9, 11, 14, 18, 19, 21, 24 and have been very high-level tested with the excellent CANboat utilities and a virtual network.   Another option is to have AIS-catcher read AIS messages on the NMEA2000 canbus:   <pre><code>AIS-catcher -i vcan0\n</code></pre>   Note that this only works on Linux with socketCAN support and has not been tested properly. Obviously, the program is not certified by NMEA and is not build for connecting it to a NMEA2000 network on a boat. It is for the experimenters wanting to learn and play with networks and AIS.</p> <p>## Summary Settings Input</p> Key Type Default Description INTERFACE string \"can0\" CAN bus interface name"},{"location":"configuration/output/NMEA2000/#summary-settings-output","title":"Summary Settings Output","text":"Key Type Default Description NETWORK string \"\" CAN network interface name"},{"location":"configuration/output/PSQL/","title":"Writing AIS messages to a Postgres Database","text":"AIS-catcher -D url         [setting value]         ...      <p>As per full release <code>v0.45</code>, there is functionality to write messages to a database (PostgreSQL). The setup is fairly flexible and can be tailored to the particular needs. First create an empty PostgreSQL database, e.g on an Ubuntu distribution (this might be different on your system): <pre><code>sudo -u postgres createdb ais\n</code></pre> Set up the necessary tables from the AIS-catcher directory: <pre><code>psql ais &lt;DBMS/create.sql \n</code></pre> Make sure you build the latest version of AIS-catcher with this dependency: <pre><code>sudo apt install libpq-dev\n</code></pre> Now AIS-catcher can write the received messages to the database: <pre><code>AIS-catcher -D dbname=ais STATION_ID 17\n</code></pre> or when more details, like username and password, are required: <pre><code>AIS-catcher -D postgresql://[user[:password]@][netloc][:port][/dbname]\n</code></pre> The <code>STATION_ID</code> setting is optional but will populate the entries in the database with the specified ID so multiple feeders can write to one database. There are a few settings for the new <code>-D</code> switch of which the first is the connection string that specifies the database. If you want to use a space in the string use quotation marks around the string. There are other settings that define how tables will be populated:</p> Table Description Settings Default ais_vessel last received data per MMSI V on/off on ais_message received messages with meta data MSGS on/off off ais_nmea nmea sentences NMEA on/off off ais_basestation basestation messsages from type 4 BS on/off off ais_sar_position sar positions from type 9 SAR on/off off ais_aton aton messages from type 21 ATON on/off off ais_vessel_pos vessel position messages from type 1-3, 18, 19, 27 VP on/off off ais_vessel_static vessel static data from type 5, 19 VS on/off off ais_property specific key/value pairs with link to message fill with keys specified in the table ais_keys empty <p>From hereon it is fairly straightforward to pick up this data and start analysis. If the connection fails during the decoding, for whatever reason, the program will try to reconnect to the database every 2 seconds. The maximum number of failed connection attempts before the program terminates is set with <code>MAX_FAILS</code> (&lt;1000) and is set on the command line. If <code>MAX_FAILS</code> is 1000 the program will not terminate if the connection fails.  </p> <p>I hope this is sufficient to get you experimenting! Unfortunately, the options cannot yet be set from the JSON configuration file which is work in progress.</p>"},{"location":"configuration/output/PSQL/#summary-settings","title":"Summary Settings","text":"Key Type Default Description CONN_STR string dbname=ais PostgreSQL connection string STATION_ID integer 0 Station identifier INTERVAL integer 10 Database write interval (5-1800 sec) MAX_FAILS integer 10 Max failed connection attempts Table Options V boolean true Enable vessel table logging MSGS boolean false Enable message table logging NMEA boolean false Enable NMEA sentence logging BS boolean false Enable basestation logging SAR boolean false Enable SAR position logging ATON boolean false Enable AtoN logging VP boolean false Enable vessel position logging VS boolean false Enable vessel static data logging"},{"location":"configuration/output/TCP-client/","title":"TCP Client","text":"AIS-catcher -P host port         [setting value]         ...      <p>To send raw NMEA as a TCP Client connecting to a listener: <pre><code>AIS-catcher -P 192.168.1.235 4002\n</code></pre> In this case, AIS-catcher acts as a TCP client and connects to the remote listener at 192.168.1.239 port 4002. </p>"},{"location":"configuration/output/TCP-client/#summary-settings","title":"Summary Settings","text":"Key Type Default Description HOST string - Target TCP server host PORT string - Target TCP server port KEEP_ALIVE boolean false Enable TCP keep-alive PERSIST boolean true Keep trying to reconnect when connection fails JSON boolean false Enable JSON output format UUID string - Unique identifier (must be valid UUID)"},{"location":"configuration/output/TCP-server/","title":"TCP Server","text":"AIS-catcher -S port         [setting value]          ...      <p>You can also set up AIS-catcher as a TCP listener itself for sending NMEA messages, i.e. the program acts as a TCP server where at most 64 clients can connect to and read NMEA lines: <pre><code>AIS-catcher -S 5011\n</code></pre></p>"},{"location":"configuration/output/TCP-server/#summary-settings","title":"Summary Settings","text":"Key Type Default Description PORT integer 5010 Listen port (0-65535) TIMEOUT integer - Connection timeout JSON boolean false Enable JSON output format"},{"location":"configuration/output/UDP/","title":"UDP","text":"AIS-catcher -u host port         [setting value]          ...      <p>AIS messages can be forwarded between applications over UDP via the <code>-u</code> switch and as a TCP Client using <code>-P</code>. To send data to a port at a specific server, we can use: <pre><code>AIS-catcher -u 192.168.1.235 4002\n</code></pre> The command accepts additonal parameters, e.g. to send NMEA messages packaged in a JSON object: <pre><code>AIS-catcher -u 192.168.1.235 4002 JSON on\n</code></pre> Most external programs will not be able to accept these JSON-packaged NMEA strings. It is a way to transfer received messages between AIS-catcher instances without losing metadata like the timestamp, ppm correction and signal level. These are not captured in the standard NMEA strings.  Another option for UDP sending via <code>-u</code> is <code>BROADCAST on/off</code> to enable sending to broadcast addresses.</p>"},{"location":"configuration/output/UDP/#summary-settimgs","title":"Summary Settimgs","text":"Key Type Default Description HOST string - Target UDP host address PORT string - Target UDP port JSON boolean false Enable JSON output format BROADCAST boolean false Enable broadcast mode RESET integer -1 Socket reset interval in minutes (1-1440) UUID string - Unique identifier (must be valid UUID)"},{"location":"configuration/output/community-feed/","title":"Community Feed","text":"AIS-catcher -X sharing key <p>Use <code>-X</code> followed by your unique sharing key.</p>"},{"location":"configuration/output/console/","title":"Console","text":"AIS-catcher -o mode <p>The output of NMEA messages to screen can be regulated with the <code>-o</code> switch. To suppress any messages to screen use <code>-o 0</code> or <code>-q</code>. This can be useful if you run AIS-catcher as a background process. To show only simple and pure NMEA lines, use the switch <code>-o 1</code> or <code>-n</code>. Example output: <pre><code>!AIVDM,1,1,,B,33L=LN051HQj3HhRJd7q1W=`0000,0*03\n</code></pre> By default, and using the command <code>-o 2</code>, AIS-catcher displays NMEA messages with some additional information: <pre><code>!AIVDM,1,1,,B,33L=LN051HQj3HhRJd7q1W=`0000,0*03 ( MSG: 3, REPEAT: 0, MMSI: 230907000, signalpower: -44.0, ppm: 0, timestamp: 20220729191340)\n</code></pre> This same information but wrapped in JSON to facilitate further processing downstream is generated with the switch <code>-o 3</code> : <pre><code>{\"class\":\"AIS\",\"device\":\"AIS-catcher\",\"channel\":\"B\",\"rxtime\":\"20220729191502\",\"signalpower\":-44.0,\"ppm\":0,\"mmsi\":230907000,\"type\":3,\"nmea\":[\"!AIVDM,1,1,,B,33L=LN051HQj3HhRJd7q1W=`0000,0*03\"]}\n</code></pre> And finally, full decoding of the AIS message is activated via <code>-o 5</code>: <pre><code>{\"class\":\"AIS\",\"device\":\"AIS-catcher\",\"rxtime\":\"20220729191610\",\"scaled\":true,\"channel\":\"B\",\"nmea\":[\"!AIVDM,1,1,,B,33L=LN051HQj3HhRJd7q1W=`0000,0*03\"],\"signalpower\":-44.0,\"ppm\":0.000000,\"type\":3,\"repeat\":0,\"mmsi\":230907000,\"status\":0,\"status_text\":\"Under way using engine\",\"turn\":18,\"speed\":8.800000,\"accuracy\":true,\"lon\":24.915239,\"lat\":60.148106,\"course\":231.000000,\"heading\":230,\"second\":52,\"maneuver\":0,\"raim\":false,\"radio\":0}\n</code></pre></p> <p>Meta data is not calculated by default to keep the program as light as possible when running as a server on low spec devices but can be activated with the <code>-M</code> switch. The calculation of signal power (in dB) and applied frequency correction (in ppm) are activated with  <code>-M D</code>. NMEA messages are timestamped with  <code>-M T</code> and additional country information from the station derived from the MMSI is included in JSON output with <code>-M M</code>. </p> <p>There are many libraries for decoding AIS messages in NMEA format to JSON format. I encourage you to use your favorite library. Some excellent choices include libais, gpsdecode and pyais.</p>"},{"location":"configuration/output/overview/","title":"Output Configuration","text":"<p>AIS-catcher has multiple output options. As for the input, they share a few common settings to manage the flow of messages to output connections and for filtring.</p>"},{"location":"configuration/output/overview/#message-filtering","title":"Message Filtering","text":"<p>AIS-catcher has functionality to filter UDP, HTTP and screen output on message type, e.g. send only messages of type 1, 2, 3, 5, 18, 19, 24 and 27 over UDP: <pre><code>AIS-catcher -u 127.0.0.1 10110 FILTER on ALLOW_TYPE 1,2,3,5,18,19,24,27\n</code></pre> or remove message type 6 and 8: <pre><code>AIS-catcher -u 127.0.0.1 10110 FILTER on BLOCK_TYPE 6,8\n</code></pre> Do not use spaces in the comma-separated message type list as it confuses the command line. Filtering will only take effect with the filter switched to <code>ON</code> (default <code>OFF</code>) and the filter needs to be defined per <code>-u</code> switch (or <code>-H</code> and <code>-o</code>).</p> <p>In my home station, I am using this to control the size of the log file but still capture messages for inspection later. I am running with the command line parameter: <pre><code>AIS-catcher -o 5 FILTER on BLOCK_TYPE 1,2,3,4,5,9,18,19,21,24\n</code></pre> Message type 8 is region-specific. If you encounter any messages in the wild that might be interesting for AIS-catcher to parse, please share in the Issue section and we can see if it is worthwhile to extend the JSON generator. </p> <p>Note: filtering for messages to screen can only be set on the command line and not in the JSON configuration file at this stage. UDP filtering is available in the JSON configuration file.</p>"},{"location":"configuration/output/overview/#filter-settings","title":"Filter settings","text":"Key Type Default Description FILTER boolean false Enable/disable filtering ALLOW_TYPE list all Comma-separated list of message types to allow (1-27) BLOCK_TYPE list none Comma-separated list of message types to block ALLOW_REPEAT list all Allow messages with specific repeat counter values (0-3) BLOCK_REPEAT list none Block messages with specific repeat counter values ALLOW_MMSI list all Only allow messages from specific MMSI numbers BLOCK_MMSI list none Block messages from specific MMSI numbers ALLOW_CHANNEL string all Only allow messages from specific AIS channels ID integer all Only allow messages from specific station IDs GPS boolean true Include GPS messages in output AIS boolean true Include AIS messages in output"},{"location":"configuration/output/overview/#routing-messages","title":"Routing Messages","text":"<p>In principle, messages from all models sourced via all input connections is sourced to all Output Connections. Sometimes it is desirable to manage this flow. This can be done via the Setting <code>GROUPS_IN</code> with as value the list of models that feed this input. </p>"},{"location":"configuration/output/overview/#output-options","title":"Output Options","text":"<p>AIS-catcher offers multiple output options to suit different use cases. Below is an overview of the available output methods:</p>"},{"location":"configuration/output/overview/#screen-output","title":"Screen Output","text":"<ul> <li>Console Output: Display AIS messages directly in your terminal with customizable formats</li> </ul>"},{"location":"configuration/output/overview/#network-output-options","title":"Network Output Options","text":"<ul> <li>TCP Server: Run an AIS server that clients can connect to</li> <li>TCP Client: Connect to remote AIS servers</li> <li>UDP: Send AIS messages via UDP to specified destinations</li> <li>HTTP: Provide AIS data through HTTP endpoints</li> </ul>"},{"location":"configuration/output/overview/#integration-options","title":"Integration Options","text":"<ul> <li>Community Feed: Share your AIS data with the community</li> <li>PostgreSQL: Write AIS messages to Postgres database</li> <li>Web Viewer: Built-in web interface for visualizing vessel traffic</li> <li>MQTT: Publish AIS data to MQTT brokers</li> <li>NMEA2000: Interface with NMEA2000 networks</li> </ul>"},{"location":"configuration/output/web-viewer/","title":"Web Viewer","text":"AIS-catcher -N port          [setting value]         ...      <p>AIS-catcher includes a simple web interface. A live demo is available for East Boston, US. The web interface gratefully uses the following libraries: chart.js, chart.js annotation plugin, leaflet, Material Design Icons, tabulator, marked and flag-icons. </p> <p>Make sure you use the latest version and start the web viewer as follows: <pre><code>AIS-catcher -N 8100\n</code></pre> where <code>8100</code> is the port number. If your machine network name is raspberrypi, e.g.,  then enter <code>raspberrypi:8100</code> in your browser.  On the web page, you will find several sections with information related to the station and received messages.</p> <p>For users wishing to include a station name and a link to an external website in the Statistics section: <pre><code>AIS-catcher -N STATION Southwood STATION_LINK http://example.com\n</code></pre> This could be a useful option if you want to offer the interface externally. To display the reception range and distances from your station, provide the program with the station coordinates and permission to share the location with the web viewer: <pre><code>AIS-catcher -N LAT 50 LON 3.141592 SHARE_LOC on\n</code></pre> The last option <code>share_loc</code> (default is off) will allow the web viewer to access and display the location.</p> <p>The user can make a page in markdown format. The content will be shown in the About tab of the web viewer: <pre><code>AIS-catcher -N 8100 ABOUT about.md\n</code></pre> All these options can be captured in the configuration file (in a section with name <code>server</code>), see below. </p>"},{"location":"configuration/output/web-viewer/#menu-structure","title":"Menu structure","text":"<p>The main menu behind the hamburger icon in the top left corner navigates between different functional areas. Context-sensitive menus, accessible through right-click, long press on iOS, or the vertical dot icon on the map, offer more functionalities. Here you can set options like activating the \"dark mode\" theme, displaying the station range on the map, locking/unlocking the map center, toggling text-only ship labels, decluttering ship labels, and viewing details of the last message received from a vessel, amongst others.</p>"},{"location":"configuration/output/web-viewer/#visualization","title":"Visualization","text":"<p>When AIS-catcher receives data containing a vessel's dimensions but can not determine the direction it is pointing (heading), it will display a circle that accommodates the ship's dimensions regardless of heading. Missing heading information is common for Class B ships. If there's a decent approximation available for the heading, such as course-over-ground above certain speeds, it will be used. Shapes plotted using this approximation will have a dashed border, indicating incomplete information. An example is the USS Constitution docked in Boston.</p> <p> </p> <p>In the map section, clicking on a vessel will open a  ship card with details of the vessel. For smaller screens it can be minimized in the top bar (via the <code>^</code> symbol or by clicking on the header bar). The ship card will open minimized on mobile devices. In its maximized form, users can choose which rows will be visible in the minimized state. Additional options, such as looking up the vessel on aggregator sites, are available by clicking the three-dot icon on the ship card header.</p>"},{"location":"configuration/output/web-viewer/#validation","title":"Validation","text":"<p>The web-interface shows a \"validation\" indication at the left border of the ship card header.</p> <p> </p> <p>AIS-catcher analyzes an enormous stream of bits per day for both AIS channels (2 to the power 33 to be precise). To avoid erroneous messages, the AIS system employs a 16-bit CRC and matching of other bit patterns. Unfortunately, purely statistically this cannot prevent that there will be an occasional technically correct but nonsense message. These are typically easy to recognize (e.g. looking at the signal level, and location on the map) and aggregator sites like MarineTraffic will filter these out. </p> <p>To reliably measure the reception range for the station in the web interface, AIS-catcher has implemented a \"validation function\" that checks the location of the vessel for consistency between messages and flags if there is an inconsistency. Practically speaking, if we receive a position from an MMSI that is relatively close to the last received position, the \"validation\" indicator will be green and the distance to the station will be included to determine the station range. Please note that messages within 50 NMi from the receiving station will always be included for range setting. The validation indicator will be grey if validation for the location cannot be performed and red if it is not successful. </p>"},{"location":"configuration/output/web-viewer/#plots","title":"Plots","text":"<p>The Plot section contains several visualizations to assess the performance of the receiver:</p> <p> </p> <p>Restarting AIS-catcher typically erases history in the graphs. To retain plot \"state\" and backup the information to a file use the following:</p> <p><pre><code>AIS-catcher -N 8100 FILE stat.bin BACKUP 10\n</code></pre> This will back up the plots when the program closes and every 10 minutes in a file <code>stat.bin</code>. The minimum backup interval is 5 minutes.</p>"},{"location":"configuration/output/web-viewer/#custom-plugins-and-styles","title":"Custom plugins and styles...","text":"<p>To give the user the option to tweak the look-and-feel and functionality of the web viewer and/or modify for example the color scheme or regional preferences, the program provides the option to inject custom plugins (JavaScript) and CSS into the website, with a command like: <pre><code>AIS-catcher -N 8100 PLUGIN plugin1.js PLUGIN plugin2.js STYLE mystyle.css\n</code></pre> You can also include all plugin files from a specific directory using the command: <pre><code>AIS-catcher -N 8100 PLUGIN_DIR /usr/share/aiscatcher/plugins\n</code></pre> Files need to have the extension <code>.pjs</code> and <code>.pss</code> for respectively JavaScript and CSS style plugins. The repository includes a few example plugins that demonstrate how to add additional maps or cater to regional preferences. Examples of plugins can be found in another GitHub repository.</p>"},{"location":"configuration/output/web-viewer/#offline-web-viewer","title":"Offline web viewer","text":"<p>There is an option to run the web viewer without relying on online libraries. This facilitates using the web interface whilst traveling without an internet connection. The steps are simple. First, go to your home directory (say <code>/home/jasper</code>) and clone the necessary offline web assets: <pre><code>git clone https://github.com/jvde-github/webassets.git\n</code></pre> This will create a directory <code>webassets</code> that we need to share with AIS-catcher as an alternative location for online web content  with the CDN argument followed by the location of the web assets directory: <pre><code>AIS-catcher -N 8100 CDN /home/jasper/webassets\n</code></pre> Offline maps can also be included in <code>mbtiles</code> format: <pre><code>AIS-catcher  -N 8100 MBTILES filename\n</code></pre> or as an overlay <pre><code>AIS-catcher  -N 8100 MBOVERLAY filename\n</code></pre></p>"},{"location":"configuration/output/web-viewer/#sending-data-to-prometheus-for-use-in-grafana-dashboards","title":"Sending data to Prometheus for use in Grafana dashboards","text":"<p>You can add the option <code>PROME on</code> to the web configuration command to start rendering Prometheus-compatible statistics at <code>/metrics</code>. For example:</p> <pre><code>AIS-catcher -N 8100 PROME on\n</code></pre> <p>For more information on how to configure Prometheus and Grafana to get an initial dashboard, see README-grafana.md.</p>"},{"location":"configuration/output/web-viewer/#summary-settings","title":"Summary Settings","text":"<p>Server Options:</p> Key Type Default Description PORT integer - Single port for web server PORT_MIN integer - Minimum port in binding range PORT_MAX integer - Maximum port in binding range IP_BIND string - Server binding IP address REUSE_PORT boolean false Enable port reuse ZLIB boolean true Enable response compression Location Settings LAT float - Station latitude LON float - Station longitude SHARE_LOC boolean false Share station location USE_GPS boolean false Use GPS data OWN_MMSI integer - Own vessel MMSI Data Management HISTORY integer - History retention (5-43200 sec) CUTOFF integer - Data retention threshold (0-10000) BACKUP integer -1 Backup interval (5-2880 min) FILE string - Statistics file path REALTIME boolean false Enable real-time updates Output Formats KML boolean false Enable KML output GEOJSON boolean false Enable GeoJSON output PROME boolean false Enable Prometheus metrics MESSAGE boolean false Enable message saving UI Customization STATION string - Station display name STATION_LINK string - Station info URL CDN string - Local CDN resources path MBTILES string - Offline map in mbtiles format MBOVERLAY string - Offline overlay in mbtiles format PLUGIN string - JavaScript plugin path STYLE string - CSS style path PLUGIN_DIR string - Plugins directory ABOUT string - About page path"},{"location":"getting-started/ais-basics/","title":"Introduction to Automatic Identification System (AIS)","text":"<p>The Automatic Identification System (AIS) is a maritime communication technology that significantly enhances safety and efficiency in navigation. AIS enables vessels to automatically share real-time information\u2014including identity, position, speed, and heading\u2014with nearby ships and coastal monitoring stations. Operating on Very High Frequency (VHF) radio waves, AIS ensures reliable transmission over considerable distances, which is crucial for maritime operations.</p>"},{"location":"getting-started/ais-basics/#key-details","title":"Key Details","text":""},{"location":"getting-started/ais-basics/#frequency-range","title":"Frequency Range","text":"<p>AIS operates within the VHF band around 162 MHz, utilizing four dedicated channels:</p> <ul> <li>161.975 MHz (AIS 1, Channel A)</li> <li>162.025 MHz (AIS 2, Channel B)</li> <li>156.775 MHz (AIS 3, Channel C)</li> <li>156.825 MHz (AIS 4, Channel D)</li> </ul> <p>Channels A and B are used for standard ship-to-ship and ship-to-shore communications, while channels C and D are dedicated to long-range applications using satellite detection.</p>"},{"location":"getting-started/ais-basics/#data-transmission","title":"Data Transmission","text":"<p>AIS messages are transmitted using a standardized digital format defined by international maritime organizations. This standardization enables seamless sharing of crucial navigation data between vessels and shore-based stations, facilitating coordination and safety at sea.</p>"},{"location":"getting-started/ais-basics/#applications","title":"Applications","text":"<ul> <li>Collision Avoidance: Enhances situational awareness to prevent collisions in crowded waterways.</li> <li>Traffic Monitoring: Allows port authorities and maritime traffic services to monitor and manage vessel movements.</li> <li>Navigation Aid: Improves navigation in poor visibility conditions, such as fog or heavy rain.</li> <li>Search and Rescue: Assists in locating vessels during emergencies.</li> <li>Fleet Management: Enables tracking and management of commercial shipping fleets.</li> </ul>"},{"location":"getting-started/ais-basics/#receiving-ais-with-software-defined-radio-sdr","title":"Receiving AIS with Software Defined Radio (SDR)","text":"<p>Advancements in Software Defined Radio (SDR) technology have made it possible to receive and process AIS messages without expensive, dedicated equipment. By tuning an SDR device to the AIS frequencies (around 162 MHz), users can monitor and decode AIS signals using accessible hardware and software solutions.</p>"},{"location":"getting-started/ais-basics/#why-use-sdr-for-ais","title":"Why Use SDR for AIS?","text":"<ul> <li>Cost-Effective: SDR devices are more affordable than specialized AIS receivers, making AIS monitoring accessible to hobbyists and professionals alike.</li> <li>Versatile: SDR hardware can receive a wide range of frequencies, allowing users to monitor various VHF/UHF signals in addition to AIS.</li> <li>Customizable: Open-source software like AIS-catcher enables users to decode and analyze AIS signals, view detailed vessel information, and integrate data with other systems.</li> </ul>"},{"location":"getting-started/ais-basics/#important-safety-notice","title":"Important Safety Notice","text":"<p>SDR-based AIS receivers should not be used for:</p> <ul> <li>Navigation purposes</li> <li>Safety of life applications</li> <li>Commercial vessel operations</li> <li>Any situation requiring certified equipment</li> </ul> <p>These systems are intended for hobby and research purposes only. For maritime safety and navigation, always use type-approved AIS transponders and receivers that meet international maritime standards.</p>"},{"location":"getting-started/ais-basics/#learn-more","title":"Learn More","text":"<p>To explore AIS in greater detail, visit the Wikipedia page on Automatic Identification System.</p>"},{"location":"getting-started/features/","title":"Features","text":"<p>AIS-catcher is a tool for decoding and analyzing AIS signals from ships, enabling vessel movement monitoring, situational awareness, and maritime community contributions.</p>"},{"location":"getting-started/features/#core-capabilities","title":"Core Capabilities","text":""},{"location":"getting-started/features/#multi-platform-support","title":"Multi-Platform Support","text":"<ul> <li>Runs on Windows, Ubuntu/Debian, Raspberry Pi, OSX, and Docker</li> <li>Easy installation via scripts and pre-built Docker images</li> <li>Web GUI available for Raspberry Pi and Docker deployments</li> </ul>"},{"location":"getting-started/features/#high-performance-architecture","title":"High-Performance Architecture","text":"<ul> <li>Sensitive decoder optimized for maximum SDR performance</li> <li>Lightweight C++ implementation for efficient resource usage</li> <li>Neon/SSE acceleration support</li> <li>Multi-channel decoding capability across multiple SDRs</li> </ul>"},{"location":"getting-started/features/#flexible-io-system","title":"Flexible I/O System","text":"<p>Input Sources</p> <ul> <li>Wide SDR hardware support (RTL-SDR, AirSpy, AirSpy HF+, HackRF, SDRPlay)</li> <li>NMEA data over network connections</li> <li>Serial devices</li> <li>NMEA2000 via SocketCAN</li> </ul> <p>Output Options</p> <ul> <li>NMEA format and JSON output</li> <li>UDP/TCP/WebSocket streaming</li> <li>HTTP push capabilities</li> <li>MQTT broker publishing</li> <li>Database storage (PostgreSQL)</li> <li>OpenCPN integration</li> <li>File-based logging</li> </ul>"},{"location":"getting-started/features/#web-interface","title":"Web Interface","text":""},{"location":"getting-started/features/#built-in-web-viewer","title":"Built-in Web Viewer","text":"<ul> <li>Interactive map with vessel plots</li> <li>Station dashboard</li> <li>Message visualization graphs</li> <li>Dark mode support</li> <li>Mobile-friendly design</li> <li>Extensible plugin system</li> </ul>"},{"location":"getting-started/features/#web-gui-management-raspberry-pi-docker","title":"Web GUI Management (Raspberry Pi &amp; Docker)","text":"<ul> <li>Service control (start/stop)</li> <li>Input/output configuration</li> <li>System settings management</li> </ul>"},{"location":"getting-started/features/#database-integration","title":"Database Integration","text":""},{"location":"getting-started/features/#postgresql-features","title":"PostgreSQL Features","text":"<ul> <li>Configurable table structure</li> <li>Vessel tracking tables</li> <li>Message logging</li> <li>Station metadata storage</li> </ul>"},{"location":"getting-started/features/#advanced-features","title":"Advanced Features","text":""},{"location":"getting-started/features/#multi-channel-support","title":"Multi-Channel Support","text":"<ul> <li>Dual RTL-SDR capability</li> <li>Multiple frequency band monitoring</li> <li>Separate AIS channel processing</li> <li>Performance benchmarking</li> </ul>"},{"location":"getting-started/features/#modular-design","title":"Modular Design","text":"<ul> <li>Customizable processing pipeline</li> <li>Experimentation-friendly architecture</li> <li>Maintainable codebase</li> <li>Plugin support for extended functionality</li> </ul>"},{"location":"getting-started/features/#community-integration","title":"Community Integration","text":"<ul> <li>Data sharing via aiscatcher.org</li> <li>Local performance tuning</li> <li>Real-time position reports from nearby stations</li> </ul>"},{"location":"getting-started/overview/","title":"Getting Started","text":""},{"location":"getting-started/overview/#what-youll-need","title":"What You\u2019ll Need","text":"<p>Before getting started, ensure you have the following:</p> <ol> <li> <p>Compatible Hardware Setup:     A USB-based RTL-SDR device or another supported SDR receiver.     An AIS antenna for optimal data reception.</p> </li> <li> <p>Computer or Server:     Windows, Raspberry Pi, Linux, or OSX with basic command-line proficiency.</p> </li> <li> <p>Internet Connection:       Essential for installation and accessing online resources.</p> </li> <li> <p>Line of Sight to Ships:    Position yourself near water with active vessel traffic to receive AIS signals effectively.</p> </li> </ol> <p>Start Installation</p>"},{"location":"getting-started/overview/#high-level-steps","title":"High Level Steps","text":"<p>Follow these high-level steps to get AIS-catcher up and running:</p> <p>Decide on your desired setup Decide on using the Web GUI or not, for Docker or Raspberry Pi</p> <p>Install AIS-catcher Follow the detailed instructions in the Installation Guide tailored to your platform and needs</p> <p>Customize Input and Output Tailor your setup with our advanced Options</p> <p>Set up your Community Feed Register your station at aiscatcher.org and start feeding</p> <p>Leverage Advanced Features Start experimenting with advanced options such as MQTT, Grafana, and NMEA2000 support</p>"},{"location":"getting-started/overview/#the-web-gui","title":"The Web GUI","text":"<p>The Web GUI management interface is available exclusively for Raspberry Pi and Docker deployments as a separate package to ease configuration and management of the receiver. Key features include:</p> <ul> <li>Background service management</li> <li>Configuration interface</li> <li>System monitoring</li> </ul> <p>Note: Manual configuration edits may limit certain GUI functionality. The interface provides a lightweight solution ideal for Linux newcomers.</p>"},{"location":"installation/android/","title":"Android Installation","text":"<p>Visit our GitHub page</p>"},{"location":"installation/build-source/","title":"Building from Source","text":""},{"location":"installation/build-source/#important-disclaimer","title":"Important Disclaimer","text":"<p>AIS-Catcher is for hobby and research use only. Not for navigation or safety-critical applications.</p> <ul> <li>Does not broadcast location data</li> <li>Not certified for safety-critical use</li> <li>Use only where legally permitted</li> </ul> <p>Provided as-is without guarantees. Comply with local laws regarding AIS signal reception. Licensed under GPLv3.</p>"},{"location":"installation/build-source/#building","title":"Building","text":"<p>The steps to compile AIS-catcher for RTL-SDR dongles are fairly straightforward on most systems. There are various options including a standard Makefile, a <code>solution</code> file for MSVC (see next section) and you can use <code>cmake</code>, as we will detail now.</p> <p>The first step is to ensure you have the necessary dependencies and build tools installed for your device(s).  For example, the following installs the minimum build tools for Ubuntu and Raspberry Pi: <pre><code>sudo apt-get update\nsudo apt-get upgrade\n\nsudo apt-get install git make gcc g++ cmake pkg-config -y\n</code></pre> For MacOS with <code>brew</code> installed: <pre><code>brew update\nbrew upgrade\n\nbrew install git make gcc cmake pkg-config\n</code></pre></p> <p>AIS-catcher requires libraries for the particular hardware you want to use. The following table summarizes the installation instructions for all supported hardware:</p> System Linux/Raspberry macOS MSVC/vcpkg MSVC/PothosSDR Command sudo apt install ... brew install ... vcpkg install ... Download RTL-SDR librtlsdr-dev librtlsdr rtlsdr rtlsdr:x64-windows included Airspy libairspy-dev airspy - included Airspy HF+ libairspyhf-dev airspyhf - included HackRF libhackrf-dev hackrf - included SDRplay 1A API 3.x - API 3.x API 3.x SoapySDR libsoapysdr-dev X ZeroMQ libzmq3-dev zeromq ZeroMQ ZeroMQ:x64-windows included HTTP secure libssl-dev openssl openssl:x64-windows X ZIP zlib1g-dev zlib zlib:x64-windows X <p>Once the dependencies are in place, the process of installing AIS-catcher  on Linux-based systems becomes: <pre><code>git clone https://github.com/jvde-github/AIS-catcher.git --depth 1\ncd AIS-catcher\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n</code></pre> For the SDRPlay the software needs to be downloaded and installed from the website of the manufacturer. Once installed, the AIS-catcher build process automatically includes it in the build if available. </p>"},{"location":"installation/build-source/#microsoft-visual-studio-2019","title":"Microsoft Visual Studio 2019+","text":"<p>Ensure that you have <code>vcpkg</code> installed and integrated into Visual Studio via <code>vcpkg integrate install</code> (as Administrator). Then install the rtl-sdr drivers as follows: <pre><code>vcpkg install rtlsdr rtlsdr:x64-windows ZeroMQ ZeroMQ:x64-windows soxr soxr:x64-windows\n</code></pre> The included solution file in the mscv directory allows you to build AIS-catcher with RTL-SDR/ZMQ support in the Visual Studio IDE.</p>"},{"location":"installation/docker/","title":"Docker Container","text":""},{"location":"installation/docker/#important-disclaimer","title":"Important Disclaimer","text":"<p>AIS-Catcher is for hobby and research use only. Not for navigation or safety-critical applications.</p> <ul> <li>Does not broadcast location data</li> <li>Not certified for safety-critical use</li> <li>Use only where legally permitted</li> </ul> <p>Provided as-is without guarantees. Comply with local laws regarding AIS signal reception. Licensed under GPLv3.</p> <p>Jump to the desired Installation Option:</p> <p>Basic Web GUI</p>"},{"location":"installation/docker/#basic-docker-container","title":"Basic Docker Container","text":"<p>Pre-built container images containing AIS-catcher are available from the GitHub Container Registry. Available container tags are documented on the package's page, with <code>latest</code> (the latest release) and <code>edge</code> (the bleeding edge of the <code>main</code> branch) being the two main ones.</p> <p>The following <code>docker run</code> command provides an example of the usage of this container image, running the latest release of AIS-catcher interactively:</p> <pre><code>docker run --rm -it --pull always --device /dev/bus/usb ghcr.io/jvde-github/ais-catcher:latest &lt;ais-catcher command line options&gt;\n</code></pre> <p>Alternatively, the following <code>docker-compose.yml</code> configuration provides a good starting point should you wish to use Docker Compose:</p> <p><pre><code>services:\n  ais-catcher:\n    command: &lt;ais-catcher command line options&gt; (e.g. -N 8100)\n    container_name: ais-catcher\n    ports:\n      - 8100:8100 &lt;don't forget to passthrough ports for the webclient&gt;\n    devices:\n      - \"/dev/bus/usb:/dev/bus/usb\"\n    image: ghcr.io/jvde-github/ais-catcher:latest\n    restart: always\n</code></pre> Please note that the SDRplay devices are currently not supported in the Docker images.</p> <p>Start First Run</p>"},{"location":"installation/docker/#more-options","title":"More options","text":"<p>To pull the latest docker image (e.g. to create or refresh to the latest version) without running: <pre><code>docker pull ghcr.io/jvde-github/ais-catcher:edge\n</code></pre> To start AIS-catcher, you can then use: <pre><code>docker run --device /dev/bus/usb --rm -it ghcr.io/jvde-github/ais-catcher:edge\n</code></pre> Notice that if you want to run the webviewer (-N 8100) you need to make that available on the host system with (<code>-p 8100:8100</code>). To send UDP data to OpenCPN running on the host computer, you can try to find the bridge network address (<code>sudo docker network inspect bridge</code> as per tutorials and use this as UDP destination address (e.g. <code>-u 172.17.0.1  5077</code>). Alternatively you could use <code>--network host</code> although less desirable. Please consult the Docker documentation.</p> <p>An excellent Docker set-up is the docker-shipfeeder that provides a user friendly way to  feed various aggregators with excellent documentation and user support by the sdrenthusiasts community.</p>"},{"location":"installation/docker/#docker-with-web-gui","title":"Docker with Web GUI","text":"<p>If you are already up and running with Docker installed, you can simply use: <pre><code>docker run --privileged -v /dev/bus/usb:/dev/bus/usb -p 8110:8110 -p 8100:8100 --pull=always ghcr.io/jvde-github/ais-catcher-control:edge\n</code></pre></p> <p>Start First Run</p>"},{"location":"installation/overview/","title":"Overview","text":""},{"location":"installation/overview/#installation","title":"Installation","text":"<p>Choose the installation method that best matches your system:</p>"},{"location":"installation/overview/#desktop-operating-systems","title":"Desktop Operating Systems","text":"<p>\ud83d\udcf1 Windows Installation Complete guide for installing AIS-Catcher on Windows systems.</p> <p>\ud83d\udc27 Ubuntu/Debian Installation Installation steps for Ubuntu, Debian and other Linux distributions.</p>"},{"location":"installation/overview/#embedded-mobile","title":"Embedded &amp; Mobile","text":"<p>\ud83c\udf53 Raspberry Pi Installation Dedicated guide for setting up AIS-Catcher on Raspberry Pi devices.</p> <p>\ud83d\udcf1 Android Installation Instructions for running AIS-Catcher on Android devices.</p>"},{"location":"installation/overview/#alternative-installation-methods","title":"Alternative Installation Methods","text":"<p>\ud83d\udc33 Docker Installation Deploy AIS-Catcher using Docker containers.</p> <p>\u2699\ufe0f Build from Source Instructions for building AIS-Catcher from source code.</p>"},{"location":"installation/raspberry-pi/","title":"Raspberry Pi Installation","text":""},{"location":"installation/raspberry-pi/#important-disclaimer","title":"Important Disclaimer","text":"<p>AIS-Catcher is for hobby and research use only. Not for navigation or safety-critical applications.</p> <ul> <li>Does not broadcast location data</li> <li>Not certified for safety-critical use</li> <li>Use only where legally permitted</li> </ul> <p>Provided as-is without guarantees. Comply with local laws regarding AIS signal reception. Licensed under GPLv3.</p>"},{"location":"installation/raspberry-pi/#installation","title":"Installation","text":"<p>This guide provides instructions for installing AIS-catcher on Debian-based systems (like Raspberry Pi) and setting it up to run as a background service. The background service provides the option for AIS-catcher to automatically start when the machine is booted.</p> <p>Basic Installation via the below script is  required as a first step if you want to install the Web GUI package.</p>"},{"location":"installation/raspberry-pi/#basic-installation","title":"Basic Installation","text":"<p>To install AIS-catcher via a script, open a terminal or log in via SSH, then run the following command: <pre><code>sudo bash -c \"$(wget -qO- https://raw.githubusercontent.com/jvde-github/AIS-catcher/main/scripts/aiscatcher-install)\"\n</code></pre> The script will install all dependencies and build AIS-catcher. The required SDR libraries are installed from the official packages if they cannot be found on the system. For the RTL-SDR we build from source from the official package to guarantee support for the RTL-SDR V4 but, again, only if the package is not already installed on the system. On a fresh Raspberry Pi4 this will take less than 20 minutes. </p> <p>To update AIS-catcher to the latest version, simply run the above command again. </p> <p>Start First Run Install Web GUI</p>"},{"location":"installation/raspberry-pi/#using-pre-installed-debian-packages","title":"Using pre-installed Debian packages","text":"<p>If you want to use pre-installed Debian packages in the installation use: <pre><code>sudo bash -c \"$(wget -qO- https://raw.githubusercontent.com/jvde-github/AIS-catcher/main/scripts/aiscatcher-install)\" _ -p\n</code></pre> The advantage that this avoids an compilation step which can save quite a bit of time on older Raspberry devices but it does not optimize the binaries for the specific hardware and is not compatible with the RTL-SDR V4.</p>"},{"location":"installation/raspberry-pi/#installation-with-web-gui","title":"Installation with Web GUI","text":"<p>AIS-catcher provides a web-based graphical user interface for easy configuration. Ensure you have installed the basic package first. It needs to be installed as a separate service by entering in the terminal: <pre><code>sudo bash -c \"$(curl -fsSL https://raw.githubusercontent.com/jvde-github/AIS-catcher-control/main/install_ais_catcher_control.sh)\"\n</code></pre> To access it, open your web browser and navigate to your Raspberry Pi's IP address on port 8110 (for example, <code>http://zerowh:8110</code>). </p> <p>Start First Run</p> <p></p>"},{"location":"installation/raspberry-pi/#configuration-files","title":"Configuration Files","text":"<p>For running AIS-catcher as a background service we can use two configuration files:</p> <ul> <li>/etc/AIS-catcher/config.json (JSON configuration)</li> <li>/etc/AIS-catcher/config.cmd (command line parameters)</li> </ul> <p>The simplest approach is to edit the configuration file /etc/AIS-catcher/config.cmd to capture your settings which are detailed below. Lines starting with # are considered comments and ignored. The default file contains comments for popular options, which can be modified using a text editor, for example: <pre><code>sudo nano /etc/AIS-catcher/config.cmd\n</code></pre></p>"},{"location":"installation/raspberry-pi/#running-ais-catcher-as-a-background-service","title":"Running AIS-catcher as a Background Service","text":"<p>To start AIS-catcher as a background service use the following command: <pre><code>sudo systemctl start ais-catcher.service\n</code></pre> To view the status of the service copy the following command: <pre><code>sudo systemctl status ais-catcher.service\n</code></pre> To ensure AIS-catcher starts automatically at boot time, enable the service with: <pre><code>sudo systemctl enable ais-catcher.service\n</code></pre></p>"},{"location":"installation/raspberry-pi/#feedback","title":"Feedback","text":"<p>This is fairly new script and under development so any feedback is appreciated. </p> <p></p>"},{"location":"installation/ubuntu-debian/","title":"Ubuntu/Debian Installation","text":""},{"location":"installation/ubuntu-debian/#important-disclaimer","title":"Important Disclaimer","text":"<p>AIS-Catcher is for hobby and research use only. Not for navigation or safety-critical applications.</p> <ul> <li>Does not broadcast location data</li> <li>Not certified for safety-critical use</li> <li>Use only where legally permitted</li> </ul> <p>Provided as-is without guarantees. Comply with local laws regarding AIS signal reception. Licensed under GPLv3.</p>"},{"location":"installation/ubuntu-debian/#installation","title":"Installation","text":"<p>This guide provides instructions for installing AIS-catcher on Debian-based systems (like Raspberry Pi) and setting it up to run as a background service. The background service provides the option for AIS-catcher to automatically start when the machine is booted.</p> <p>Basic Installation via the below script is  required as a first step if you want to install the Web GUI package.</p>"},{"location":"installation/ubuntu-debian/#basic-installation","title":"Basic Installation","text":"<p>To install AIS-catcher via a script, open a terminal or log in via SSH, then run the following command: <pre><code>sudo bash -c \"$(wget -qO- https://raw.githubusercontent.com/jvde-github/AIS-catcher/main/scripts/aiscatcher-install)\"\n</code></pre> The script will install all dependencies and build AIS-catcher. The required SDR libraries are installed from the official packages if they cannot be found on the system. For the RTL-SDR we build from source from the official package to guarantee support for the RTL-SDR V4 but, again, only if the package is not already installed on the system. On a fresh Raspberry Pi4 this will take less than 20 minutes. </p> <p>To update AIS-catcher to the latest version, simply run the above command again. To additionally install the Web GUI, see below.</p> <p>Start First Run Install Web GUI</p>"},{"location":"installation/ubuntu-debian/#using-pre-installed-debian-packages","title":"Using pre-installed Debian packages","text":"<p>If you want to use pre-installed Debian packages in the installation use: <pre><code>sudo bash -c \"$(wget -qO- https://raw.githubusercontent.com/jvde-github/AIS-catcher/main/scripts/aiscatcher-install)\" _ -p\n</code></pre> The advantage that this avoids an compilation step which can save quite a bit of time on older Raspberry devices but it does not optimize the binaries for the specific hardware and is not compatible with the RTL-SDR V4.</p>"},{"location":"installation/ubuntu-debian/#installation-with-web-gui","title":"Installation with Web GUI","text":"<p>AIS-catcher provides a web-based graphical user interface for easy configuration. Ensure you have installed the basic package first. It needs to be installed as a separate service by entering in the terminal: <pre><code>sudo bash -c \"$(curl -fsSL https://raw.githubusercontent.com/jvde-github/AIS-catcher-control/main/install_ais_catcher_control.sh)\"\n</code></pre> To access it, open your web browser and navigate to your Raspberry Pi's IP address on port 8110 (for example, <code>http://zerowh:8110</code>). </p> <p>Start First Run</p> <p></p>"},{"location":"installation/ubuntu-debian/#configuration-files","title":"Configuration Files","text":"<p>For running AIS-catcher as a background service we can use two configuration files:</p> <ul> <li>/etc/AIS-catcher/config.json (JSON configuration)</li> <li>/etc/AIS-catcher/config.cmd (command line parameters)</li> </ul> <p>The simplest approach is to edit the configuration file /etc/AIS-catcher/config.cmd to capture your settings which are detailed below. Lines starting with # are considered comments and ignored. The default file contains comments for popular options, which can be modified using a text editor, for example: <pre><code>sudo nano /etc/AIS-catcher/config.cmd\n</code></pre></p>"},{"location":"installation/ubuntu-debian/#running-ais-catcher-as-a-background-service","title":"Running AIS-catcher as a Background Service","text":"<p>To start AIS-catcher as a background service use the following command: <pre><code>sudo systemctl start ais-catcher.service\n</code></pre> To view the status of the service copy the following command: <pre><code>sudo systemctl status ais-catcher.service\n</code></pre> To ensure AIS-catcher starts automatically at boot time, enable the service with: <pre><code>sudo systemctl enable ais-catcher.service\n</code></pre></p>"},{"location":"installation/ubuntu-debian/#feedback","title":"Feedback","text":"<p>This is fairly new script and under development so any feedback is appreciated. </p> <p></p>"},{"location":"installation/windows/","title":"Windows Binaries","text":""},{"location":"installation/windows/#important-disclaimer","title":"Important Disclaimer","text":"<p>AIS-Catcher is for hobby and research use only. Not for navigation or safety-critical applications.</p> <ul> <li>Does not broadcast location data</li> <li>Not certified for safety-critical use</li> <li>Use only where legally permitted</li> </ul> <p>Provided as-is without guarantees. Comply with local laws regarding AIS signal reception. Licensed under GPLv3.</p>"},{"location":"installation/windows/#installation","title":"Installation","text":"<p>Links to pre-built Windows binaries are available below, with and without SDRPlay support. To run AIS-catcher:</p> <ol> <li>Unpack the ZIP file to a directory</li> <li>Launch via command line or <code>start.bat</code> (editable with Notepad)</li> </ol> <p>Prerequisites:</p> <ul> <li>RTL-SDR drivers (install via Zadig)</li> <li>Visual Studio runtime libraries</li> </ul>"},{"location":"installation/windows/#recent-releases","title":"Recent Releases","text":"<p>Note: Built with latest Windows MSVC compiler. Update runtime libraries before running. Some issues have been reported with outdated runtime libraries and Windows 10</p> <p>Start First Run</p>"},{"location":"installation/windows/#recent-releases_1","title":"Recent Releases","text":"<p>The AIS-catcher executables are built with the latest Windows MSVC compiler. Please update your libraries before starting the executables below. Issues have been reported on Windows 10.</p> Version Win32 x64 Win32 + SDRPlay x64 + SDRPlay Edge ZIP ZIP ZIP ZIP v0.61 ZIP ZIP ZIP ZIP v0.60 ZIP ZIP ZIP ZIP <p>If you are looking for a Windows version for the latest development version, it is automatically produced by the standard workflow and referenced in the table above as Edge.</p>"},{"location":"references/JSON-decoding/","title":"Complete AIS Message JSON Documentation","text":""},{"location":"references/JSON-decoding/#json-format","title":"JSON Format","text":"<p>Below documents the JSON format used for decoding AIS messages. Depending on the settings for JSON decoding fields may or may not be included in the outcome. With format <code>JSON_NMEA</code> only the common fields will be included in the JSON package. The AIS message details are still included in the NMEA array embedded in the JSON. With format <code>JSON_FULL</code> the program will perform a full decoding of the AIS messages and include in the JSON. The output format is largely compatible with <code>gpsdecode</code>.</p>"},{"location":"references/JSON-decoding/#common-fields","title":"Common Fields","text":"<p>These fields are present in all AIS messages:</p> Field Type Description Example class String Always \"AIS\" \"AIS\" device String Always \"AIS-catcher\" \"AIS-catcher\" type Integer Message type number 1 scaled Boolean Values scaled to real units true channel String AIS channel \"A\" nmea String Original NMEA sentence \"!AIVDM,1,1,,A,13...\" mmsi Integer MMSI number 123456789 <p>Optional configuration-dependent fields:</p> Field Type Description version String Software version driver Integer Driver identifier hardware String Hardware identifier signal_power Float Signal strength in dB ppm Float Frequency error in ppm rxtime String Reception timestamp country String Country name from MMSI country_code String Two-letter country code"},{"location":"references/JSON-decoding/#type-1-2-3-position-report-class-a","title":"Type 1, 2, 3: Position Report Class A","text":"Field Type Range/Units Description status Integer 0-15 Navigation status status_text String See note 1 Navigation status description turn Float \u00b1720\u00b0/min Rate of turn turn_unscaled Integer Raw Unscaled turn value speed Float 0-102.2 knots Speed over ground accuracy Boolean - Position accuracy flag lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude course Float 0-359.9\u00b0 Course over ground heading Integer 0-359\u00b0 True heading second Integer 0-59 Second of timestamp maneuver Integer 0-2 Maneuver indicator raim Boolean - RAIM flag radio Integer - Radio status"},{"location":"references/JSON-decoding/#type-4-base-station-report","title":"Type 4: Base Station Report","text":"Field Type Range Description year Integer YYYY UTC year month Integer 1-12 UTC month day Integer 1-31 UTC day hour Integer 0-23 UTC hour minute Integer 0-59 UTC minute second Integer 0-59 UTC second accuracy Boolean - Position accuracy flag lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude epfd Integer 0-8 EPFD type epfd_text String See note 2 EPFD description raim Boolean - RAIM flag radio Integer - Radio status"},{"location":"references/JSON-decoding/#type-5-static-and-voyage-related-data","title":"Type 5: Static and Voyage Related Data","text":"Field Type Range Description ais_version Integer 0-3 AIS version imo Integer 1-999999999 IMO number callsign String 7 chars Radio callsign shipname String 20 chars Vessel name shiptype Integer 0-99 Ship type code shiptype_text String See note 3 Ship type description to_bow Integer 0-511m Dimension to bow to_stern Integer 0-511m Dimension to stern to_port Integer 0-63m Dimension to port to_starboard Integer 0-63m Dimension to starboard epfd Integer 0-8 EPFD type epfd_text String See note 2 EPFD description eta String ISO8601 Estimated time of arrival draught Float 0-25.5m Draft in meters destination String 20 chars Destination port dte Boolean - Data terminal flag"},{"location":"references/JSON-decoding/#type-6-binary-addressed-message","title":"Type 6: Binary Addressed Message","text":"Field Type Range Description seqno Integer 0-3 Sequence number dest_mmsi Integer 9 digits Destination MMSI retransmit Boolean - Retransmit flag dac Integer - Designated Area Code fid Integer - Function ID data String - Binary data"},{"location":"references/JSON-decoding/#type-7-binary-acknowledge","title":"Type 7: Binary Acknowledge","text":"Field Type Range Description mmsi1 Integer 9 digits MMSI number 1 mmsiseq1 Integer 0-3 Sequence for MMSI 1 mmsi2 Integer 9 digits MMSI number 2 mmsiseq2 Integer 0-3 Sequence for MMSI 2 mmsi3 Integer 9 digits MMSI number 3 mmsiseq3 Integer 0-3 Sequence for MMSI 3 mmsi4 Integer 9 digits MMSI number 4 mmsiseq4 Integer 0-3 Sequence for MMSI 4"},{"location":"references/JSON-decoding/#type-8-binary-broadcast-message","title":"Type 8: Binary Broadcast Message","text":"Field Type Range Description dac Integer - Designated Area Code fid Integer - Function ID data String - Binary data"},{"location":"references/JSON-decoding/#type-9-standard-sar-aircraft-position-report","title":"Type 9: Standard SAR Aircraft Position Report","text":"Field Type Range Description alt Integer 0-4095 Altitude in meters speed Integer 0-1023 Speed over ground accuracy Boolean - Position accuracy lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude course Float 0-359.9\u00b0 Course over ground second Integer 0-59 UTC second regional Integer - Regional reserved dte Boolean - DTE flag assigned Boolean - Assigned mode flag raim Boolean - RAIM flag radio Integer - Radio status"},{"location":"references/JSON-decoding/#type-10-utcdate-inquiry","title":"Type 10: UTC/Date Inquiry","text":"Field Type Range Description dest_mmsi Integer 9 digits Destination MMSI"},{"location":"references/JSON-decoding/#type-11-utcdate-response","title":"Type 11: UTC/Date Response","text":"<p>Same fields as Type 4</p>"},{"location":"references/JSON-decoding/#type-12-addressed-safety-related-message","title":"Type 12: Addressed Safety Related Message","text":"Field Type Range Description seqno Integer 0-3 Sequence number dest_mmsi Integer 9 digits Destination MMSI retransmit Boolean - Retransmit flag text String - Safety related text"},{"location":"references/JSON-decoding/#type-13-safety-related-acknowledge","title":"Type 13: Safety Related Acknowledge","text":"<p>Same fields as Type 7</p>"},{"location":"references/JSON-decoding/#type-14-safety-related-broadcast-message","title":"Type 14: Safety Related Broadcast Message","text":"Field Type Range Description text String - Safety related text"},{"location":"references/JSON-decoding/#type-15-interrogation","title":"Type 15: Interrogation","text":"Field Type Range Description mmsi1 Integer 9 digits Interrogated MMSI 1 type1_1 Integer 1-27 First message type offset1_1 Integer - First slot offset type1_2 Integer 1-27 Second message type offset1_2 Integer - Second slot offset mmsi2 Integer 9 digits Interrogated MMSI 2 type2_1 Integer 1-27 First message type offset2_1 Integer - First slot offset"},{"location":"references/JSON-decoding/#type-16-assignment-mode-command","title":"Type 16: Assignment Mode Command","text":"Field Type Range Description mmsi1 Integer 9 digits First MMSI offset1 Integer - First offset increment1 Integer - First increment mmsi2 Integer 9 digits Second MMSI offset2 Integer - Second offset increment2 Integer - Second increment"},{"location":"references/JSON-decoding/#type-17-dgnss-binary-broadcast-message","title":"Type 17: DGNSS Binary Broadcast Message","text":"Field Type Range Description lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude data String - DGNSS data"},{"location":"references/JSON-decoding/#type-18-standard-class-b-cs-position-report","title":"Type 18: Standard Class B CS Position Report","text":"Field Type Range Description reserved Integer - Reserved speed Float 0-102.2 knots Speed over ground accuracy Boolean - Position accuracy lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude course Float 0-359.9\u00b0 Course over ground heading Integer 0-359\u00b0 True heading second Integer 0-59 UTC second regional Integer - Regional reserved cs Boolean - Carrier sense unit flag display Boolean - Display flag dsc Boolean - DSC flag band Boolean - Band flag msg22 Boolean - Message 22 flag assigned Boolean - Assigned mode flag raim Boolean - RAIM flag radio Integer - Radio status"},{"location":"references/JSON-decoding/#type-19-extended-class-b-cs-position-report","title":"Type 19: Extended Class B CS Position Report","text":"Field Type Range Description reserved Integer - Reserved speed Float 0-102.2 knots Speed over ground accuracy Boolean - Position accuracy lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude course Float 0-359.9\u00b0 Course over ground heading Integer 0-359\u00b0 True heading second Integer 0-59 UTC second regional Integer - Regional reserved shipname String 20 chars Vessel name shiptype Integer 0-99 Ship type code shiptype_text String See note 3 Ship type description to_bow Integer 0-511m Dimension to bow to_stern Integer 0-511m Dimension to stern to_port Integer 0-63m Dimension to port to_starboard Integer 0-63m Dimension to starboard epfd Integer 0-8 EPFD type epfd_text String See note 2 EPFD description raim Boolean - RAIM flag dte Boolean - DTE flag assigned Boolean - Assigned mode flag"},{"location":"references/JSON-decoding/#type-20-data-link-management","title":"Type 20: Data Link Management","text":"Field Type Range Description offset1 Integer - Offset number 1 number1 Integer - Reserved slots 1 timeout1 Integer - Timeout 1 increment1 Integer - Increment 1 offset2 Integer - Offset number 2 number2 Integer - Reserved slots 2 timeout2 Integer - Timeout 2 increment2 Integer - Increment 2 offset3 Integer - Offset number 3 number3 Integer - Reserved slots 3 timeout3 Integer - Timeout 3 increment3 Integer - Increment 3 offset4 Integer - Offset number 4 number4 Integer - Reserved slots 4 timeout4 Integer - Timeout 4 increment4 Integer - Increment 4"},{"location":"references/JSON-decoding/#type-21-aid-to-navigation-report","title":"Type 21: Aid-to-Navigation Report","text":"Field Type Range Description aid_type Integer 0-31 Aid type aid_type_text String See note 4 Aid type description name String 20 chars Name of aid accuracy Boolean - Position accuracy lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude to_bow Integer 0-511m Dimension to bow to_stern Integer 0-511m Dimension to stern to_port Integer 0-63m Dimension to port to_starboard Integer 0-63m Dimension to starboard epfd Integer 0-8 EPFD type epfd_text String See note 2 EPFD description second Integer 0-59 UTC second off_position Boolean - Off position indicator regional Integer - Regional reserved raim Boolean - RAIM flag virtual_aid Boolean - Virtual aid flag assigned Boolean - Assigned mode flag"},{"location":"references/JSON-decoding/#type-22-channel-management","title":"Type 22: Channel Management","text":"Field Type Range Description channel_a Integer - Channel A number channel_b Integer - Channel B number txrx Integer - Tx/Rx mode power Boolean - Power level addressed Boolean - Addressed flag band_a Boolean - Channel A band band_b Boolean - Channel B band zonesize Integer - Zone size If addressed = true: dest1 Integer 9 digits Destination MMSI 1 dest2 Integer 9 digits Destination MMSI 2 If addressed = false: ne_lon Float \u00b1180\u00b0 NE longitude ne_lat Float \u00b190\u00b0 NE latitude sw_lon Float \u00b1180\u00b0 SW longitude sw_lat Float \u00b190\u00b0 SW latitude"},{"location":"references/JSON-decoding/#type-23-group-assignment-command","title":"Type 23: Group Assignment Command","text":"Field Type Range Description ne_lon Float \u00b1180\u00b0 NE longitude ne_lat Float \u00b190\u00b0 NE latitude sw_lon Float \u00b1180\u00b0 SW longitude sw_lat Float \u00b190\u00b0 SW latitude station_type Integer - Station type ship_type Integer - Ship type txrx Integer - Tx/Rx mode interval Integer - Reporting interval quiet Integer - Quiet time"},{"location":"references/JSON-decoding/#type-24-static-data-report","title":"Type 24: Static Data Report","text":"<p>Message Type 24 Part A Fields</p> Field Type Range Description partno Integer 0 Part number, always 0 for Part A shipname String 20 chars Name of the vessel <p>Message Type 24 Part B Fields</p> Field Type Range Description partno Integer 1 Part number, always 1 for Part B callsign String 7 chars Vessel radio callsign shiptype Integer 0-99 Type of ship and cargo shiptype_text String See note 1 Description of ship type vendorid String 3 chars Manufacturer's ID model Integer 0-15 Equipment model code serial Integer 0-999999 Unit serial number to_bow Integer 0-511 Distance from GPS to bow in meters to_stern Integer 0-511 Distance from GPS to stern in meters to_port Integer 0-63 Distance from GPS to port in meters to_starboard Integer 0-63 Distance from GPS to starboard in meters mothership_mmsi Integer 9 digits MMSI of mothership for auxiliary craft"},{"location":"references/JSON-decoding/#message-type-25-fields","title":"Message Type 25 Fields","text":"Field Type Range Description addressed Boolean true/false Message has specific destination structured Boolean true/false Message contains structured data dest_mmsi Integer 9 digits Destination MMSI if addressed data String - Binary payload data"},{"location":"references/JSON-decoding/#message-type-26-fields","title":"Message Type 26 Fields","text":"Field Type Range Description addressed Boolean true/false Message has specific destination structured Boolean true/false Message contains structured data dest_mmsi Integer 9 digits Destination MMSI if addressed radio Integer 0-3 Radio status data String - Binary payload data"},{"location":"references/JSON-decoding/#message-type-27-fields","title":"Message Type 27 Fields","text":"Field Type Range Description accuracy Boolean true/false Position accuracy: true if &lt; 10m raim Boolean true/false RAIM flag: Receiver Autonomous Integrity Monitoring status Integer 0-15 Navigation status status_text String See note 1 Navigation status description lon Float \u00b1180\u00b0 Longitude in decimal degrees lat Float \u00b190\u00b0 Latitude in decimal degrees speed Integer 0-62 Speed over ground in knots course Integer 0-359 Course over ground in degrees gnss Boolean true/false GNSS position status <p>Notes</p> <p>Navigation Status Values:</p> Value Description 0 Under way using engine 1 At anchor 2 Not under command 3 Restricted manoeuverability 4 Constrained by draught 5 Moored 6 Aground 7 Engaged in fishing 8 Under way sailing 9 Reserved for HSC 10 Reserved for WIG 11-13 Reserved 14 AIS-SART is active 15 Not defined"},{"location":"references/license/","title":"License","text":"<pre><code>                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n&lt;https://www.gnu.org/licenses/why-not-lgpl.html&gt;.\n</code></pre>"},{"location":"references/overview/","title":"References","text":"<p>Reference Material for AIS-catcher:</p> <ul> <li>JSON AIS format</li> <li>License</li> </ul>"},{"location":"usage/cli/","title":"Command Line Usage","text":""},{"location":"usage/cli/#overview","title":"Overview","text":"<p>This guide provides step-by-step instructions for using AIS-Catcher, from verifying installation to a first run with some basic output.</p>"},{"location":"usage/cli/#basic-usage","title":"Basic usage","text":"<p>Check if AIS-Catcher is correctly installed with built-in support for your hardware: <pre><code>AIS-catcher -L\n</code></pre> List the available connected hardware: <pre><code>AIS-catcher -l\n</code></pre></p>"},{"location":"usage/cli/#the-first-run","title":"The First Run","text":"<p>Start AIS decoding with occasional statistics (every 10 seconds): <pre><code>AIS-catcher -v 10\n</code></pre> If you have multiple devices connected, specify the device using: <pre><code>AIS-catcher -d:0\n</code></pre> Alternatively, use the serial number of the device: <pre><code>AIS-catcher &lt;serial number&gt;\n</code></pre></p> <p>Successful setup will display AIS messages in NMEA format on the screen.</p>"},{"location":"usage/cli/#output-to-screen","title":"Output to screen","text":"<p>Control the format of the AIS message output using the <code>-o</code> option:</p> <ul> <li>No output: <code>-o 0</code> or <code>-q</code></li> <li>Plain NMEA: <code>-n</code> or <code>-o 1</code></li> <li>NMEA with metadata (default): <code>-o 2</code></li> <li>Full JSON decoding: <code>-o 5</code></li> </ul> <p>For example show full content of the AIS messages in JSON format: <pre><code>AIS-catcher -o 5\n</code></pre> The full JSON format for decoded AIS messages is documented here. </p> <p>To suppress all NMEA messages on the screen: <pre><code>AIS-catcher -q\n</code></pre></p>"},{"location":"usage/cli/#activating-the-web-viewer","title":"Activating the Web Viewer","text":"<p>Create a web viewer accessible from your local network to visualize AIS data:</p> <pre><code>AIS-catcher -N 8100\n</code></pre> <p>The web viewer will be available at <code>http://localhost:8100</code>. It can also be accessed from any device on the same network using the machine's IP address annd defined port number.</p> <p>Customization options for the web viewer are available in the configuration settings.</p>"},{"location":"usage/cli/#sharing-your-data","title":"Sharing your data","text":""},{"location":"usage/cli/#community-feed","title":"Community Feed","text":"<p>The next step is to share the data with other programs or services.  Share your feed with the AIS-Catcher community and view others\u2019 data:  <pre><code>AIS-catcher -X &lt;your sharing key&gt;\n</code></pre> Omitting the sharing key will share data anonymously and a  key can be created at aiscatcher.org. </p>"},{"location":"usage/cli/#sharing-over-udp","title":"Sharing over UDP","text":"<p>Additionally, for sending the messages via UDP to ports 10110 and 10111,  use the following command: <pre><code>AIS-catcher  -u 127.0.0.1 10110 -u 127.0.0.1 10111\n</code></pre></p> <p>If successful, NMEA messages will start to come in, appear on the screen and send as raw NMEA  to <code>127.0.0.1</code> port <code>10110</code> and port <code>10111</code>. This is an ideal connection method for visualization in software like OpenCPN or for AIS aggregator websites such as MarineTraffic or VesselFinder.</p>"},{"location":"usage/cli/#device-specific-settings","title":"Device Specific Settings","text":"<p>For RTL-SDR devices performance can be sensitive to the device settings. In general, a good starting point is the following: <pre><code>AIS-catcher -gr RTLAGC on TUNER auto -a 192K\n</code></pre> It has been reported by several users that adding a bandwidth setting of <code>-a 192K</code> can be beneficial so it is worthwhile to try with and without this filter. Finding the best settings for your hardware requires some systematic experimentation whereby one parameter is changed at a time, e.g. switch RTLAGC <code>on</code> or <code>off</code>, set the TUNER to <code>auto</code> or try fixed tuner gains between 0 and 50. </p> <p>The hardware settings available depend on the specific SDR and more details can be found in our Configuration Section.</p>"},{"location":"usage/cli/#performance-considerations","title":"Performance Considerations","text":"<p>AIS-catcher also supports the 18 Euro RPI Zero W. However, the hardware might not keep up with the high data flow. This can sometimes be resolved by activating fast downsampling via: <pre><code>AIS-catcher -F\n</code></pre> Fast downsampling uses approximations and comes at a very small performance degradation, so is not set by default. If your device still struggles, you can try running at a sample rate of 288K (<code>-s 288K</code>): <pre><code>AIS-catcher -s 288K\n</code></pre></p> <p>Reception will be impacted though. Unfortunately, latest feedback seems to be that this is best way to run on the Zero W as this Zero is struggling with the high data throughput and lowering the sample rate is the only option. Another drawback of these lower cost boards is that they can create interference that impacts the radio reception.</p>"},{"location":"usage/cli/#where-to-go-from-here","title":"Where to go from here?","text":"<p>For more details on all available settings, visit our detailed coniguration pages.</p>"},{"location":"usage/cli/#detailed-settings","title":"Detailed settings","text":"<pre><code>AIS-catcher (build Nov 19 2024) v0.60-312-g4f7b402d\n(C) Copyright 2021-2024 jvde-github and other contributors\nThis is free software; see the source for copying conditions.There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nuse: AIS-catcher [options]\n\n    [-a xxx - set tuner bandwidth in Hz (default: off)]\n    [-b benchmark demodulation models for time - for development purposes (default: off)]\n    [-c [AB/CD] - [optional: AB] select AIS channels and optionally the NMEA channel designations]\n    [-C [filename] - read configuration settings from file]\n    [-D [connection string] - write messages to PostgreSQL database]\n    [-e [baudrate] [serial port] - read NMEA from serial port at specified baudrate]\n    [-f [filename] write NMEA lines to file]\n    [-F run model optimized for speed at the cost of accuracy for slow hardware (default: off)]\n    [-h display this message and terminate (default: false)]\n    [-H [optional: url] - send messages via HTTP, for options see documentation]\n    [-i [interface] - read NMEA2000 data from socketCAN interface - Linux only]\n    [-I [interface] - push messages as NMEA2000 data to a socketCAN interface - Linux only]\n    [-m xx - run specific decoding model (default: 2), see README for more details]\n    [-M xxx - set additional meta data to generate: T = NMEA timestamp, D = decoder related (signal power, ppm) (default: none)]\n    [-n show NMEA messages on screen without detail (-o 1)]\n    [-N [optional: port][optional settings] - start http server at port, see README for details]\n    [-o set output mode (0 = quiet, 1 = NMEA only, 2 = NMEA+, 3 = NMEA+ in JSON, 4 JSON Sparse, 5 JSON Full (default: 2)]\n    [-O MMSI - sets the own mmsi of the receiver]\n    [-p xxx - set frequency correction for device in PPM (default: zero)]\n    [-P xxx.xx.xx.xx yyy - TCP destination address and port (default: off)]\n    [-q suppress NMEA messages to screen (-o 0)]\n    [-s xxx - sample rate in Hz (default: based on SDR device)]\n    [-S xxx - TCP server for NMEA lines at port xxx]\n    [-T xx - auto terminate run with SDR after xxx seconds (default: off)]\n    [-u xxx.xx.xx.xx yyy - UDP destination address and port (default: off)]\n    [-v [option: xx] - enable verbose mode, optional to provide update frequency of xx seconds (default: false)]\n    [-X connect to AIS community feed at aiscatcher.org (default: off)]\n    [-Q publish data to MQTT server]\n\n    Device selection:\n\n    [-d:x - select device based on index (default: 0)]\n    [-d xxxx - select device based on serial number]\n    [-e baudrate port - open device at serial port with given baudrate]\n    [-l list available devices and terminate (default: off)]\n    [-L list supported SDR hardware and terminate (default: off)]\n    [-r [optional: yy] filename - read IQ data from file or stdin (.), short for -r -ga FORMAT yy FILE filename\n    [-t [[protocol]] [host [port]] - read IQ data from remote RTL-TCP instance]\n    [-w filename - read IQ data from WAV file, short for -w -gw FILE filename]\n    [-x [server][port] - UDP input of NMEA messages at port on server\n    [-y [host [port]] - read IQ data from remote SpyServer]\n    [-z [optional [format]] [optional endpoint] - read IQ data from [endpoint] in [format] via ZMQ (default: format is CU8)]\n\n    Device specific settings:\n\n    [-ga RAW file: FILE [filename] FORMAT [CF32/CS16/CU8/CS8] ]\n    [-ge Serial Port: PRINT [on/off]\n    [-gf HACKRF: LNA [0-40] VGA [0-62] PREAMP [on/off] ]\n    [-gh Airspy HF+: TRESHOLD [low/high] PREAMP [on/off] ]\n    [-gm Airspy: SENSITIVITY [0-21] LINEARITY [0-21] VGA [0-14] LNA [auto/0-14] MIXER [auto/0-14] BIASTEE [on/off] ]\n    [-gr RTLSDRs: TUNER [auto/0.0-50.0] RTLAGC [on/off] BIASTEE [on/off] ]\n    [-gs SDRPLAY: GRDB [0-59] LNASTATE [0-9] AGC [on/off] ]\n    [-gt RTLTCP: HOST [address] PORT [port] TUNER [auto/0.0-50.0] RTLAGC [on/off] FREQOFFSET [-150-150] PROTOCOL [none/rtltcp] TIMEOUT [1-60] ]\n    [-gu SOAPYSDR: DEVICE [string] GAIN [string] AGC [on/off] STREAM [string] SETTING [string] CH [0+] PROBE [on/off] ANTENNA [string] ]\n    [-gw WAV file: FILE [filename] ]\n    [-gy SPYSERVER: HOST [address] PORT [port] GAIN [0-50] ]\n    [-gz ZMQ: ENDPOINT [endpoint] FORMAT [CF32/CS16/CU8/CS8] ]\n\n    Model specific settings:\n\n    [-go Model: AFC_WIDE [on/off] FP_DS [on/off] PS_EMA [on/off] SOXR [on/off] SRC [on/off] DROOP [on/off] ]\n</code></pre>"},{"location":"usage/gui/","title":"Web GUI for Remote Configuration","text":"<p>This guide is for users who have installed AIS-catcher-control (available for Docker and Raspberry Pi installations), which provides the Web GUI for remote configuration and management.</p>"},{"location":"usage/gui/#accessing-the-web-gui","title":"Accessing the Web GUI","text":"<p>Open your web browser and navigate to your Raspberry Pi's IP address on port 8110. For example: <pre><code>http://zerowh:8110\n</code></pre></p> <p></p> <p>When you first access the interface, log in using the default credentials:</p> <ul> <li>Username: admin</li> <li>Password: admin</li> </ul> <p>You'll be prompted to change this password immediately for security reasons.</p> <p></p>"},{"location":"usage/gui/#input-device-selection","title":"Input Device Selection","text":"<p>Navigate to the Input section to select your input device. You can choose from connected devices or manually specify a device type and serial number. If you have only a single SDR device connected, you can leave the device selection as None, and AIS-catcher will automatically detect and use the available device. Click the search icon to let AIS-catcher detect available SDR hardware.</p> <p></p> <p>Specific device settings for your SDR or other input device can be set on this page as well. </p> <p>Note: After modifying any settings, remember to save the changes and restart AIS-catcher in the Control section for them to take effect.</p>"},{"location":"usage/gui/#output-settings","title":"Output Settings","text":"<p>AIS-catcher allows you to share your data with the aiscatcher.org community. To enable this feature, go to Output &gt; Community. By default, sharing is anonymous and enabled, but you can generate and enter a sharing key to associate the data with your station and view statistics. Click Create to set up a station on aiscatcher.org and receive your sharing key. Here you can also opt not to share your feed with the community.</p> <p></p>"},{"location":"usage/gui/#local-webviewer","title":"Local Webviewer","text":"<p>Under Output &gt; Web Viewer, you can configure the local web viewer. Activate the viewer and enter your station details, including a name and your geographical coordinates.</p> <p>The local web viewer is accessible from your Raspberry Pi (e.g., on port 8100, accessed via http://zerowh:8100) and is not accessible outside your local network by default. Some users choose to share their web viewer externally; see examples here.</p> <p>Note: For a public page showcasing your station's performance, the easiest method is to feed data to aiscatcher.org using a sharing key.</p>"},{"location":"usage/gui/#service-control","title":"Service Control","text":"<p>Navigate to Control to manage the AIS-catcher service:</p> <ul> <li>Start/Stop the service.</li> <li>Enable Auto-Start functionality.</li> <li>Monitor the service status through the log display.</li> </ul> <p></p>"},{"location":"usage/gui/#accessing-the-ais-web-viewer","title":"Accessing the AIS Web Viewer","text":"<p>After starting the service in the Control section and ensuring it runs without errors (check the log), you can view your received AIS data through the local web viewer. Access it by navigating to your Raspberry Pi's IP address on port 8100: <pre><code>http://zerowh:8100\n</code></pre> The viewer provides a real-time display of AIS messages and vessel positions, allowing you to verify that your setup is working correctly. You can also quickly access it by selecting the Webviewer menu item.</p> <p></p>"},{"location":"usage/gui/#conclusion","title":"Conclusion","text":"<p>With these steps completed, you now have a fully functional AIS receiving station running on your Raspberry Pi. The system will receive AIS messages from nearby vessels and, if configured, share this data with the AIScatcher.org community. You can monitor vessel traffic in real-time through the web viewer interface.</p> <p>For advanced users who want to fine-tune their setup, AIS-catcher provides two configuration files:</p> <p>The JSON configuration file at: <pre><code>/etc/AIS-catcher/config.json\n</code></pre></p> <p>And the command-line parameters file at: <pre><code>/etc/AIS-catcher/config.cmd\n</code></pre></p> <p>Note: The GUI script can also be run for existing installations that are based on the AIS-catcher install script. But once configuration files are manually edited they cannot be edited via the HTML forms anymore. The configuration files still can be edited though under the advanced options menu. </p>"},{"location":"usage/json-configuration/","title":"JSON Configuration","text":"<p>AIS-catcher (v0.41+) supports extensive configuration through JSON files, enabling users to tailor the application to their specific needs. This guide provides an in-depth look at the JSON configuration structure, key settings, and best practices to help you effectively set up and manage AIS-catcher.</p> <p>To start AIS-catcher with a JSON configuration file, use the -C option followed by the path to your config.json file:</p> <p><pre><code>AIS-catcher -C config.json\n</code></pre> This command instructs AIS-catcher to load and apply the settings defined in config.json.</p>"},{"location":"usage/json-configuration/#basic-structure","title":"Basic Structure","text":"<p>A minimal JSON configuration file for AIS-catcher requires the following structure: <pre><code>{\n    \"config\": \"aiscatcher\",\n    \"version\": 1\n}\n</code></pre></p> <ul> <li>config: Identifies the configuration type. Must be \"aiscatcher\".</li> <li>version: Specifies the configuration version. Currently, only version 1 is supported.</li> </ul>"},{"location":"usage/json-configuration/#configuration-keys","title":"Configuration Keys","text":"<p>Configuration keys are organized into several categories to manage different aspects of AIS-catcher's functionality. Each key has a specific purpose and should be used as per the documentation.</p>"},{"location":"usage/json-configuration/#core-settings","title":"Core Settings","text":"<p>Core but optional settings define fundamental aspects of AIS-catcher's operation.</p> Key Type Description Documentation General <code>config</code> string \"aiscatcher\" <code>version</code> number 1 <code>sharing</code> boolean Enable community feed sharing Community Feed <code>sharing_key</code> string Community feed key Community Feed Receiver <code>input</code> string Primary input device selection rtlsdr/hackrf/etc <code>serial</code> string Device serial number <code>verbose</code> boolean Enable verbose output Console Output <code>screen</code> number Screen output mode (0-5) Console Output <ul> <li> <p><code>config</code>: Must always be set to \"aiscatcher\" to identify the configuration type.</p> </li> <li> <p><code>version</code>: Defines the configuration file version. Ensure it is set to 1 as this is the currently supported version.</p> </li> <li> <p><code>sharing</code>: Enables sharing of AIS data with the AIS-catcher community feed, allowing others to access your AIS data and vice versa.</p> </li> <li> <p><code>sharing_key</code>: A unique key obtained from aiscatcher.org to easily share your AIS data with the community.</p> </li> <li> <p><code>input</code>: Specifies the primary input device for AIS data (e.g., \"rtlsdr\", \"airspy\", etc).</p> </li> <li> <p><code>serial</code>: Defines the serial number of the device to be used. Useful when multiple devices are connected.</p> </li> <li> <p><code>verbose</code>: When set to true, AIS-catcher provides detailed logs and output for debugging purposes.</p> </li> <li> <p><code>screen</code>: Controls the verbosity and format of the console output. Values range from 0 (no output) to 5 (full JSON decoding). </p> </li> </ul>"},{"location":"usage/json-configuration/#important-notes","title":"Important Notes","text":"<p>JSON is case-sensitive; all keys must be lowercase. Device-specific sections only configure the device but don't select it - use <code>input</code> or <code>serial</code> for device selection.  The <code>active</code> boolean in any section enables/disables that configuration and if ommited it is assumed to be active.</p> <p>Outputs are often captured in a JSON-array, like for example for <code>udp</code>, to support multiple output channels.</p>"},{"location":"usage/json-configuration/#input-device-settings","title":"Input Device Settings","text":"<p>AIS-catcher supports various input devices. Each device type has specific configuration options. Below are the supported devices and their respective settings. The documentation of the relevant keys can be found in the Configuration sections. Below we provide a few examples.</p>"},{"location":"usage/json-configuration/#rtl-sdr-rtlsdr","title":"RTL-SDR (<code>rtlsdr</code>)","text":"Example <pre><code>{\n    \"rtlsdr\": {\n        \"active\": true,\n        \"rtlagc\": true,\n        \"tuner\": \"auto\",\n        \"bandwidth\": \"192K\",\n        \"sample_rate\": \"1536K\",\n        \"biastee\": false,\n    }\n}\n</code></pre> <p>Full RTL-SDR Documentation</p>"},{"location":"usage/json-configuration/#airspy-airspy","title":"Airspy (<code>airspy</code>)","text":"Example <pre><code>{\n    \"airspy\": {\n        \"sample_rate\": \"3000K\",\n        \"linearity\": 17,\n        \"biastee\": false\n    }\n}\n</code></pre> <p>Full Airspy Documentation</p>"},{"location":"usage/json-configuration/#airspy-hf-airspyhf","title":"Airspy HF+ (<code>airspyhf</code>)","text":"Example <pre><code>{\n    \"airspyhf\": {\n        \"sample_rate\": \"192k\",\n        \"threshold\": \"low\",\n        \"preamp\": false\n    }\n}\n</code></pre> [Full Airspy HF+ Documentation](../configuration/input/airspyhf.md)"},{"location":"usage/json-configuration/#hackrf-hackrf","title":"HackRF (<code>hackrf</code>)","text":"Example <pre><code>{\n    \"hackrf\": {\n        \"sample_rate\": \"6144k\",\n        \"lna\": 8,\n        \"vga\": 20,\n        \"preamp\": false\n    }\n}\n</code></pre> <p>Full HackRF Documentation</p>"},{"location":"usage/json-configuration/#sdrplay-sdrplay","title":"SDRPlay (<code>sdrplay</code>)","text":"Example <pre><code>{\n    \"sdrplay\": {\n        \"sample_rate\": \"2304K\",\n        \"agc\": true,\n        \"lnastate\": 5,\n        \"grdb\": 40\n    }\n}\n</code></pre> <p>Full SDRPlay Documentation</p>"},{"location":"usage/json-configuration/#serial-port-input-serialport","title":"Serial Port Input (<code>serialport</code>)","text":"Example <pre><code>{\n    \"serialport\": {\n        \"baudrate\": 38400,\n        \"port\": \"/dev/tty0\"\n    }\n}\n</code></pre> <p>Full Serial Port Documentation</p>"},{"location":"usage/json-configuration/#network-input-settings","title":"Network Input Settings","text":""},{"location":"usage/json-configuration/#tcp-client-rtltcp","title":"TCP Client (<code>rtltcp</code>)","text":"Example <pre><code>{\n    \"rtltcp\": {\n        \"host\": \"192.168.1.100\",\n        \"port\": 12345\n    }\n}\n</code></pre> <p>Full TCP Documentation</p>"},{"location":"usage/json-configuration/#spyserver-spyserver","title":"SpyServer (<code>spyserver</code>)","text":"Example <pre><code>{\n    \"spyserver\": {\n        \"host\": \"server.example.com\",\n        \"port\": 5555\n    }\n}\n</code></pre> <p>Full SpyServer Documentation</p>"},{"location":"usage/json-configuration/#output-settings","title":"Output Settings","text":"<p>AIS-catcher supports various output channels. Each output channel has specific configuration options.  The documentation of the relevant keys can be found in the Configuration sections with some JSON examples below.</p>"},{"location":"usage/json-configuration/#web-viewer-server","title":"Web Viewer (<code>server</code>)","text":"Example <pre><code>{\n    \"server\": [\n        {\n            \"active\": true,\n            \"port\": 8100,\n            \"station\": \"My Station\",\n            \"share_loc\": true,\n            \"lat\": 52,\n            \"lon\": 4.3\n        }\n    ]\n}\n</code></pre> <p>Full Web Server Documentation</p>"},{"location":"usage/json-configuration/#udp-output-udp","title":"UDP Output (<code>udp</code>)","text":"Example <pre><code>{\n    \"udp\": [\n        {\n            \"active\": true,\n            \"host\": \"192.168.1.235\",\n            \"port\": 4002,\n            \"filter\": false,\n            \"allow_type\": \"1,2,3,5,18,19,24\"\n        }\n    ]\n}\n</code></pre> <p>Full UDP Documentation</p>"},{"location":"usage/json-configuration/#tcp-output-client-tcp","title":"TCP  Output (Client) (<code>tcp</code>)","text":"Example <pre><code>{\n    \"tcp\": [\n        {\n            \"active\": true,\n            \"host\": \"5.9.207.224\",\n            \"port\": 12,\n            \"keep_alive\": false\n        }\n    ]\n}\n</code></pre> <p>Full TCP Documentation</p>"},{"location":"usage/json-configuration/#tcp-output-server-tcp-listener","title":"TCP  Output (Server) (<code>tcp-listener</code>)","text":"Example <pre><code>{\n    \"tcp_listener\": [\n        {\n            \"active\": true,\n            \"port\": 5012\n        }\n    ]\n}\n</code></pre> <p>Full TCP Documentation</p>"},{"location":"usage/json-configuration/#multi-receiver-configuration","title":"Multi-Receiver Configuration","text":"<p>For multiple receivers,  you can more the relevant settings to a <code>receiver</code> array as in this example starting two receivers: <pre><code>{\n    \"config\": \"aiscatcher\",\n    \"version\": 1,\n    \"receiver\": [\n        {\n            \"input\": \"airspy\",\n            \"airspy\": {\n                \"sample_rate\": \"3000K\"\n            }\n        },\n        {\n            \"input\": \"rtlsdr\",\n            \"serial\": \"ais\",\n            \"rtlsdr\": {\n                \"bandwidth\": \"192k\"\n            }\n        }\n    ]\n}\n</code></pre></p>"},{"location":"usage/overview/","title":"Basic Usage","text":"<p>In this section we describe how to get started with the three main configuation methods:</p> <ul> <li>Command Line Usage</li> <li>Web GUI</li> <li>JSON configuration</li> </ul>"}]}