{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AIS-Catcher","text":"<p>Welcome to the documentation pages for AIS-Catcher, an open-source initiative designed to transform your general-purpose Software Defined Radio (SDR)-equipped computer into a powerful, dual-channel AIS receiver. AIS-Catcher bridges the gap between affordable SDR devices like the RTL-SDR and expensive commercial AIS receivers, giving you complete control over maritime data monitoring and sharing.</p> <p>Whether you're a maritime enthusiast, researcher, or data aggregator, AIS-Catcher offers advanced features, cross-platform compatibility, and a user-friendly setup to meet your needs.</p>"},{"location":"#what-is-ais","title":"What is AIS?","text":"<p>The Automatic Identification System (AIS) is a maritime safety technology similar to ADSB used in aviation. AIS provides real-time information such as a vessel\u2019s position, speed, and heading by transmitting messages over VHF radio frequencies (around 162 MHz). </p> <p>AIS plays a crucial role in:</p> <ul> <li>Collision Avoidance: Helping vessels navigate safely in crowded waters.</li> <li>Traffic Monitoring: Assisting port authorities in managing maritime traffic.</li> <li>Search-and-Rescue: Providing accurate location information for rescue operations.</li> <li>Environmental Monitoring: Tracking vessel movements for environmental studies.</li> </ul> <p>With AIS, much like ADS-B for aircraft, you can track and monitor vessels in real time. This makes AIS invaluable for enthusiasts, researchers, and organizations involved in maritime navigation and safety.</p>"},{"location":"#important-disclaimer","title":"\u26a0\ufe0f Important Disclaimer","text":""},{"location":"#hobby-and-research-use-only","title":"Hobby and Research Use Only","text":"<p>AIS-Catcher is a hobbyist and research project. It is NOT intended or approved for use in navigation or safety-of-life applications.</p> <ul> <li>No Location Broadcasting: AIS-Catcher does not broadcast location data and is not compliant with maritime regulations for navigational devices.</li> <li>Not Certified: It has not undergone the rigorous testing required for safety-critical applications.</li> <li>Legal Compliance: Use of AIS-Catcher must be limited to applications where it is legally allowed, such as personal hobbies or academic research.</li> </ul> <p>AIS-Catcher is provided as-is, with no guarantees of reliability or accuracy. Always ensure compliance with your local laws and regulations regarding the reception and processing of AIS signals. AIS-Catcher should only be used in contexts where it is permissible by law and safe to do so.</p>"},{"location":"#why-choose-ais-catcher","title":"Why Choose AIS-Catcher?","text":"<p>AIS-Catcher is the ultimate tool for decoding and analyzing AIS signals from ships, allowing you to monitor vessel movements, improve situational awareness, and contribute to the maritime community.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Multi-Platform Compatibility   Runs seamlessly on Windows, Ubuntu/Debian, Raspberry Pi, macOS, and even inside Docker containers.</p> </li> <li> <p>Lightweight and Efficient   Written in C++ and optimized for high performance and small footprint on low-power devices like Raspberry Pi.</p> </li> <li> <p>Wide SDR Support   Works with popular SDRs like RTL-SDR, AirSpy, AirSpy HF+ HackRF, SDRPlay, and more.</p> </li> <li> <p>Flexible Outputs   Send AIS data in NMEA format, JSON. Stream data to databases, MQTT brokers, or external software like OpenCPN.</p> </li> <li> <p>Built-In Web Viewer   Access real-time AIS data and system statistics through a web-based interface with advanced customization options and plugin system.</p> </li> </ul> <p>AIS-catcher began as a basic decoder for RTL-SDR dongles, offering on-screen output and UDP transmission for key aggregation sites. Over time, we've expanded its compatibility to include a wider range of SDRs and input methods. On the output side, it now supports viewing signals and positions through a web viewer, saving to databases, and forwarding as NMEA2000 on Linux systems using socketCAN. This enhancement has subtly shifted AIS-catcher's role, making it a useful tool for managing different AIS data streams. Below is a cheatsheet for the various input and output modes.</p> <p></p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Follow these quick links to get started:</p> <ol> <li>Overview: Learn the basics of AIS-Catcher and its capabilities.</li> <li>Installation Guide: Step-by-step instructions for setting up AIS-Catcher on your platform.</li> <li>First Run: Configure and run AIS-Catcher for the first time.</li> <li>AIS Basics: A primer on AIS technology and how it works.</li> </ol>"},{"location":"#powerful-features-for-every-use-case","title":"Powerful Features for Every Use Case","text":""},{"location":"#easy-to-install","title":"Easy to Install","text":"<p>Installation scripts are provided for Linux and Raspberry and pre-build Docker images for easy install. For Raspberry a GUI is available providing easy configuration and start/stop</p>"},{"location":"#input-options","title":"Input Options","text":"<p>Receive AIS data from various Software Defined Radios includeing the RTL-SDR, NMEA over network connections or serial devices and NMEA2000 via SocketCAN</p>"},{"location":"#output-options","title":"Output Options","text":"<p>Stream AIS messages via UDP/TCP/WebSockets/HTTP push, publish to MQTT brokers, save to files or databases, or visualize in real-time in a built-in Web Viewer.</p>"},{"location":"#json-and-cli-configuration","title":"JSON and CLI Configuration","text":"<p>Run AIS-Catcher with flexible JSON configuration files or directly via command-line options for advanced control.</p>"},{"location":"#plugins-and-customization","title":"Plugins and Customization","text":"<p>Enhance your setup with custom plugins, styles, and offline map support to create a tailored experience.</p>"},{"location":"#advanced-features","title":"Advanced Features","text":"<ul> <li>MQTT Integration: Publish AIS data to brokers or subscribe to incoming feeds.</li> <li>NMEA2000 Support: Experimental support for socketCAN on Linux.</li> <li>Validation Tools: Verify AIS message integrity with built-in checks.</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Complete User Guide: Detailed instructions and feature walkthroughs.</li> <li>Community and Support: Join the AIS-Catcher community to share insights and get help.</li> <li>FAQ: Answers to frequently asked questions.</li> <li>References: Links to additional resources and documentation.</li> </ul>"},{"location":"#join-the-ais-catcher-community","title":"Join the AIS-Catcher Community","text":"<p>Visit aiscatcher.org to explore real-time examples, register your station, and contribute to our growing network. Together, we can enhance AIS data visibility worldwide.</p> <p>Ready to get started? Install AIS-Catcher and turn your SDR-equipped device into a powerful AIS receiver today!</p>"},{"location":"community/","title":"Purpose","text":"<p>The purpose of <code>AIS-catcher</code> is to serve as a platform that encourages the perpetual enhancement of receiver models. We greatly value and appreciate any suggestions, observations, or shared recordings, particularly from setups where the existing models encounter difficulties.</p>"},{"location":"community/#the-aiscatcherorg-community","title":"The aiscatcher.org community","text":"<p>AIS-catcher is a free, open-source project aimed at transforming SDR-equipped computers into AIS-receivers. It's continuously improved with decoding enhancements, user support, and expanded output options for commercial data aggregators. As a seperate project we also aggregate AIS data with the aim of real-time visualization in local web dashboards, enhancing receiver performance and situational awareness by integrating nearby station data.</p> <p>To join, ensure you're on the latest version, visit aiscatcher.org, and add your station. Upon registration, you'll receive a personal sharing key. Simply run AIS-catcher on the command line with \"-X\" followed by your sharing key to share your station's raw AIS data with the community hub. This activates a \"Community Feed\" in your station's web viewer, accessible under map layers and some other features.</p> <p>Check the data we're receiving at aiscatcher.org. We welcome your innovative ideas for enhancing AIS-catcher with this collective data, which could lead to new features or improvements benefiting the entire community.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#how-to-connect-to-opencpn","title":"How to Connect to OpenCPN?","text":"<p>In this example, we have AIS-catcher running on a Raspberry PI and aim to receive the messages in OpenCPN running on a Windows computer with IP address <code>192.168.1.239</code>. We have chosen to use port <code>10101</code>. On the Raspberry, we start AIS-catcher with the following command to send the NMEA messages to the Windows machine: <pre><code> AIS-catcher -u 192.168.1.239 10101\n</code></pre></p> <p>In OpenCPN the only thing we need to do is create a Connection with the following settings:</p> <p> </p> <p>In newer versions of OpenCPN, the user has to specify a protocol, in this case select NMEA0183.</p>"},{"location":"advanced/JSON-decoding/","title":"Complete AIS Message JSON Documentation","text":""},{"location":"advanced/JSON-decoding/#ais-decoding","title":"AIS decoding","text":""},{"location":"advanced/JSON-decoding/#nmea-input","title":"NMEA input","text":"<p>AIS-catcher can print AIS messages in  JSON. The output format is specified with the <code>-o</code> switch.  As an example to show a full decoding of JSON messages use <code>-o 5</code>: <pre><code>echo '!AIVDM,1,1,,B,3776k`5000a3SLPEKnDQQWpH0000,0*78'  | AIS-catcher -r txt . -o 5\n</code></pre> which produces <pre><code>{\"class\":\"AIS\",\"device\":\"AIS-catcher\",\"scaled\":true,\"channel\":\"B\",\"nmea\":[\"!AIVDM,1,1,,B,3776k`5000a3SLPEKnDQQWpH0000,0*78\"],\"type\":3,\"repeat\":0,\"mmsi\":477213600,\"status\":5,\"status_text\":\"Moored\",\"turn\":0,\"speed\":0.000000,\"accuracy\":true,\"lon\":126.605469,\"lat\":37.460617,\"course\":39.000000,\"heading\":252,\"second\":12,\"maneuver\":0,\"raim\":false,\"radio\":0}\n</code></pre></p>"},{"location":"advanced/JSON-decoding/#json-format","title":"JSON Format","text":"<p>Below documents the JSON format used for decoding AIS messages. Depending on the settings for JSON decoding fields may or may not be included in the outcome. With format <code>JSON_NMEA</code> only the common fields will be included in the JSON package. The AIS message details are still included in the NMEA array embedded in the JSON. With format <code>JSON_FULL</code> the program will perform a full decoding of the AIS messages and include in the JSON. The output format is largely compatible with <code>gpsdecode</code>.</p>"},{"location":"advanced/JSON-decoding/#common-fields","title":"Common Fields","text":"<p>These fields are present in all AIS messages:</p> Field Type Description Example class String Always \"AIS\" \"AIS\" device String Always \"AIS-catcher\" \"AIS-catcher\" type Integer Message type number 1 scaled Boolean Values scaled to real units true channel String AIS channel \"A\" nmea String Original NMEA sentence \"!AIVDM,1,1,,A,13...\" mmsi Integer MMSI number 123456789 <p>Optional configuration-dependent fields:</p> Field Type Description version String Software version driver Integer Driver identifier hardware String Hardware identifier signal_power Float Signal strength in dB ppm Float Frequency error in ppm rxtime String Reception timestamp country String Country name from MMSI country_code String Two-letter country code"},{"location":"advanced/JSON-decoding/#type-1-2-3-position-report-class-a","title":"Type 1, 2, 3: Position Report Class A","text":"Field Type Range/Units Description status Integer 0-15 Navigation status status_text String See note 1 Navigation status description turn Float \u00b1720\u00b0/min Rate of turn turn_unscaled Integer Raw Unscaled turn value speed Float 0-102.2 knots Speed over ground accuracy Boolean - Position accuracy flag lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude course Float 0-359.9\u00b0 Course over ground heading Integer 0-359\u00b0 True heading second Integer 0-59 Second of timestamp maneuver Integer 0-2 Maneuver indicator raim Boolean - RAIM flag radio Integer - Radio status"},{"location":"advanced/JSON-decoding/#type-4-base-station-report","title":"Type 4: Base Station Report","text":"Field Type Range Description year Integer YYYY UTC year month Integer 1-12 UTC month day Integer 1-31 UTC day hour Integer 0-23 UTC hour minute Integer 0-59 UTC minute second Integer 0-59 UTC second accuracy Boolean - Position accuracy flag lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude epfd Integer 0-8 EPFD type epfd_text String See note 2 EPFD description raim Boolean - RAIM flag radio Integer - Radio status"},{"location":"advanced/JSON-decoding/#type-5-static-and-voyage-related-data","title":"Type 5: Static and Voyage Related Data","text":"Field Type Range Description ais_version Integer 0-3 AIS version imo Integer 1-999999999 IMO number callsign String 7 chars Radio callsign shipname String 20 chars Vessel name shiptype Integer 0-99 Ship type code shiptype_text String See note 3 Ship type description to_bow Integer 0-511m Dimension to bow to_stern Integer 0-511m Dimension to stern to_port Integer 0-63m Dimension to port to_starboard Integer 0-63m Dimension to starboard epfd Integer 0-8 EPFD type epfd_text String See note 2 EPFD description eta String ISO8601 Estimated time of arrival draught Float 0-25.5m Draft in meters destination String 20 chars Destination port dte Boolean - Data terminal flag"},{"location":"advanced/JSON-decoding/#type-6-binary-addressed-message","title":"Type 6: Binary Addressed Message","text":"Field Type Range Description seqno Integer 0-3 Sequence number dest_mmsi Integer 9 digits Destination MMSI retransmit Boolean - Retransmit flag dac Integer - Designated Area Code fid Integer - Function ID data String - Binary data"},{"location":"advanced/JSON-decoding/#type-7-binary-acknowledge","title":"Type 7: Binary Acknowledge","text":"Field Type Range Description mmsi1 Integer 9 digits MMSI number 1 mmsiseq1 Integer 0-3 Sequence for MMSI 1 mmsi2 Integer 9 digits MMSI number 2 mmsiseq2 Integer 0-3 Sequence for MMSI 2 mmsi3 Integer 9 digits MMSI number 3 mmsiseq3 Integer 0-3 Sequence for MMSI 3 mmsi4 Integer 9 digits MMSI number 4 mmsiseq4 Integer 0-3 Sequence for MMSI 4"},{"location":"advanced/JSON-decoding/#type-8-binary-broadcast-message","title":"Type 8: Binary Broadcast Message","text":"Field Type Range Description dac Integer - Designated Area Code fid Integer - Function ID data String - Binary data"},{"location":"advanced/JSON-decoding/#type-9-standard-sar-aircraft-position-report","title":"Type 9: Standard SAR Aircraft Position Report","text":"Field Type Range Description alt Integer 0-4095 Altitude in meters speed Integer 0-1023 Speed over ground accuracy Boolean - Position accuracy lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude course Float 0-359.9\u00b0 Course over ground second Integer 0-59 UTC second regional Integer - Regional reserved dte Boolean - DTE flag assigned Boolean - Assigned mode flag raim Boolean - RAIM flag radio Integer - Radio status"},{"location":"advanced/JSON-decoding/#type-10-utcdate-inquiry","title":"Type 10: UTC/Date Inquiry","text":"Field Type Range Description dest_mmsi Integer 9 digits Destination MMSI"},{"location":"advanced/JSON-decoding/#type-11-utcdate-response","title":"Type 11: UTC/Date Response","text":"<p>Same fields as Type 4</p>"},{"location":"advanced/JSON-decoding/#type-12-addressed-safety-related-message","title":"Type 12: Addressed Safety Related Message","text":"Field Type Range Description seqno Integer 0-3 Sequence number dest_mmsi Integer 9 digits Destination MMSI retransmit Boolean - Retransmit flag text String - Safety related text"},{"location":"advanced/JSON-decoding/#type-13-safety-related-acknowledge","title":"Type 13: Safety Related Acknowledge","text":"<p>Same fields as Type 7</p>"},{"location":"advanced/JSON-decoding/#type-14-safety-related-broadcast-message","title":"Type 14: Safety Related Broadcast Message","text":"Field Type Range Description text String - Safety related text"},{"location":"advanced/JSON-decoding/#type-15-interrogation","title":"Type 15: Interrogation","text":"Field Type Range Description mmsi1 Integer 9 digits Interrogated MMSI 1 type1_1 Integer 1-27 First message type offset1_1 Integer - First slot offset type1_2 Integer 1-27 Second message type offset1_2 Integer - Second slot offset mmsi2 Integer 9 digits Interrogated MMSI 2 type2_1 Integer 1-27 First message type offset2_1 Integer - First slot offset"},{"location":"advanced/JSON-decoding/#type-16-assignment-mode-command","title":"Type 16: Assignment Mode Command","text":"Field Type Range Description mmsi1 Integer 9 digits First MMSI offset1 Integer - First offset increment1 Integer - First increment mmsi2 Integer 9 digits Second MMSI offset2 Integer - Second offset increment2 Integer - Second increment"},{"location":"advanced/JSON-decoding/#type-17-dgnss-binary-broadcast-message","title":"Type 17: DGNSS Binary Broadcast Message","text":"Field Type Range Description lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude data String - DGNSS data"},{"location":"advanced/JSON-decoding/#type-18-standard-class-b-cs-position-report","title":"Type 18: Standard Class B CS Position Report","text":"Field Type Range Description reserved Integer - Reserved speed Float 0-102.2 knots Speed over ground accuracy Boolean - Position accuracy lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude course Float 0-359.9\u00b0 Course over ground heading Integer 0-359\u00b0 True heading second Integer 0-59 UTC second regional Integer - Regional reserved cs Boolean - Carrier sense unit flag display Boolean - Display flag dsc Boolean - DSC flag band Boolean - Band flag msg22 Boolean - Message 22 flag assigned Boolean - Assigned mode flag raim Boolean - RAIM flag radio Integer - Radio status"},{"location":"advanced/JSON-decoding/#type-19-extended-class-b-cs-position-report","title":"Type 19: Extended Class B CS Position Report","text":"Field Type Range Description reserved Integer - Reserved speed Float 0-102.2 knots Speed over ground accuracy Boolean - Position accuracy lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude course Float 0-359.9\u00b0 Course over ground heading Integer 0-359\u00b0 True heading second Integer 0-59 UTC second regional Integer - Regional reserved shipname String 20 chars Vessel name shiptype Integer 0-99 Ship type code shiptype_text String See note 3 Ship type description to_bow Integer 0-511m Dimension to bow to_stern Integer 0-511m Dimension to stern to_port Integer 0-63m Dimension to port to_starboard Integer 0-63m Dimension to starboard epfd Integer 0-8 EPFD type epfd_text String See note 2 EPFD description raim Boolean - RAIM flag dte Boolean - DTE flag assigned Boolean - Assigned mode flag"},{"location":"advanced/JSON-decoding/#type-20-data-link-management","title":"Type 20: Data Link Management","text":"Field Type Range Description offset1 Integer - Offset number 1 number1 Integer - Reserved slots 1 timeout1 Integer - Timeout 1 increment1 Integer - Increment 1 offset2 Integer - Offset number 2 number2 Integer - Reserved slots 2 timeout2 Integer - Timeout 2 increment2 Integer - Increment 2 offset3 Integer - Offset number 3 number3 Integer - Reserved slots 3 timeout3 Integer - Timeout 3 increment3 Integer - Increment 3 offset4 Integer - Offset number 4 number4 Integer - Reserved slots 4 timeout4 Integer - Timeout 4 increment4 Integer - Increment 4"},{"location":"advanced/JSON-decoding/#type-21-aid-to-navigation-report","title":"Type 21: Aid-to-Navigation Report","text":"Field Type Range Description aid_type Integer 0-31 Aid type aid_type_text String See note 4 Aid type description name String 20 chars Name of aid accuracy Boolean - Position accuracy lon Float \u00b1180\u00b0 Longitude lat Float \u00b190\u00b0 Latitude to_bow Integer 0-511m Dimension to bow to_stern Integer 0-511m Dimension to stern to_port Integer 0-63m Dimension to port to_starboard Integer 0-63m Dimension to starboard epfd Integer 0-8 EPFD type epfd_text String See note 2 EPFD description second Integer 0-59 UTC second off_position Boolean - Off position indicator regional Integer - Regional reserved raim Boolean - RAIM flag virtual_aid Boolean - Virtual aid flag assigned Boolean - Assigned mode flag"},{"location":"advanced/JSON-decoding/#type-22-channel-management","title":"Type 22: Channel Management","text":"Field Type Range Description channel_a Integer - Channel A number channel_b Integer - Channel B number txrx Integer - Tx/Rx mode power Boolean - Power level addressed Boolean - Addressed flag band_a Boolean - Channel A band band_b Boolean - Channel B band zonesize Integer - Zone size If addressed = true: dest1 Integer 9 digits Destination MMSI 1 dest2 Integer 9 digits Destination MMSI 2 If addressed = false: ne_lon Float \u00b1180\u00b0 NE longitude ne_lat Float \u00b190\u00b0 NE latitude sw_lon Float \u00b1180\u00b0 SW longitude sw_lat Float \u00b190\u00b0 SW latitude"},{"location":"advanced/JSON-decoding/#type-23-group-assignment-command","title":"Type 23: Group Assignment Command","text":"Field Type Range Description ne_lon Float \u00b1180\u00b0 NE longitude ne_lat Float \u00b190\u00b0 NE latitude sw_lon Float \u00b1180\u00b0 SW longitude sw_lat Float \u00b190\u00b0 SW latitude station_type Integer - Station type ship_type Integer - Ship type txrx Integer - Tx/Rx mode interval Integer - Reporting interval quiet Integer - Quiet time"},{"location":"advanced/JSON-decoding/#type-24-static-data-report","title":"Type 24: Static Data Report","text":"<p>Message Type 24 Part A Fields</p> Field Type Range Description partno Integer 0 Part number, always 0 for Part A shipname String 20 chars Name of the vessel <p>Message Type 24 Part B Fields</p> Field Type Range Description partno Integer 1 Part number, always 1 for Part B callsign String 7 chars Vessel radio callsign shiptype Integer 0-99 Type of ship and cargo shiptype_text String See note 1 Description of ship type vendorid String 3 chars Manufacturer's ID model Integer 0-15 Equipment model code serial Integer 0-999999 Unit serial number to_bow Integer 0-511 Distance from GPS to bow in meters to_stern Integer 0-511 Distance from GPS to stern in meters to_port Integer 0-63 Distance from GPS to port in meters to_starboard Integer 0-63 Distance from GPS to starboard in meters mothership_mmsi Integer 9 digits MMSI of mothership for auxiliary craft"},{"location":"advanced/JSON-decoding/#message-type-25-fields","title":"Message Type 25 Fields","text":"Field Type Range Description addressed Boolean true/false Message has specific destination structured Boolean true/false Message contains structured data dest_mmsi Integer 9 digits Destination MMSI if addressed data String - Binary payload data"},{"location":"advanced/JSON-decoding/#message-type-26-fields","title":"Message Type 26 Fields","text":"Field Type Range Description addressed Boolean true/false Message has specific destination structured Boolean true/false Message contains structured data dest_mmsi Integer 9 digits Destination MMSI if addressed radio Integer 0-3 Radio status data String - Binary payload data"},{"location":"advanced/JSON-decoding/#message-type-27-fields","title":"Message Type 27 Fields","text":"Field Type Range Description accuracy Boolean true/false Position accuracy: true if &lt; 10m raim Boolean true/false RAIM flag: Receiver Autonomous Integrity Monitoring status Integer 0-15 Navigation status status_text String See note 1 Navigation status description lon Float \u00b1180\u00b0 Longitude in decimal degrees lat Float \u00b190\u00b0 Latitude in decimal degrees speed Integer 0-62 Speed over ground in knots course Integer 0-359 Course over ground in degrees gnss Boolean true/false GNSS position status <p>Notes</p> <p>Navigation Status Values:</p> Value Description 0 Under way using engine 1 At anchor 2 Not under command 3 Restricted manoeuverability 4 Constrained by draught 5 Moored 6 Aground 7 Engaged in fishing 8 Under way sailing 9 Reserved for HSC 10 Reserved for WIG 11-13 Reserved 14 AIS-SART is active 15 Not defined"},{"location":"advanced/advanced-configuration/","title":"Advanced Configuration","text":""},{"location":"advanced/advanced-configuration/#long-range-ais-messages","title":"Long Range AIS messages","text":"<p>AIS-catcher has the option to listen at frequency 156.8 Mhz to receive Channel 3/C and 4/D (vs the default A and B around 162 MHz) with the switch <code>-c CD</code>. This follows ideas from a post on the Shipplotter forum. The default decoder is available with the switch <code>-c AB</code>. Note that <code>gpsdecode</code> cannot handle channel designations C and D in NMEA lines. You can provide an optional argument to use channel designations A and B in the NMEA line with the command <code>-c CD AB</code>.</p> <p>In a similar fashion <code>-c X</code> will decode one channel. This is only useful in some instances, see the ZMQ example below.</p>"},{"location":"advanced/advanced-configuration/#nmea-input","title":"NMEA input","text":"<p>AIS-catcher can be used as a command line utility that decodes NMEA lines in a file and prints the results as JSON. It provides a way to move the JSON analysis to the server side (send over NMEA with minimal metadata) or for unit testing the JSON decoder which was the prime reason for the addition of this feature. As an example: <pre><code>echo '!AIVDM,1,1,,B,3776k`5000a3SLPEKnDQQWpH0000,0*78'  | AIS-catcher -r txt . -o 5\n</code></pre> which produces <pre><code>{\"class\":\"AIS\",\"device\":\"AIS-catcher\",\"scaled\":true,\"channel\":\"B\",\"nmea\":[\"!AIVDM,1,1,,B,3776k`5000a3SLPEKnDQQWpH0000,0*78\"],\"type\":3,\"repeat\":0,\"mmsi\":477213600,\"status\":5,\"status_text\":\"Moored\",\"turn\":0,\"speed\":0.000000,\"accuracy\":true,\"lon\":126.605469,\"lat\":37.460617,\"course\":39.000000,\"heading\":252,\"second\":12,\"maneuver\":0,\"raim\":false,\"radio\":0}\n</code></pre> When piping NMEA text lines into AIS-catcher, use format <code>TXT</code> which ensures that the program immediately processes the incoming characters and will not buffer them first. The NMEA decoder can be activated with the switch <code>-m 5</code> but setting the input format to TXT will automatically activate this decoder. </p> <p>This functionality opens a few doors. For example, you can use AIS-catcher to read and forward messages from a dAISy Hat (simply read from the file <code>cat /dev/serial0</code> on Linux) or process the data from Norwegian coastal traffic offered via a TCP server, like this: <pre><code>netcat  153.44.253.27  5631 | AIS-catcher -r txt . -o 5\n</code></pre></p> <p>For input via TCP, you can skip the <code>netcat</code> command and directly read the input into the program as follows: <pre><code>AIS-catcher -t txt 153.44.253.27 5631\n</code></pre> Again, the <code>FORMAT txt</code> option switches off the buffering and automatically selects the NMEA decoder.</p> <p>Finally, you can also receive NMEA input via a built-in UDP server: <pre><code>AIS-catcher -x 192.168.1.235 4002\n</code></pre></p> <p>The functionality to read NMEA lines from text files has been used to validate AIS-catcher JSON output on a file with 80K+ lines against pyais and gpsdecode. Only available switches for this decoder are <code>-go NMEA_REFRESH</code> and <code>-go CRC_CHECK</code> which force AIS-catcher to, respectively, recalculate the NMEA lines if <code>on</code> (default <code>off</code>) and ignore messages with incorrect CRC if <code>on</code> (default <code>off</code>). Example:  <pre><code>echo '$AIVDM,1,1,,,3776k`5000a3SLPEKnDQQWpH0000,0*79' | AIS-catcher -r txt . -n -go nmea_refresh on crc_check off\n</code></pre> returns a warning on the incorrect CRC and: <pre><code>!AIVDM,1,1,,,3776k`5000a3SLPEKnDQQWpH0000,0*3A\n</code></pre> Note that CRC/checksum is the simple xor-checksum for validating that the NMEA line is not corrupted and not the CRC that is transmitted with the AIS message for a decoder to check the correct reception over air. This latter 16-bit checksum/CRC is not included in the NMEA message.</p> <p>AIS-catcher will also accept AIVDO input which is typically used for the MMSI of the own ship. You can enable/disable this with: <code>-go VDO on/off</code>.</p>"},{"location":"advanced/advanced-configuration/#specifying-station-location","title":"Specifying Station Location","text":"<p>As discussed above, the webserver will only share a known location of the station with the front-end web viewer if <code>share_loc</code> is set for the webserver: <pre><code>AIS-catcher -N 8100 share_loc on\n</code></pre> This option is switched off by default for privacy reasons in case the web viewer is shared externally. The NMEA decoder accepts NMEA lines from a GPS device (NMEA lines GPRMC, GPGLL and GPGGA): <pre><code>echo '$GPGGA, 161229.487, 3723.2475, N, 12158.3416, W, 1, 07, 1.0, 9.0, M, , , , 0000*18' | ./AIS-catcher -r txt .\n</code></pre> These GPS coordinates will be used to set the location of the station. In this way, the station can be visualized and tracked while on the move. This is useful if you use AIS-catcher to read from a hardware AIS receiver that has a built-in GPS. Another approach is to read from a GPSD server, e.g. when GPSD listens on post 2947 of the local PC:  <pre><code>AIS-catcher -t gpsd localhost 2947 -N 8100 share_loc on` \n</code></pre> or from a serial device: <pre><code>AIS-catcher -e 38400 /dev/serial/by-id/usb-u-blox_AG_-_www.u-blox.com_u-blox\n</code></pre> The web viewer has the options <code>-N use_gps on/off</code> and <code>-N own_mmsi xxxxx</code>. The first enables/disables the use of GPS NMEA input as the location for the receiver station (default is on). The latter sets the station's location as the location of the vessel with the specified MMSI. The own MMSI will be highlighted on the web viewer map.</p>"},{"location":"advanced/advanced-configuration/#writing-ais-messages-to-a-postgres-database","title":"Writing AIS messages to a Postgres Database","text":"<p>As per full release <code>v0.45</code>, there is functionality to write messages to a database (PostgreSQL). The setup is fairly flexible and can be tailored to the particular needs. First create an empty PostgreSQL database, e.g on an Ubuntu distribution (this might be different on your system): <pre><code>sudo -u postgres createdb ais\n</code></pre> Set up the necessary tables from the AIS-catcher directory: <pre><code>psql ais &lt;DBMS/create.sql \n</code></pre> Make sure you build the latest version of AIS-catcher with this dependency: <pre><code>sudo apt install libpq-dev\n</code></pre> Now AIS-catcher can write the received messages to the database: <pre><code>AIS-catcher -D dbname=ais STATION_ID 17\n</code></pre> or when more details, like username and password, are required: <pre><code>AIS-catcher -D postgresql://[user[:password]@][netloc][:port][/dbname]\n</code></pre> The <code>STATION_ID</code> setting is optional but will populate the entries in the database with the specified ID so multiple feeders can write to one database. There are a few settings for the new <code>-D</code> switch of which the first is the connection string that specifies the database. If you want to use a space in the string use quotation marks around the string. There are other settings that define how tables will be populated:</p> Table Description Settings Default ais_vessel last received data per MMSI V on/off on ais_message received messages with meta data MSGS on/off off ais_nmea nmea sentences NMEA on/off off ais_basestation basestation messsages from type 4 BS on/off off ais_sar_position sar positions from type 9 SAR on/off off ais_aton aton messages from type 21 ATON on/off off ais_vessel_pos vessel position messages from type 1-3, 18, 19, 27 VP on/off off ais_vessel_static vessel static data from type 5, 19 VS on/off off ais_property specific key/value pairs with link to message fill with keys specified in the table ais_keys empty <p>From hereon it is fairly straightforward to pick up this data and start analysis. If the connection fails during the decoding, for whatever reason, the program will try to reconnect to the database every 2 seconds. The maximum number of failed connection attempts before the program terminates is set with <code>MAX_FAILS</code> (&lt;1000) and is set on the command line. If <code>MAX_FAILS</code> is 1000 the program will not terminate if the connection fails.  </p> <p>I hope this is sufficient to get you experimenting! Unfortunately, the options cannot yet be set from the JSON configuration file which is work in progress.</p>"},{"location":"advanced/advanced-configuration/#running-on-rpi-zero-w-and-other-devices-with-performance-limitations","title":"Running on RPI Zero W and other devices with performance limitations","text":"<p>AIS-catcher implements a trick to speed up downsampling for RTLSDR input at 1536K samples/second by using fixed point calculations (<code>-F</code>). In essence, the downsampling is done  in 16-bit integers performed in parallel for the I and Q channels using only 32-bit integers.</p> <p> </p> <p>This feature can activated with the <code>-F</code> switch and is only available for RTL-SDR running at a rate 1536K per second (the default).  To give an idea of the performance improvement on a Raspberry Pi Model B Rev 2 (700 MHz), I used the following command to decode from a file on the aforementioned Raspberry Pi:</p> <p><pre><code>AIS-catcher -r posterholt.raw -s 1536K -b -q -v\n</code></pre> Resulting in 38 messages and the <code>-b</code> switch prints the timing used for decoding: <pre><code>[AIS engine v0.31]  : 17312.1 ms\n</code></pre> Adding the <code>-F</code> switch yielded the same number of messages but the timing is now: <pre><code>[AIS engine (speed optimized) v0.31]    : 7722.32 ms\n</code></pre> On an RPI Zero W this will bring down CPU load to ~40% and avoid buffer overruns.</p>"},{"location":"advanced/advanced-configuration/#connecting-to-gnu-radio-via-zmq","title":"Connecting to GNU Radio via ZMQ","text":"<p>The latest code base of AIS-catcher can take streaming data via ZeroMQ (ZMQ) as input. This eases the interface with packages like GNU Radio. The steps are simple and will be demonstrated by decoding the messages in the AIS example file from here. AIS-catcher cannot directly decode this file as the file contains only one channel, the frequency is shifted away from the center at 162Mhz and the sample rate of 62.5 KHz is not supported in our program. We can however perform decoding with some help from <code>GNU Radio</code>. First start AIS-catcher to receive a stream (data format is complex float and sample rate is 96K) at a defined ZMQ endpoint: <pre><code>AIS-catcher -z CF32 tcp://127.0.0.1:5555 -s 96000\n</code></pre> Next we can build a simple GRC model that performs all the necessary steps and has a ZMQ Pub Sink with the chosen endpoint:  Running this model, will allow us to successfully decode the messages in the file:</p> <p></p> <p>The ZMQ interface is useful if a datastream from an SDR needs to be shared and processed by multiple decoders or for experimentation with different decoder models with support from GNU Radio.</p> <p>Note that with CSDR and SoX we can also decode this file as follows: <pre><code>sox SDRuno_20200907_184926Z_161985kHz.wav -t raw -b 32 -e floating-point - |csdr shift_math_cc 0.165 | AIS-catcher  -r cf32 . -s 62500 -c X -v\n</code></pre></p>"},{"location":"advanced/advanced-configuration/#input-from-fm-discriminator","title":"Input from FM discriminator","text":"<p>We can run AIS-catcher on a RAW audio file as in this tutorial: <pre><code>wget \"https://github.com/freerange/ais-on-sdr/wiki/example-data/helsinki-210-messages.raw\"\nAIS-catcher  -m 3 -v -s 48K -r cs16 helsinki-210-messages.raw\n</code></pre> On this file we should extract roughly <code>362</code> AIVDM lines. Notice that with switch <code>-m 3</code> on the command line AIS-catcher runs a decoding model that assumes the input is the output of an FM discriminator. In this case, the program is similar to the following usage of GNUAIS: <pre><code>gnuais -l helsinki-210-messages.raw\n</code></pre> which produces: <pre><code>INFO: A: Received correctly: 153 packets, wrong CRC: 49 packets, wrong size: 4 packets\nINFO: B: Received correctly: 52 packets, wrong CRC: 65 packets, wrong size: 10 packets\n</code></pre></p>"},{"location":"advanced/grafana/","title":"Using AIS-catcher with Grafana and Prometheus","text":"<p><code>Grafana</code> is an analytics platform that can provide alternative graphs for <code>AIS-catcher</code>.</p> <p>In this guide we will be using <code>Prometheus</code> as the data repository.</p> <p>Using Grafana and Prometheus in this configuration does not require a plan, account, or credentials for their respective cloud offerings.</p>"},{"location":"advanced/grafana/#hardware-requirements","title":"Hardware requirements","text":"<p>Prometheus will store a lot of data, and Grafana will do a lot of data queries. As a result, it would be better if you run these programs on a different system than your feeder Raspberry Pi. This will leave your Pi focused on data collection and processing, and unbothered by the CPU and Disk IO load that Prometheus/Grafana will cause.</p> <p>You can do it on a single system. We're assuming below that you are not.</p>"},{"location":"advanced/grafana/#step-1-make-prometheus-data-available-for-ais-catcher","title":"Step 1: Make Prometheus data available for AIS-catcher","text":"<ul> <li>Edit your AIS-catcher's command line and ensure that <code>PROME on</code> is included after the <code>-N &lt;port&gt;</code> directive. For example:</li> </ul> <pre><code>AIS-catcher -N 8100 PROME on\n</code></pre>"},{"location":"advanced/grafana/#step-2-create-a-container-stack-for-prometheus-and-grafana","title":"Step 2: create a container stack for <code>prometheus</code> and <code>grafana</code>","text":"<p>You can skip this if you already have Prometheus and Grafana installed.</p> <p>The example wil use a containerized (Docker) installation of Prometheus and Grafana. If you need to install Docker, please do so first. For a quick and painless way to get started, we suggest that you use this install script.</p> <p>On the machine where you will run Prometheus and Grafana, create a docker-compose file in the <code>/opt/grafana</code> directory:</p> <pre><code>sudo mkdir -p -m777 /opt/grafana/grafana/appdata /opt/grafana/prometheus/config /opt/grafana/prometheus/data\ncd /opt/grafana\ncat &gt; docker-compose.yml\n</code></pre> <p>Now paste in the following text *):</p> &lt;\u2010\u2010 Click the arrow to see the <code>docker-compose.yml</code> text <pre><code>version: '3.9'\n\nvolumes:\n  grafana:\n    driver: local\n    driver_opts:\n      type: none\n      device: \"/opt/grafana/grafana/appdata\"\n      o: bind\n  prom-config:\n    driver: local\n    driver_opts:\n      type: none\n      device: \"/opt/grafana/prometheus/config\"\n      o: bind\n  prom-data:\n    driver: local\n    driver_opts:\n      type: none\n      device: \"/opt/grafana/prometheus/data\"\n      o: bind\n\nservices:\n  grafana:\n    image: grafana/grafana-oss:latest\n    restart: unless-stopped\n    container_name: grafana\n    hostname: grafana\n    tty: true\n    # uncomment the following section and set the variables if you are exposing Grafana to the internet behind a rev web proxy:\n    environment:\n    # snuids-radar-panel plugin is needed for polar plots:\n      - GF_INSTALL_PLUGINS=snuids-radar-panel\n    # uncomment and set the following variables if you are exposing Grafana to the internet behind a rev web proxy:\n    #   - GF_SERVER_ROOT_URL=https://mywebsite.com/grafana/\n    #   - GF_SERVER_SERVE_FROM_SUB_PATH=true\n    ports:\n      - 3000:3000\n    volumes:\n      - grafana:/var/lib/grafana\n\n  prometheus:\n    image: prom/prometheus\n    container_name: prometheus\n    hostname: prometheus\n    restart: unless-stopped\n    tmpfs:\n      - /tmp\n    volumes:\n      - prom-config:/etc/prometheus\n      - prom-data:/prometheus\n    ports:\n      - 9090:9090\n</code></pre> <p>*) The volume definition structure is written this way purposely to ensure that the containers can place files in the persistent directories. Do not try to \"directly\" map volumes (<code>/opt/grafana/grafana/appdata:/var/lib/grafana</code>).</p> <p>Download and create Grafana and Prometheus for the first time with this command:</p> <pre><code>docker compose up -d\n</code></pre> <p>You should now be able to see the following directories:</p> <ul> <li><code>/opt/grafana/grafana/appdata</code></li> <li><code>/opt/grafana/prometheus/config</code></li> <li><code>/opt/grafana/prometheus/data</code></li> </ul>"},{"location":"advanced/grafana/#step-3-configuring-prometheus","title":"Step 3: Configuring Prometheus","text":"<p>Prometheus needs to be told where to look for the data from AIS-catcher. We will create a target prometheus configuration file that does this, please copy and paste the following. Make sure to replace <code>ip_of_AIS-catcher_machine:8100</code> with the IP address or hostname of the machine and the web port where <code>AIS-catcher</code> is running:</p> <pre><code>docker exec -it prometheus sh -c \"echo -e \\\"  - job_name: 'ais'\\n    static_configs:\\n      - targets: ['ip_of_AIS-catcher_machine:8100']\\\" &gt;&gt; /etc/prometheus/prometheus.yml\"\ndocker restart prometheus\n</code></pre> <p>(If you screw this up, do NOT re-run the command. Instead, try <code>sudo nano /opt/grafana/prometheus/config/prometheus.yml</code> and fix it that way.)</p>"},{"location":"advanced/grafana/#accessing-prometheus-and-grafana-via-your-browser","title":"Accessing Prometheus and Grafana via your browser","text":"<p>You should be able to point your web browser at:</p> <ul> <li><code>http://docker.host.ip.addr:9090/</code> to access the <code>prometheus</code> console.</li> <li><code>http://docker.host.ip.addr:3000/</code> to access the <code>grafana</code> console, use admin/admin as initial credentials, you should be prompted to change the password on first login.</li> </ul> <p>Remember to change <code>docker.host.ip.addr</code> to the IP address of the machine where Prometheus and Grafana are located.</p>"},{"location":"advanced/grafana/#configuring-data-source-and-dashboard-in-grafana","title":"Configuring data source and dashboard in Grafana","text":"<p>After you have logged into the <code>grafana</code> console the following manual steps are required to connect to <code>prometheus</code> as the data source. You must do this even if you are already connected to Prometheus for other purposes (such as for getting <code>readsb</code>/<code>ultrafeeder</code>/<code>tar1090</code> data)</p> <ol> <li>In Grafana, click <code>Configuration</code> (cogwheel) -&gt; <code>Data Sources</code></li> <li>Click <code>Add a new data source</code> in the main panel</li> <li>Click <code>Prometheus</code> from the list of options provided</li> <li>Input or select the following options, if the option is not listed, do not input anything for that option:</li> </ol> Option Input Name <code>ais</code> URL <code>http://prometheus:9090/</code> <p>Clicking <code>Save &amp; Test</code> should return a green message indicating success. The dashboard can now be imported with the following steps</p> <ol> <li>Hover over the <code>four squares</code> icon in the sidebar, click <code>+ Import</code></li> <li>Enter <code>18417</code> into the <code>Import via grafana.com</code> section and click <code>Load</code></li> <li>Select <code>readsb</code> from the bottom drop down list</li> <li>Click <code>Import</code> on the subsequent dialogue box</li> </ol> <p>At this point you should see a very nice dashboard, you can find it under <code>General</code> in the <code>Dashboards</code> section. An example for readsb:  </p> <p>Feel free to edit the dashboard or add more panels to your liking.</p>"},{"location":"advanced/troubleshooting/","title":"Troubleshooting","text":""},{"location":"advanced/troubleshooting/#a-note-on-device-sample-rates","title":"A note on device sample rates","text":"<p>AIS-catcher automatically sets an appropriate sample rate depending on your device but provides the option to overwrite this default using the <code>-s</code> switch. For performance reasons, you can decide to use a lower rate or improve the sensitivity by picking a higher rate than the default. The decoding model supports most sample rates above 96K but will internally upsample a signal, if needed, to one of the following rates: <pre><code>96K, 192K, 288K, 384K, 768K, 1536K, 3072K, 6144K, 12288K \n</code></pre> There is no efficiency advantage of using other rates than in this list apart from limiting the bandwidth and data throughput. Ideally, consider using an option from the list as it avoids upsampling (and additional noise) but it is not required and the model works well with other sampling rates.</p> <p>In recent versions of AIS-catcher you can use the <code>SOXR</code> or <code>libsamplerate</code> (SRC) library for downsampling. In fact, you can compare the four different downsampling approaches with a command like: <pre><code>AIS-catcher -r posterholt.raw -m 2 -m 2 -go FP_DS on  -m 2 -go SOXR on -m 2 -go SRC on -b -q -v\n</code></pre> which produces: <pre><code>[AIS engine v0.35 ]:                     41 msgs at 4.1 msg/s\n[AIS engine v0.35 FP-DS ]:               41 msgs at 4.1 msg/s\n[AIS engine v0.35 SOXR ]:                41 msgs at 4.1 msg/s\n[AIS engine v0.35 SRC]:                  41 msgs at 4.1 msg/s\n</code></pre> with the following timings: <pre><code>[AIS engine v0.35 ]:                     320.624 ms\n[AIS engine v0.35 FP-DS ]:               254.341 ms\n[AIS engine v0.35 SOXR ]:                653.716 ms\n[AIS engine v0.35 SRC]:                  3762.6 ms\n</code></pre> Some libraries will require significant hardware resources. The advice is to use the native built-in downsampling functionality but it is fun to experiment.</p> <p>The default downsampler uses a simple but efficient CIC5 filter. To mitigate some of the drawbacks of this method, version 0.39 onwards uses by default a simple droop compensator in the form of a fast 3 tap filter which can be switched off with the switch <code>-go DROOP off</code>.  The following results are from my home station running for a few hours with the various methods running in parallel and counting the number of messages:</p> Downsampler RTL-SDR @ 1536K AirSpy HF+ @ 192K SDRPlay RSPdx @ 3072K <code>-go DROOP off</code> 94219 16022 16530 <code>-go DROOP on</code> (default) 98176 (+4.20%) 16265 (+1.52%) 17190 (+3.99%) <code>-go SOXR on</code> (SOX downsampling) 97652 (+3.64%) 16209 (+1.17%) 17049 (+3.14%) <p>For reference, the command line instruction to test is: <pre><code>AIS-catcher  -v 10 -gr rtlagc on -m 2 -go droop off -m 2 -m 2 -go soxr on\n</code></pre> Please note that the runs are performed on different days over different time spans so this does not represent a comparison of devices but you can compare within a column.</p>"},{"location":"advanced/troubleshooting/#frequency-correction","title":"Frequency Correction","text":"<p>AIS-catcher tunes in on a frequency of 162 MHz. However, due to deviations in the internal oscillator of RTL-SDR devices, the actual frequency can be slightly off which will result in no or poor reception of AIS signals. It is therefore important to provide the program with the necessary correction in parts-per-million (ppm) to offset this deviation where needed. For most of our testing, we have used the RTL-SDR v3 dongle where in principle no frequency correction is needed as deviations are guaranteed to be small. For optimal reception though ensure you determine the necessary correction, e.g. see and provide this as input via the <code>-p</code> switch on the command line.</p> <p>If you are using a cheap RTL-SDR dongle that suffers from thermal drift (i.e. the required PPM correction drifts when the dongle is getting warmer), you can use the option <code>-go AFC_WIDE on</code> (which is the default model in recent releases). This is a relatively new model (per v0.48) that is less sensitive to frequency drift. You can switch off this model using the switch `-go AFC_WIDE off'. Running the new model setting and the previous default yields results that are more stable for frequency drift.</p> <p> </p>"},{"location":"advanced/troubleshooting/#frequency-shift-and-ppm","title":"Frequency Shift and PPM","text":"<p>The Web Viewer include plots of what is called the <code>frequency shift</code>. The <code>frequency shift</code> is the frequency correction from the central frequencies that AIS-catcher has used to decode the signal. This value is related to  the frequency offset of the RTL-SDR dongle as discussed above but also depends on the deviations in the equipment of the sender. The number is in ppm (parts-per-million, so 1ppm ~ 162 Hz) and in some tables and in screen output the quanity is refered to as <code>ppm</code>.  Long-running averages can be used to determine the optimal ppm correction for the receiver setup. These deviations can be corrected with <code>-p</code>. Deviations between -3 and +3 will usually not impact reception quality so for modern dongles with frequency stabilization no action is required.</p>"},{"location":"advanced/troubleshooting/#system-usb-performance","title":"System USB performance","text":"<p>On some laptops we observed that Windows was struggling with the high volume of data transferred from the RTL SDR dongle to the PC. I am not sure why (likely some driver issue as Ubuntu on the same machine worked fine) but it is worthwhile to check if your system supports transferring from the dongle at a sampling rate of 1.536 MHz with the following command which is part of the osmocom rtl-sdr package: <pre><code>rtl_test -s 1536000\n</code></pre> In case you observe a high number of lost data, the advice is to run AIS-catcher at a lower sampling rate for RTL SDR dongles: <pre><code>AIS-catcher -s 288000\n</code></pre> If your system allows for it you might opt to run <code>AIS-catcher</code> at a sample rate of <code>2304000</code>. </p>"},{"location":"advanced/troubleshooting/#known-issues","title":"Known issues","text":"<ul> <li>call of <code>rtlsdr_close</code>  on Windows can result in a crash. This is a problem with the rtlsdr library and not AIS-catcher. Solution: ensure you have the latest version of the library with this patch rtlsdr. For the shared Windows binaries I have included this version of the library in which I did a proper patch to fix this issue (essentially ensuring all usb transfers have been closed before freeing memory.</li> <li>pkg-config on Raspberry Pi returns <code>-L</code> as library path which results in a build error. Temporarily fixed by assuming lib is in standard location, long term fix: switch to cmake</li> <li>...</li> </ul>"},{"location":"advanced/validation/","title":"Validation","text":""},{"location":"advanced/validation/#experiment-at-the-meteotoren-in-scheveningen","title":"Experiment at the Meteotoren in Scheveningen","text":"<p>On August 25, 2022 I was given the opportunity to connect AIS-catcher for a few minutes to the antenna system at the Meteotoren which has a consistently high message rate and availability on MarineTraffic. </p> <p>We ran AIS-catcher on a laptop for 60 seconds and counted the number of messages for two RTL-SDR dongles (<code>-gr rtlagc on -T 60 -v 60</code>): </p> SDR Run 1 Run 2 RTL-SDR blog v3 1061 1255 ShipXplorer AIS dongle 1372 1315 <p>The ShipXplorer AIS dongle, as far as I can see, is an RTL-SDR with an additional SAW filter (TA0395A). The two sets of runs suggest some advantages of using a dongle with a filter. For reference, the AIS-catcher default decoder showed roughly a 30% improvement over an FM-based decoder in message count. An important factor of the high message rate at the Meteotoren though seems to stem from the location and the installed Yagi antenna. An experiment where we reran with a standard antenna placed at a slightly lower height reduced the message count to below 800 messages per second. </p> <p> </p> <p>Meteotoren feeds MarineTraffic with a Comar SLR350NI. According to the MarineTraffic statistics the message count just prior and just after the experiment was in the area of 1350 messages/minute. We did not observe a difference in range with the MarineTraffic statistics to conclude (see pictures - left is AIS-catcher reception for a few minutes visualized with AISdispatcher, right is a screenshot from MarineTraffic). These initial results are promising and it would be interesting to compare, in a more scientific manner, how open-source decoders with a generic RTL-SDR and dedicated AIS receiver hardware compare. Thank you Meteotoren for facilitating!</p>"},{"location":"advanced/validation/#experimenting-with-recorded-signals","title":"Experimenting with recorded signals","text":"<p>The functionality to receive radio input from <code>rtl_tcp</code> provides a route to compare different receiver packages on a deterministic input from a file. I have tweaked the callback function in <code>rtl_tcp</code> so that it instead sends over input from a file to an AIS receiver like <code>AIS-catcher</code> and <code>AISrec</code>. The same trick can be easily done for <code>rtl-ais</code>. The sampling rate of the input file was converted using <code>sox</code> to 240K samples/second for <code>rtl-tcp</code> and 1.6M samples/second for <code>rtl-ais</code>.  These programs, and others like <code>gnuais</code> have been the pioneers in the field of open-source AIS decoding and without them many related programs including this one would arguably not exist. The output of the various receivers was sent via UDP to AISdispatcher which removes any duplicates and counts messages. The results in terms of number of messages/distinct vessels:</p> File AIS-catcher v0.35 AIS-catcher v0.33 rtl-ais AISrec 2.208 (trial - super fast) AISrec 2.208 (pro - slow2) AISrec 2.301 (pro - slow2) Source Scheveningen 44/37 43/37 17/16 30/27 37/31 39/33 recorded @ 1536K with <code>rtl-sdr</code> (auto gain) Moscow 213/35 210/32 146/27 195/31 183/34 198/35 shared by user @ 1920K in discussion Vlieland 93/54 93/53 51/31 72/44 80/52 82/50 recorded @ 1536K with <code>rtl-sdr</code> (auto gain) Posterholt 39/22 39/22 2/2 13/12 31/21 31/20 recorded @ 1536K with <code>rtl-sdr</code> (auto gain) <p>Update 1: AISrec had a version update of 2.208 (October 23, 2021) with improved stability and reception quality and the table above has been updated to include the results from this recent version. </p> <p>Update 2: Feverlaysoft has kindly provided me with a license for version 2.208 of AISrec allowing access to additional decoding models. Some experimentation suggests that \"Slow2\" works best for these particular examples and has been included in the above overview.</p> <p>Update 3: AISrec had a version update to 2.301 (April 17, 2022) with reduced runtime and the table above has been updated to include the results from this recent version. </p>"},{"location":"advanced/validation/#some-stations-with-ais-catcher","title":"Some stations with AIS-catcher","text":"<p>A list of some stations mentioning using AIS-catcher:</p> <ul> <li>A caruna, Spain</li> <li>Asendorf, Germany</li> <li>Blackfield 01, UK</li> <li>Boston, US</li> <li>Chaos Consulting, Germany</li> <li>Edinburgh, UK</li> <li>Haiphong, Vietnam</li> <li>La Linea de la Concepcion, Spain</li> <li>Naha, Okinawa</li> <li>Oranjeplaat Arnemuiden, NL</li> <li>Pickwick Landing, USA</li> <li>SeaRange AIS receiver</li> <li>Seattle Capitol Hill, US</li> <li>Troguarat, France</li> <li>Tyres, Sweden</li> <li>Vancouver North, Canada with hardware description here.</li> <li>Vancouver West End, Canada</li> <li>Vasa, Finland</li> <li>Vernouillet, France</li> <li>Vlissingen, NL</li> </ul> <p>AIS-catcher connected to a commercial AIS receiver via serial port:</p> <ul> <li>Wren Road Rab 2</li> <li>Baltimore, Ireland</li> </ul>"},{"location":"configuration/model/","title":"Decoding Models","text":"<p>The command line provides the `-m```` option which selects the specific decoding model.  In the current version, 4 different receiver models are embedded for raw data samples:</p> <ul> <li>Default Model (<code>-m 2</code>): the default demodulation engine.</li> <li>Base Model (non-coherent) (<code>-m 1</code>): using FM discriminator model, similar to RTL-AIS (and GNUAIS/Aisdecoder) with tweaks to the Phase Locked Loop and main receiver filter (computed with a stochastic search algorithm).</li> <li>Standard Model (non-coherent) (<code>-m 0</code>): as the Base Model with brute force timing recovery.</li> <li>FM Discriminator model: (<code>`-m</code>3`) as the Standard Model but with the input already assumed to be the output of an FM discriminator. Hence no FM demodulation takes place which allows <code>AIS-catcher</code> to be used as GNUAIS and AISdecoder.</li> </ul> <p>The Default Model is the most time and memory consuming but experiments suggest it to be the most effective. In my home station, it improves message count by a factor 2 - 3. The reception quality of the Standard Model over the Base Model is more modest at the expense of roughly a 20% increase in computation time. Advice is to start with the Default Model, which should run fine on most modern hardware including a Raspberry 4B and then scale down to <code>-m 0</code>or even <code>-m 1</code>, if needed.</p> <p>Notice that you can execute multiple models in one run for benchmarking purposes but only the messages from the first model specified are displayed on screen. To benchmark different models specify <code>-b</code> for timing and/or <code>-v</code> to compare message count, e.g. <pre><code>AIS-catcher -s 1536K -r posterholt.raw -m 2 -m 0 -m 1 -q -b -v\n</code></pre> The program will run and summarize the performance (count and timing) of three decoding models (on a Raspberry Pi 4B): <pre><code>[AIS engine v0.35]:                      38 msgs at 6.3 msg/s\n[Standard (non-coherent)]:               4 msgs at 0.7 msg/s\n[Base (non-coherent)]:                   3 msgs at 0.5 msg/s\n</code></pre> <pre><code>[AIS engine v0.35]:                      1036.54 ms\n[Standard (non-coherent)]:               932.47 ms\n[Base (non-coherent)]:                   859.065 ms\n</code></pre> In this example the Default Model performs quite well in contrast to the Standard non-coherent engine with 38 messages identified versus 4 for the standard engine.  This is typical when there are messages of poor quality. However, it increases the decoding time a bit and has a slightly higher memory usage so needs more powerful hardware. Please note that the improvements seen for this particular file are an exception.</p> <p>For completeness, the decoder for NMEA input as text is activated by <code>-m 5</code> and <code>-m</code>4` is an experimental implementation to test new ideas. In practice, the user will not require these settings.</p>"},{"location":"configuration/output-options/","title":"Output Configuration","text":""},{"location":"configuration/output-options/#console","title":"Console","text":"<p>The output of NMEA messages to screen can be regulated with the <code>-o</code> switch. To suppress any messages to screen use <code>-o 0</code> or <code>-q</code>. This can be useful if you run AIS-catcher as a background process. To show only simple and pure NMEA lines, use the switch <code>-o 1</code> or <code>-n</code>. Example output: <pre><code>!AIVDM,1,1,,B,33L=LN051HQj3HhRJd7q1W=`0000,0*03\n</code></pre> By default, and using the command <code>-o 2</code>, AIS-catcher displays NMEA messages with some additional information: <pre><code>!AIVDM,1,1,,B,33L=LN051HQj3HhRJd7q1W=`0000,0*03 ( MSG: 3, REPEAT: 0, MMSI: 230907000, signalpower: -44.0, ppm: 0, timestamp: 20220729191340)\n</code></pre> This same information but wrapped in JSON to facilitate further processing downstream is generated with the switch <code>-o 3</code> : <pre><code>{\"class\":\"AIS\",\"device\":\"AIS-catcher\",\"channel\":\"B\",\"rxtime\":\"20220729191502\",\"signalpower\":-44.0,\"ppm\":0,\"mmsi\":230907000,\"type\":3,\"nmea\":[\"!AIVDM,1,1,,B,33L=LN051HQj3HhRJd7q1W=`0000,0*03\"]}\n</code></pre> And finally, full decoding of the AIS message is activated via <code>-o 5</code>: <pre><code>{\"class\":\"AIS\",\"device\":\"AIS-catcher\",\"rxtime\":\"20220729191610\",\"scaled\":true,\"channel\":\"B\",\"nmea\":[\"!AIVDM,1,1,,B,33L=LN051HQj3HhRJd7q1W=`0000,0*03\"],\"signalpower\":-44.0,\"ppm\":0.000000,\"type\":3,\"repeat\":0,\"mmsi\":230907000,\"status\":0,\"status_text\":\"Under way using engine\",\"turn\":18,\"speed\":8.800000,\"accuracy\":true,\"lon\":24.915239,\"lat\":60.148106,\"course\":231.000000,\"heading\":230,\"second\":52,\"maneuver\":0,\"raim\":false,\"radio\":0}\n</code></pre></p> <p>Meta data is not calculated by default to keep the program as light as possible when running as a server on low spec devices but can be activated with the <code>-M</code> switch. The calculation of signal power (in dB) and applied frequency correction (in ppm) are activated with  <code>-M D</code>. NMEA messages are timestamped with  <code>-M T</code> and additional country information from the station derived from the MMSI is included in JSON output with <code>-M M</code>. </p> <p>There are many libraries for decoding AIS messages in NMEA format to JSON format. I encourage you to use your favorite library. Some excellent choices include libais, gpsdecode and pyais.</p>"},{"location":"configuration/output-options/#http","title":"HTTP","text":"<p>Some cloud services collecting AIS data prefer messages to be periodically posted via the HTTP protocol, for example, APRS.fi. As per version 0.29, AIS-catcher can do this directly via the <code>-H</code> switch. For example: <pre><code>AIS-catcher -r posterholt.raw -v 60 -H http://localhost:8000 INTERVAL 10 ID MyStation\n</code></pre> will post JSON with the following layout every 10 seconds:</p> <p><pre><code>{\n    \"protocol\": \"jsonaiscatcher\",\n    \"encodetime\": \"20221102171325\",\n    \"stationid\": \"MyStation\",\n    \"receiver\":\n        {\n        \"description\": \"AIS-catcher v0.39\",\n        \"version\": 39,\n        \"engine\": \"Base (non-coherent)\",\n        \"setting\": \"droop ON fp_ds OFF \"\n        },\n    \"device\":\n        {\n        \"product\": \"FILE-RAW\",\n        \"vendor\": \"\",\n        \"serial\": \"\",\n        \"setting\": \"rate 1536K file posterholt.raw format CU8\"\n        },\n    \"msgs\": [ \n        {\"class\":\"AIS\",\"device\":\"AIS-catcher\",\"rxtime\":\"20221102171324\",\"scaled\":true,\"channel\":\"A\",\"nmea\":[\"!AIVDM,1,1,,A,13`fL1PP140KCELMBO7SS?wH0@Jv,0*50\"],\"ppm\":0.000000,\"type\":1,\"mmsi\":244030470,\"status\":0,\"status_text\":\"Under way using engine\",\"speed\":6.800000,\"accuracy\":false,\"lon\":5.964237,\"lat\":51.185970,\"course\":90.800003,\"repeat\":0,\"second\":44,\"maneuver\":0,\"raim\":false,\"radio\":67262}\n    ]\n}\n</code></pre> We can use this functionality to submit data to APRS.fi directly without the need of middleware: <pre><code>AIS-catcher -H http://aprs.fi/jsonais/post/secret-key ID callsign PROTOCOL aprs INTERVAL 30 -q\n</code></pre> Where <code>secret-key</code> should be your password and <code>callsign</code> your callsign.  The <code>PROTOCOL</code> setting instructs AIS-catcher to submit JSON in a form that is accepted by APRS.fi which is a multi-form HTTP message. The response from the server will be printed on screen, if you want to show this message only in case of an error, add <code>RESPONSE OFF</code> to the argument.</p> <p>Another example of this HTTP feed functionality is to provide data to Chaos Consulting without the need to install any additional scripts. The Chaos Consulting server has been set up so that it can read the AIS-catcher JSON format as per above: <pre><code>AIS-catcher -H https://ais.chaos-consulting.de/shipin/index.php USERPWD Station:Password GZIP on INTERVAL 5\n</code></pre> Notice that this server requires authentication with a station name and password and accepts JSON with gzip encoding which significantly reduces bandwidth. </p> <p>Important: to use and build AIS-catcher with HTTP support, please install the following libraries before running cmake: <pre><code>sudo apt install libssl-dev zlib1g-dev\n</code></pre> This step is only required if you want to ZIP content and post data to secure servers.</p> <p>The supported protocol switches are <code>AISCATCHER</code> (default), <code>MINIMAL</code> (NMEA lines and metadata), <code>LINES</code> (one JSON message per line), <code>APRS</code> (to submit to APRS.fi).</p>"},{"location":"configuration/output-options/#summary-settimgs","title":"Summary Settimgs","text":"Setting Type Default Description URL string empty Target HTTP endpoint URL USERPWD string empty Authentication credentials STATIONID/ID/CALLSIGN string empty Station identifier INTERVAL integer 60 Post interval in seconds (1-86400) TIMEOUT integer 10 Connection timeout in seconds (1-30) GZIP boolean false Enable GZIP compression RESPONSE boolean true Show response messages PROTOCOL enum \"AISCATCHER\" Protocol type (\"AISCATCHER\", \"MINIMAL\", \"AIRFRAMES\", \"LIST\", \"APRS\") LAT float 0.0 Station latitude LON float 0.0 Station longitude DEVICE_SETTING string \"N/A\" Device settings GROUPS_IN integer - Number of input groups"},{"location":"configuration/output-options/#udp","title":"UDP","text":"<p>AIS messages can be forwarded between applications over UDP via the <code>-u</code> switch and as a TCP Client using <code>-P</code>. To send data to a port at a specific server, we can use: <pre><code>AIS-catcher -u 192.168.1.235 4002\n</code></pre> The command accepts additonal parameters, e.g. to send NMEA messages packaged in a JSON object: <pre><code>AIS-catcher -u 192.168.1.235 4002 JSON on\n</code></pre> Most external programs will not be able to accept these JSON-packaged NMEA strings. It is a way to transfer received messages between AIS-catcher instances without losing metadata like the timestamp, ppm correction and signal level. These are not captured in the standard NMEA strings.  Another option for UDP sending via <code>-u</code> is <code>BROADCAST on/off</code> to enable sending to broadcast addresses.</p>"},{"location":"configuration/output-options/#summary-settimgs_1","title":"Summary Settimgs","text":"Setting Type Default Description HOST string empty Target UDP host address PORT string empty Target UDP port JSON boolean false Enable JSON output format BROADCAST boolean false Enable broadcast mode RESET integer -1 Socket reset interval in minutes (1-1440) UUID string empty Unique identifier (must be valid UUID) GROUPS_IN integer - Number of input groups"},{"location":"configuration/output-options/#tcp-client","title":"TCP Client","text":"<p>To send raw NMEA as a TCP Client connecting to a listener: <pre><code>AIS-catcher -P 192.168.1.235 4002\n</code></pre> In this case, AIS-catcher acts as a TCP client and connects to the remote listener at 192.168.1.239 port 4002. </p>"},{"location":"configuration/output-options/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description HOST string empty Target TCP server host PORT string empty Target TCP server port KEEP_ALIVE boolean false Enable TCP keep-alive JSON boolean false Enable JSON output format PERSIST boolean true Enable persistent connection UUID string empty Unique identifier (must be valid UUID) GROUPS_IN integer - Number of input groups"},{"location":"configuration/output-options/#tcp-server","title":"TCP Server","text":"<p>You can also set up AIS-catcher as a TCP listener itself for sending NMEA messages, i.e. the program acts as a TCP server where at most 64 clients can connect to and read NMEA lines: <pre><code>AIS-catcher -S 5011\n</code></pre></p>"},{"location":"configuration/output-options/#summary-settings_1","title":"Summary Settings","text":"Setting Type Default Description PORT integer 5010 Listen port (0-65535) TIMEOUT integer - Connection timeout JSON boolean false Enable JSON output format GROUPS_IN integer - Number of input groups"},{"location":"configuration/output-options/#filtering-messages","title":"Filtering Messages","text":"<p>AIS-catcher has functionality to filter UDP, HTTP and screen output on message type, e.g. send only messages of type 1, 2, 3, 5, 18, 19, 24 and 27 over UDP: <pre><code>AIS-catcher -u 127.0.0.1 10110 FILTER on ALLOW_TYPE 1,2,3,5,18,19,24,27\n</code></pre> or remove message type 6 and 8: <pre><code>AIS-catcher -u 127.0.0.1 10110 FILTER on BLOCK_TYPE 6,8\n</code></pre> Do not use spaces in the comma-separated message type list as it confuses the command line. Filtering will only take effect with the filter switched to <code>ON</code> (default <code>OFF</code>) and the filter needs to be defined per <code>-u</code> switch (or <code>-H</code> and <code>-o</code>).</p> <p>In my home station, I am using this to control the size of the log file but still capture messages for inspection later. I am running with the command line parameter: <pre><code>AIS-catcher -o 5 filter on block_type 1,2,3,4,5,9,18,19,21,24\n</code></pre> Message type 8 is region-specific. If you encounter any messages in the wild that might be interesting for AIS-catcher to parse, please share in the Issue section and we can see if it is worthwhile to extend the JSON generator. </p> <p>Note: filtering for messages to screen can only be set on the command line and not in the JSON configuration file at this stage. UDP filtering is available in the JSON configuration file.</p>"},{"location":"configuration/overview/","title":"AIS-catcher Architecture","text":"<p>AIS-catcher follows a modular architecture that can scale from simple to complex configurations. Let's explore both scenarios:</p>"},{"location":"configuration/overview/#basic-architecture","title":"Basic Architecture","text":"<p>In its simplest form, AIS-catcher processes data through three main stages:</p> <pre><code>flowchart LR\n    I[Input] --&gt;|Raw Data| M[Model]\n    M --&gt;|Decoded Messages| O[Output]\n\n    style I fill:#e3f2fd,stroke:#1976d2\n    style M fill:#e8f5e9,stroke:#2e7d32\n    style O fill:#fff3e0,stroke:#e65100\n\n    click I \"input\" _blank\n    click M \"model\" _blank\n    click O \"output\" _blank</code></pre> <p>Input: Single data source (e.g., an SDR device) Model: Message decoding and processing Output: Delivery of decoded messages (e.g., to screen)</p>"},{"location":"configuration/overview/#advanced-architecture","title":"Advanced Architecture","text":"<p>For more complex setups, AIS-catcher supports multiple inputs with input-specific models:</p> <pre><code>flowchart LR\n    %% Input 1 with two models\n    I1[Input 1] --&gt; M1[Model A1]\n    I1 --&gt; M2[Model A2]\n\n    %% Input 2 with one model\n    I2[Input 2] --&gt; M3[Model B]\n\n    %% Models to Outputs\n    M1 --&gt; O1[Output 1]\n    M1 --&gt; O2[Output 2]\n    M2 --&gt; O2\n    M2 --&gt; O3[Output 3]\n    M3 --&gt; O2\n    M3 --&gt; O3\n\n    %% Styling\n    style I1 fill:#e3f2fd,stroke:#1976d2\n    style I2 fill:#e3f2fd,stroke:#1976d2\n    style M1 fill:#e8f5e9,stroke:#2e7d32\n    style M2 fill:#e8f5e9,stroke:#2e7d32\n    style M3 fill:#fce4ec,stroke:#c2185b\n    style O1 fill:#fff3e0,stroke:#e65100\n    style O2 fill:#fff3e0,stroke:#e65100\n    style O3 fill:#fff3e0,stroke:#e65100\n\n    click I1 \"input\" _blank\n    click I2 \"input\" _blank\n    click M1 \"model\" _blank\n    click M2 \"model\" _blank\n    click O1 \"output\" _blank\n    click O2 \"output\" _blank\n    click O3 \"output\" _blank</code></pre> <p>In this advanced setup: Inputs</p> <p>Multiple input sources operate independently Each input can use multiple specialized models Examples: RTL-SDR, Airspy, network streams, files</p> <p>Models</p> <p>Input 1 uses two parallel models (A1 and A2) Input 2 uses a single dedicated model (B) Models are optimized for their specific input source</p> <p>Outputs</p> <p>Each model can send data to multiple outputs Outputs can receive data from multiple models Examples: screen display, file logging, network streaming, database storage</p> <p>Configuration Each component can be configured independently:</p> <p>Input Configuration: Configure devices, files, and network sources Model Configuration: Adjust signal processing and decoding parameters Output Configuration: Set up various output formats and destinations</p> <p>This modular architecture allows for flexible setups ranging from simple single-channel monitoring to complex multi-receiver systems with diverse output requirements.</p>"},{"location":"configuration/input/NMEA2000/","title":"Input over NMEA2000 format","text":""},{"location":"configuration/input/airspy/","title":"AirSpy","text":""},{"location":"configuration/input/airspy/#airspy-minir2","title":"AirSpy Mini/R2","text":"AIS-catcher -d serial code -gm setting value         ...      <p>The AirSpy Mini/R2 requires careful gain configuration as described here.  As outlined in that reference there are three different gain modes: linearity, sensitivity and so-called free. These can be set via the <code>-gm</code>switch when using the AirSpy. </p> <p>We can activate 'linearity' mode with gain <code>10</code>using the following <code>AIS-catcher</code> command line:</p> <p><pre><code>AIS-catcher -gm linearity 10\n</code></pre> Settings can also be provided per stage: <pre><code>AIS-catcher -gm lna AUTO vga 12 mixer 12\n</code></pre> More guidance on setting the gain model and levels can be obtained in the mentioned link.</p>"},{"location":"configuration/input/airspy/#summary-setings","title":"Summary Setings","text":"Setting Type Default Description SENSITIVITY integer - Sensitivity gain mode (0-21) LINEARITY integer 17 Linearity gain mode (0-21) VGA integer 10 VGA gain in Free mode (0-14) MIXER auto/integer auto/10 Mixer gain/AGC in Free mode (0-14 or AUTO) LNA auto/integer auto/10 LNA gain/AGC in Free mode (0-14 or AUTO) BIASTEE boolean false Enable/disable bias tee power"},{"location":"configuration/input/airspyhf/","title":"AirSpy HF+","text":""},{"location":"configuration/input/airspyhf/#airspy-hf","title":"AirSpy HF+","text":"AIS-catcher -d serial code -gh setting value         ...      <p>Gain settings specific for the AirSpy HF+ can be set on the command line with the <code>-gh</code> switch. The following command switches off the preamp:</p> <pre><code>AIS-catcher -gh preamp OFF\n</code></pre> <p>Please note that only AGC mode is supported so there are limited options.</p>"},{"location":"configuration/input/airspyhf/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description PREAMP boolean false Enable/disable preamplifier THRESHOLD/ enum \"LOW\" AGC threshold setting (\"HIGH\" or \"LOW\")"},{"location":"configuration/input/file/","title":"Input from file and stdin","text":"AIS-catcher -r filename -ga setting value         ...      AIS-catcher -r format filename -ga setting value         ...      <p>AIS-catcher can read from a file with the switch <code>-r</code> followed by the filename and with a <code>.</code> or <code>stdin</code> it reads from stdin, e.g. <code>-r .</code>. <pre><code>AIS-catcher -r .\n</code></pre></p> <p>The following command records a signal with <code>rtl_sdr</code> at a sampling rate of 288K Hz and pipes it to AIS-catcher for decoding: <pre><code>rtl_sdr -s 288K -f 162M  - | AIS-catcher -r . -s 288K -v\n</code></pre> The same mechanism can be used to apply other transformations on the signal, e.g. downsampling with <code>sox</code>: <pre><code>sox -c 2 -r 1536000 -b 8 -e unsigned -t raw posterholt.raw -t raw -b 16 -e signed -r 96000 - |AIS-catcher -s 96K -r CS16 . -v\n</code></pre> For reference, as per version 0.36, AIS-catcher has the option to use the internal sox library directly if included in your build: <pre><code>AIS-catcher -s 1536K -r CU8 posterholt.raw -v -go SOXR on \n</code></pre> Default assumption is that the file is in raw unsigned 8-bit IQ format. Alternative formats can be set via <code>-gr</code> (see below) and can even include NMEA strings in text input. </p>"},{"location":"configuration/input/file/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description FILE string - Input file path or \"stdin\" for standard input LOOP boolean false Enable continuous file looping"},{"location":"configuration/input/hackrf/","title":"HackRF","text":"AIS-catcher -d serial code -gf setting value         ...      <p>Settings specific for the HackRF can be set on the command line with the <code>-gf</code> switch, e.g.:</p> <pre><code>AIS-catcher -gf lna 16 vga 16 preamp OFF\n</code></pre>"},{"location":"configuration/input/hackrf/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description LNA integer 8 LNA (RF) gain in dB (0-40, rounded to multiples of 8) VGA integer 20 VGA (IF) gain in dB (0-62, rounded to multiples of 2) PREAMP boolean false Enable/disable preamplifier"},{"location":"configuration/input/overview/","title":"Input Configuration","text":""},{"location":"configuration/input/overview/#device-selection-and-discovery","title":"Device Selection and Discovery","text":"<p>To list all connected compatible hardware devices: <pre><code>AIS-catcher -l\n</code></pre> To select a specific device, use either:</p> <p><code>-d:N</code> where N is the device number from the list <code>-d SERIAL</code> where SERIAL is the device's serial number</p>"},{"location":"configuration/input/overview/#universal-settings","title":"Universal Settings","text":"<p>The following settings apply across all input devices:</p> Setting Command Line Key Description Range Default Sample Rate <code>-s RATE</code> SAMPLE_RATE Sampling rate in Hz 0-20,000,000 Device-specific Bandwidth <code>-a BW</code> BANDWIDTH Tuner bandwidth in Hz 0-1,000,000 0 (auto) Frequency Correction <code>-p PPM</code> FREQ_OFFSET Frequency correction in PPM -150 to +150 0 Data Type FORMAT Data type for input source"},{"location":"configuration/input/overview/#multiple-device-input","title":"Multiple device input","text":"<p>The latest version can run with multiple receivers in parallel. For example, one dongle for channel A+B and one dongle for channel C+D. To run with two receivers in parallel you can use a command like: <pre><code>AIS-catcher -d serial1 -v -d serial2 -c CD -v -N 8100\n</code></pre></p> <p>These functions allow AIS-catcher to receive input from an AIS receiver over UDP and a connected GPS device in parallel, e.g.: <pre><code>AIS-catcher -e 38400 /dev/serial/by-id/usb-u-blox_AG_-_www.u-blox.com_u-blox_7_-_GPS_GNSS_Receiver-if00 -x 192.168.1.235 4002 -N 8100 share_loc on\n</code></pre> The first receiver (<code>-e ...</code>) reads from a GPS device that is connected and emits NMEA lines. The second receiver (<code>-x</code>) reads AIS NMEA lines at port 4002 coming from another instance of AIS-catcher. The station is now plotted on the map with the location as provided by the GPS coordinates. The web page has an option to fix the center of the map on the location of the receiving station (right-click on the station icon on the map).</p>"},{"location":"configuration/input/overview/#further-documentation","title":"Further Documentation","text":"<p>For detailed information about specific devices and input types, please refer to the following documentation:</p>"},{"location":"configuration/input/overview/#sdr-devices","title":"SDR Devices","text":"<ul> <li>RTL-SDR Configuration</li> <li>AirSpy Configuration</li> <li>AirSpy HF+ Configuration</li> <li>HackRF Configuration</li> <li>SDRPlay Configuration</li> <li>SoapySDR Configuration</li> </ul>"},{"location":"configuration/input/overview/#network-and-file-input","title":"Network and File Input","text":"<ul> <li>TCP Input</li> <li>UDP Input</li> <li>SpyServer Input</li> <li>File Input</li> <li>WAV File Input</li> </ul>"},{"location":"configuration/input/overview/#other-inputs","title":"Other Inputs","text":"<ul> <li>Serial Port Configuration</li> <li>NMEA2000 Configuration</li> </ul> <p>See the Input Overview for a complete introduction to all input options.</p>"},{"location":"configuration/input/rtlsdr/","title":"RTL SDR","text":"AIS-catcher -d serial code -gr setting value         ...      <p>Gain and other settings specific to the RTL SDR can be set on the command line with the <code>-gr</code> switch. For example, the following command sets the tuner gain to +33.3 and switches the RTL AGC on:</p> <pre><code>AIS-catcher -gr tuner 33.3 rtlagc ON\n</code></pre> <p>Settings are not case-sensitive.</p>"},{"location":"configuration/input/rtlsdr/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description TUNER auto/float auto/33.0 Tuner gain/AGC (0-50 dB or AUTO) RTLAGC boolean true Enable/disable RTL2832U AGC BIASTEE boolean false Enable/disable bias tee power BUFFER_COUNT integer 24 Number of FIFO buffers (1-100)"},{"location":"configuration/input/sdrplay/","title":"SDRPlay RSP1/RSP1A/RSPDX (API 3.x)","text":"AIS-catcher -d serial code -gs setting value         ...      <p>Settings specific for the SDRPlay  can be set on the command line with the <code>-gs</code> switch, e.g.: <pre><code>AIS-catcher -gs lnastate 5\n</code></pre></p>"},{"location":"configuration/input/sdrplay/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description AGC boolean false Enable/disable Automatic Gain Control LNASTATE integer 0 LNA state/gain (0-9) GRDB integer 32 RF gain reduction in dB (0-59) ANTENNA char 'A' Antenna selection (A/B/C) for RSPdx models"},{"location":"configuration/input/serial/","title":"Serial Port","text":""},{"location":"configuration/input/serial/#serial-port","title":"Serial Port","text":"AIS-catcher -e port -ge setting value         ...      AIS-catcher -e baudrate port -ge setting value         ...      <p>Settings specific for reading NMEA lines from a serial port can all be set with the <code>e</code> switch fow now, e.g. on Linux: <pre><code>AIS-catcher -e 368400 /dev/serial1\n</code></pre></p> <p>To dump the raw input from the serial device on-screen use <code>-</code>ge print on`.</p>"},{"location":"configuration/input/serial/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description BAUDRATE integer 38400 Serial port speed PORT string \"\" Serial port device path/name PRINT boolean false Enable debug printing of received data"},{"location":"configuration/input/soapysdr/","title":"SoapySDR","text":"<p>In general we recommend to use the built-in drivers for supported SDR  devices. However, AIS-catcher also supports a wide variety of other devices via the SoapySDR library which is an independent SDR support library. SoapySDR is not included by default in the standard build. To enable SoapySDR support follow the build instructions below but replace the <code>cmake</code> call with: <pre><code>cmake .. -DSOAPYSDR=ON\n</code></pre> The result is that AIS-catcher adds a few additional \"devices\" to the device list (<code>-l</code>): a generic SoapySDR device and one device for each receiving channel for each device, e.g. with one RTL-SDR dongle connected this would look like: <pre><code>Found 3 device(s):\n0: Realtek, RTL2838UHIDIR, SN: 00000001\n1: SOAPYSDR, 1 device(s), SN: SOAPYSDR\n2: SOAPYSDR, driver=rtlsdr,serial=00000001, SN: SCH0-00000001\n</code></pre> To start streaming via Soapy we can use: <pre><code>AIS-catcher -d SCH0-00000001\n</code></pre> Note that the serial number has a prefix of <code>SCH0</code> (short for SoapySDR Channel 0) to distinguish it from the device accessed via the native SDR library. Alternatively, we can use a device-string to select the device:  <pre><code>AIS-catcher -d SOAPYSDR -gu device \"serial=00000001,driver=rtlsdr\" -s 1536K\n</code></pre> Stream arguments and gain arguments can be set similarly via <code>-gu STREAM</code> and <code>-gu GAIN</code> followed by an argument string (if it contains spaces use \"\"). Please note that SoapySDR does not signal if the input parameters for the device are not set properly. We therefore added the <code>-gu PROBE on</code> switch which displays the actual settings used, e.g. <pre><code>AIS-catcher -d SOAPYSDR -s 1536K -gu GAIN \"TUNER=37.3\" PROBE on SETTINGS \"biastee=true\"\n</code></pre> To complete the example, this command also sets the tuner gain for the RTL-SDR to 37.3 and switches on the bias-tee via the SETTING command giving access to the device's extra settings.</p> <p>If the sample rates for a device are not supported by AIS-catcher, the SOXR functionality could be considered (e.g. <code>-go SOXR on</code>). Again, we advise to use the built-in drivers and include resampling functionality where possible.  </p>"},{"location":"configuration/input/soapysdr/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description DEVICE string \"\" SoapySDR device arguments string GAIN string - Gain settings in key=value pairs STREAM string - Stream arguments in key=value pairs SETTING string - Device settings in key=value pairs ANTENNA string \"\" Antenna selection AGC boolean true Enable/disable Automatic Gain Control PROBE boolean false Print actual device settings CH integer 0 Channel selection (0-32)"},{"location":"configuration/input/spyserver/","title":"SpyServer","text":"AIS-catcher -y url -gy setting value         ...      AIS-catcher -y url port -gy setting value         ...      <p>For SpyServer  use the <code>-y</code> switch like: <pre><code>AIS-catcher -y 192.168.1.235 5555 -gy GAIN 14\n</code></pre></p>"},{"location":"configuration/input/spyserver/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description URL string - Full connection URL (sdr://host:port) HOST string \"localhost\" SpyServer host address PORT string \"1234\" SpyServer port GAIN float 0.0 Tuner gain (0-50 dB) TIMEOUT integer 2 Connection timeout in seconds"},{"location":"configuration/input/tcp/","title":"Input over TCP","text":"AIS-catcher -t url -gt setting value         ...      AIS-catcher -t host port -gt setting value         ...      AIS-catcher -t protocol host port -gt setting value         ...      <p>Input over TCP with various protocols can be done with <code>-t</code> followed by the URL of the server. As an example, to read raw NMEA from a TCP server we can use: <pre><code>AIS-catcher -t txt://192.168.1.120:5011\n</code></pre></p> <p>Various protocols are supported as input. The table below lists the available protocols and their descriptions:</p> Protocol Description <code>txt</code> Raw NMEA text. <code>gpsd</code> GPSD server input. <code>rtltcp</code> Connecting to an RTL-TCP server. <code>mqtt</code> MQTT with JSON payload. <code>wsmqtt</code> MQTT with JSOP payload over WebSockets. <p>Use the appropriate protocol based on your server's configuration and data format. </p>"},{"location":"configuration/input/tcp/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description URL string - Full connection URL including protocol, host, port, etc PROTOCOL enum \"RTLTCP\" Connection protocol (RTLTCP, MQTT, GPSD, WS, WSMQTT, TXT, NONE) HOST string - Remote host address PORT string - Remote port number"},{"location":"configuration/input/udp/","title":"Input as UDP server","text":"AIS-catcher -x server port <p>You can receive NMEA input via a built-in UDP server: <pre><code>AIS-catcher -x 192.168.1.235 4002\n</code></pre></p>"},{"location":"configuration/input/udp/#summary-settings","title":"Summary Settings","text":"Setting Type Default Description PORT string - UDP server port to listen on SERVER string - UDP server address to bind to"},{"location":"configuration/input/wav/","title":"Input as WAV-file","text":""},{"location":"configuration/output/mqtt/","title":"MQTT Integration","text":"<p>AIS-catcher can push AIS messages via the MQTT protocol (3.1.1) to a broker with the <code>-Q</code> switch. An example with all settings: <pre><code>AIS-catcher -Q mqtt://username:password@127.0.0.1:1883 CLIENT_ID aiscatcher QOS 0 TOPIC data/ais MSGFORMAT JSON_NMEA\n</code></pre> We can also read as input from a MQTT broker: <pre><code>AIS-catcher -t mqtt://127.0.0.1:1883 -gt TOPIC data/ais USERNAME admin PASSWORD admin\n</code></pre></p>"},{"location":"configuration/output/nmea2000/","title":"NMEA2000 input and output via SocketCAN","text":"<p>In v0.56 we introduced \"Experimenter Mode\" for NMEA2000 input and output via socketCAN on Linux. To properly handle the mechanics of a NMEA2000 network, the NMEA2000 library by  Timo Lappalainen is required, build AIS-catcher in the main directory with:   <pre><code>./scripts/build-NMEA2000.sh\n</code></pre>   This downloads and builds the NMEA2000 library and includes it in the AIS-catcher build process.   The following example creates a UDP server listening on port 4002 and forwards these messages to the CAN-bus (<code>vcan0</code>):   <pre><code>AIS-catcher -x 192.168.1.120 4002 -I vcan0  \n</code></pre>   Current implementation handles AIS messages 1-5, 9, 11, 14, 18, 19, 21, 24 and have been very high-level tested with the excellent CANboat utilities and a virtual network.   Another option is to have AIS-catcher read AIS messages on the NMEA2000 canbus:   <pre><code>AIS-catcher -i vcan0\n</code></pre>   Note that this only works on Linux with socketCAN support and has not been tested properly. Obviously, the program is not certified by NMEA and is not build for connecting it to a NMEA2000 network on a boat. It is for the experimenters wanting to learn and play with networks and AIS.</p> <p>## Summary Settings Input</p> Setting Type Default Description INTERFACE string \"can0\" CAN bus interface name"},{"location":"configuration/output/nmea2000/#summary-settings-output","title":"Summary Settings Output","text":"Setting Type Default Description NETWORK string \"\" CAN network interface name"},{"location":"configuration/output/web-viewer/","title":"Web Viewer","text":"<p>AIS-catcher includes a simple web interface. A live demo is available for East Boston, US. The web interface gratefully uses the following libraries: chart.js, chart.js annotation plugin, leaflet, Material Design Icons, tabulator, marked and flag-icons. </p> <p>Make sure you use the latest version and start the web viewer as follows: <pre><code>AIS-catcher -N 8100\n</code></pre> where <code>8100</code> is the port number. If your machine network name is raspberrypi, e.g.,  then enter <code>raspberrypi:8100</code> in your browser.  On the web page, you will find several sections with information related to the station and received messages.</p> <p>For users wishing to include a station name and a link to an external website in the Statistics section: <pre><code>AIS-catcher -N STATION Southwood STATION_LINK http://example.com\n</code></pre> This could be a useful option if you want to offer the interface externally. To display the reception range and distances from your station, provide the program with the station coordinates and permission to share the location with the web viewer: <pre><code>AIS-catcher -N LAT 50 LON 3.141592 SHARE_LOC on\n</code></pre> The last option <code>share_loc</code> (default is off) will allow the web viewer to access and display the location.</p> <p>The user can make a page in markdown format. The content will be shown in the About tab of the web viewer: <pre><code>AIS-catcher -N 8100 ABOUT about.md\n</code></pre> All these options can be captured in the configuration file (in a section with name <code>server</code>), see below. </p>"},{"location":"configuration/output/web-viewer/#menu-structure","title":"Menu structure","text":"<p>The main menu behind the hamburger icon in the top left corner navigates between different functional areas. Context-sensitive menus, accessible through right-click, long press on iOS, or the vertical dot icon on the map, offer more functionalities. Here you can set options like activating the \"dark mode\" theme, displaying the station range on the map, locking/unlocking the map center, toggling text-only ship labels, decluttering ship labels, and viewing details of the last message received from a vessel, amongst others.</p>"},{"location":"configuration/output/web-viewer/#visualization","title":"Visualization","text":"<p>When AIS-catcher receives data containing a vessel's dimensions but can not determine the direction it is pointing (heading), it will display a circle that accommodates the ship's dimensions regardless of heading. Missing heading information is common for Class B ships. If there's a decent approximation available for the heading, such as course-over-ground above certain speeds, it will be used. Shapes plotted using this approximation will have a dashed border, indicating incomplete information. An example is the USS Constitution docked in Boston.</p> <p> </p> <p>In the map section, clicking on a vessel will open a  ship card with details of the vessel. For smaller screens it can be minimized in the top bar (via the <code>^</code> symbol or by clicking on the header bar). The ship card will open minimized on mobile devices. In its maximized form, users can choose which rows will be visible in the minimized state. Additional options, such as looking up the vessel on aggregator sites, are available by clicking the three-dot icon on the ship card header.</p>"},{"location":"configuration/output/web-viewer/#validation","title":"Validation","text":"<p>The web-interface shows a \"validation\" indication at the left border of the ship card header.</p> <p> </p> <p>AIS-catcher analyzes an enormous stream of bits per day for both AIS channels (2 to the power 33 to be precise). To avoid erroneous messages, the AIS system employs a 16-bit CRC and matching of other bit patterns. Unfortunately, purely statistically this cannot prevent that there will be an occasional technically correct but nonsense message. These are typically easy to recognize (e.g. looking at the signal level, and location on the map) and aggregator sites like MarineTraffic will filter these out. </p> <p>To reliably measure the reception range for the station in the web interface, AIS-catcher has implemented a \"validation function\" that checks the location of the vessel for consistency between messages and flags if there is an inconsistency. Practically speaking, if we receive a position from an MMSI that is relatively close to the last received position, the \"validation\" indicator will be green and the distance to the station will be included to determine the station range. Please note that messages within 50 NMi from the receiving station will always be included for range setting. The validation indicator will be grey if validation for the location cannot be performed and red if it is not successful. </p>"},{"location":"configuration/output/web-viewer/#plots","title":"Plots","text":"<p>The Plot section contains several visualizations to assess the performance of the receiver:</p> <p> </p> <p>Restarting AIS-catcher typically erases history in the graphs. To retain plot \"state\" and backup the information to a file use the following:</p> <p><pre><code>AIS-catcher -N 8100 FILE stat.bin BACKUP 10\n</code></pre> This will back up the plots when the program closes and every 10 minutes in a file <code>stat.bin</code>. The minimum backup interval is 5 minutes.</p>"},{"location":"configuration/output/web-viewer/#custom-plugins-and-styles","title":"Custom plugins and styles...","text":"<p>To give the user the option to tweak the look-and-feel and functionality of the web viewer and/or modify for example the color scheme or regional preferences, the program provides the option to inject custom plugins (JavaScript) and CSS into the website, with a command like: <pre><code>AIS-catcher -N 8100 PLUGIN plugin1.js PLUGIN plugin2.js STYLE mystyle.css\n</code></pre> You can also include all plugin files from a specific directory using the command: <pre><code>AIS-catcher -N 8100 PLUGIN_DIR /usr/share/aiscatcher/plugins\n</code></pre> Files need to have the extension <code>.pjs</code> and <code>.pss</code> for respectively JavaScript and CSS style plugins. The repository includes a few example plugins that demonstrate how to add additional maps or cater to regional preferences. Examples of plugins can be found in another GitHub repository.</p>"},{"location":"configuration/output/web-viewer/#offline-web-viewer","title":"Offline web viewer","text":"<p>There is an option to run the web viewer without relying on online libraries. This facilitates using the web interface whilst traveling without an internet connection. The steps are simple. First, go to your home directory (say <code>/home/jasper</code>) and clone the necessary offline web assets: <pre><code>git clone https://github.com/jvde-github/webassets.git\n</code></pre> This will create a directory <code>webassets</code> that we need to share with AIS-catcher as an alternative location for online web content  with the CDN argument followed by the location of the web assets directory: <pre><code>AIS-catcher -x 192.168.1.120 4002 -N 8100 CDN /home/jasper/webassets\n</code></pre></p>"},{"location":"configuration/output/web-viewer/#sending-data-to-prometheus-for-use-in-grafana-dashboards","title":"Sending data to Prometheus for use in Grafana dashboards","text":"<p>You can add the option <code>PROME on</code> to the web configuration command to start rendering Prometheus-compatible statistics at <code>/metrics</code>. For example:</p> <pre><code>AIS-catcher -N 8100 PROME on\n</code></pre> <p>For more information on how to configure Prometheus and Grafana to get an initial dashboard, see README-grafana.md.</p>"},{"location":"configuration/output/web-viewer/#summary-settings","title":"Summary Settings","text":"<p>Server Options:</p> Option Type Description <code>PORT</code> Integer (1-65535) Single port for web server <code>PORT_MIN</code> Integer (1-65535) Minimum port in binding range <code>PORT_MAX</code> Integer (1-65535) Maximum port in binding range <code>IP_BIND</code> String Server binding IP address <code>REUSE_PORT</code> Boolean Enable port reuse <code>ZLIB</code> Boolean Enable response compression <p>Location Settings:</p> Option Type Description <code>LAT</code> Float Station latitude <code>LON</code> Float Station longitude <code>SHARE_LOC</code> Boolean Share station location <code>USE_GPS</code> Boolean Use GPS data <code>OWN_MMSI</code> Integer Own vessel MMSI <p>Data Management:</p> Option Type Description <code>HISTORY</code> Integer (5-43200) History retention (seconds) <code>CUTOFF</code> Integer (0-10000) Data retention threshold <code>BACKUP</code> Integer (5-2880) Backup interval (minutes) <code>FILE</code> String Statistics file path <code>REALTIME</code> Boolean Enable real-time updates <p>Output Formats:</p> Option Type Description <code>KML</code> Boolean Enable KML output <code>GEOJSON</code> Boolean Enable GeoJSON output <code>PROME</code> Boolean Enable Prometheus metrics <code>MESSAGE</code> Boolean Enable message saving <p>UI Customization:</p> Option Type Description <code>STATION</code> String Station display name <code>STATION_LINK</code> String Station info URL <code>CDN</code> String Local CDN resources path <code>PLUGIN</code> String JavaScript plugin path <code>STYLE</code> String CSS style path <code>PLUGIN_DIR</code> String Plugins directory <code>ABOUT</code> String About page path"},{"location":"getting-started/ais-basics/","title":"Introduction to Automatic Identification System (AIS)","text":"<p>The Automatic Identification System (AIS) is a maritime technology designed to improve safety and efficiency in navigation. It provides real-time information about a vessel's identity, position, speed, and heading to nearby ships and coastal monitoring stations. AIS operates on very high frequency (VHF) radio waves, ensuring reliable transmission over significant distances.</p>"},{"location":"getting-started/ais-basics/#key-details","title":"Key Details","text":"<ul> <li>Frequency Range:   AIS operates in the VHF band around 162 MHz, specifically on the following channels:</li> <li>161.975 MHz (AIS 1)</li> <li> <p>162.025 MHz (AIS 2)</p> </li> <li> <p>Data Transmission:   AIS messages are transmitted in a standardized digital format, enabling vessels and shore-based stations to share crucial navigation data.</p> </li> <li> <p>Applications:</p> </li> <li>Collision avoidance in crowded waterways.</li> <li>Monitoring by port authorities and maritime traffic services.</li> <li>Enhanced navigation in poor visibility conditions.</li> <li>Search-and-rescue operations and fleet tracking.</li> </ul>"},{"location":"getting-started/ais-basics/#receiving-ais-with-software-defined-radio-sdr","title":"Receiving AIS with Software Defined Radio (SDR)","text":"<p>With modern Software Defined Radio (SDR) hardware, it is possible to receive and process AIS messages without the need for expensive, dedicated equipment. By tuning an SDR device to the AIS frequencies (around 162 MHz), users can monitor and decode AIS signals.</p>"},{"location":"getting-started/ais-basics/#why-use-sdr-for-ais","title":"Why Use SDR for AIS?","text":"<ol> <li> <p>Cost-Effective:     SDR devices are affordable and versatile compared to specialized AIS receivers.</p> </li> <li> <p>Flexible:    SDR can be used for a wide range of applications, including AIS and other VHF/UHF monitoring.</p> </li> <li> <p>Customizable:    Open-source software like AIS-catcher enables users to decode and analyze AIS signals, view vessel information, and integrate with other systems.</p> </li> </ol>"},{"location":"getting-started/ais-basics/#learn-more","title":"Learn More","text":"<p>To dive deeper into AIS and its functionality, you can visit the Wikipedia page on Automatic Identification System.</p>"},{"location":"getting-started/first-run/","title":"First Run","text":"<p>To test that the installation was successful (see below for instructions), a good start is the following command which lists the devices available for AIS reception: <pre><code>AIS-catcher -l\n</code></pre> The output depends on the available devices but will look something like: <pre><code>Found 1 device(s):\n0: Realtek, RTL2838UHIDIR, SN: 00000001\n</code></pre> A specific device can be selected with the <code>d</code>-switch using the device number <code>-d:0</code> or the serial number <code>-d 00000001</code>. If you were expecting  particular devices that are missing, you might want to try: <pre><code>AIS-catcher -L\n</code></pre> This lists all devices for which support is included in the executable. If particular hardware is not listed here, you might have to install the necessary libraries and rebuild AIS-catcher.</p> <p>To start AIS decoding, print some occasional statistics (every 10 seconds) <pre><code>AIS-catcher -v 10\n</code></pre></p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>AIS-catcher can be installed on various platforms including Windows, Ubuntu/Debian, Raspberry Pi, macOS, and via Docker containers. Follow the instructions below tailored to your operating system.</p>"},{"location":"getting-started/installation/#choose-your-platform","title":"Choose Your Platform","text":"<ul> <li>Docker Installation</li> <li>Windows Installation</li> <li>Ubuntu/Debian Installation</li> <li>Raspberry Pi Installation and Web GUI Installation</li> <li>Android</li> </ul> <p>For installation on MacOS or for other systems building from source is recommended. See: Building from Source</p>"},{"location":"getting-started/overview/","title":"Overview","text":"<p>Welcome to the AIS-catcher Documentation! Whether you're just beginning or looking to enhance your skills, this comprehensive guide will walk you through installing, configuring, and utilizing AIS-catcher\u2014a powerful tool for processing AIS (Automatic Identification System) data. Discover how AIS-catcher can elevate your maritime data experience.</p>"},{"location":"getting-started/overview/#what-youll-learn","title":"What You\u2019ll Learn","text":"<p>By following this guide, you will:</p> <ul> <li>Understand AIS Data Fundamentals: Learn what AIS data is and its significance in maritime operations.</li> <li>Install AIS-catcher Seamlessly: Set up AIS-catcher on your preferred platform with ease.</li> <li>Configure Your First AIS-catcher Instance: Set up input and output configurations to start capturing AIS data.</li> <li>Explore Advanced Features: Delve into integrations such as MQTT, Grafana, and NMEA2000 to enhance your data processing capabilities.</li> </ul>"},{"location":"getting-started/overview/#what-youll-need","title":"What You\u2019ll Need","text":"<p>Before getting started, ensure you have the following:</p> <ol> <li>Compatible Hardware Setup:</li> <li>A USB-based RTL-SDR device or another supported SDR receiver.</li> <li> <p>An AIS antenna for optimal data reception.</p> </li> <li> <p>Computer or Server:</p> </li> <li> <p>Windows, Raspberry Pi, Linux, or macOS with basic command-line proficiency.</p> </li> <li> <p>Internet Connection:</p> </li> <li> <p>Essential for installation and accessing online resources.</p> </li> <li> <p>Line of Sight to Ships:</p> </li> <li>Position yourself near water with active vessel traffic to receive AIS signals effectively.</li> </ol>"},{"location":"getting-started/overview/#high-level-steps","title":"High-Level Steps","text":"<p>Follow these high-level steps to get AIS-catcher up and running:</p> <ol> <li>Learn the Basics:</li> <li> <p>Start with the AIS Basics section to understand AIS technology and the role of AIS-catcher.</p> </li> <li> <p>Install AIS-catcher:</p> </li> <li> <p>Follow the detailed instructions in the Installation Guide tailored to your platform.</p> </li> <li> <p>Perform Your First Run:</p> </li> <li> <p>Use the First Run Guide to verify your setup and begin capturing AIS data.</p> </li> <li> <p>Customize Input and Output:</p> </li> <li> <p>Tailor your setup by exploring the Input Options and Output Options to meet your specific needs.</p> </li> <li> <p>Leverage Advanced Features:</p> </li> <li>Enhance your AIS-catcher experience by integrating advanced tools such as MQTT, Grafana, and NMEA2000 support.</li> </ol>"},{"location":"getting-started/overview/#references","title":"References","text":"<p>To kickstart your AIS-catcher journey, refer to the following resources:</p> <ul> <li>Installation Guide</li> <li>First Run Guide</li> <li>Features Overview</li> <li>Troubleshooting</li> </ul> <p>If you encounter any issues, the Community section is a great place to ask questions and connect with other users.</p> <p>With these steps, you're well on your way to making the most of AIS-catcher. Let\u2019s get started!</p>"},{"location":"installation/android/","title":"Android version","text":"<p>The Android version of AIS-catcher has been recently overhauled and can be found here.</p> <p> </p>"},{"location":"installation/build-source/","title":"Building from Source","text":""},{"location":"installation/build-source/#cmake","title":"CMake","text":"<p>The steps to compile AIS-catcher for RTL-SDR dongles are fairly straightforward on most systems. There are various options including a standard Makefile, a <code>solution</code> file for MSVC (see next section) and you can use <code>cmake</code>, as we will detail now.</p> <p>The first step is to ensure you have the necessary dependencies and build tools installed for your device(s).  For example, the following installs the minimum build tools for Ubuntu and Raspberry Pi: <pre><code>sudo apt-get update\nsudo apt-get upgrade\n\nsudo apt-get install git make gcc g++ cmake pkg-config -y\n</code></pre> For MacOS with <code>brew</code> installed: <pre><code>brew update\nbrew upgrade\n\nbrew install git make gcc cmake pkg-config\n</code></pre></p> <p>AIS-catcher requires libraries for the particular hardware you want to use. The following table summarizes the installation instructions for all supported hardware:</p> System Linux/Raspberry macOS MSVC/vcpkg MSVC/PothosSDR Command sudo apt install ... brew install ... vcpkg install ... Download RTL-SDR librtlsdr-dev librtlsdr rtlsdr rtlsdr:x64-windows included Airspy libairspy-dev airspy - included Airspy HF+ libairspyhf-dev airspyhf - included HackRF libhackrf-dev hackrf - included SDRplay 1A API 3.x - API 3.x API 3.x SoapySDR libsoapysdr-dev X ZeroMQ libzmq3-dev zeromq ZeroMQ ZeroMQ:x64-windows included HTTP secure libssl-dev openssl openssl:x64-windows X ZIP zlib1g-dev zlib zlib:x64-windows X <p>Once the dependencies are in place, the process of installing AIS-catcher  on Linux-based systems becomes: <pre><code>git clone https://github.com/jvde-github/AIS-catcher.git --depth 1\ncd AIS-catcher\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n</code></pre> For the SDRPlay the software needs to be downloaded and installed from the website of the manufacturer. Once installed, the AIS-catcher build process automatically includes it in the build if available. </p>"},{"location":"installation/build-source/#microsoft-visual-studio-2019","title":"Microsoft Visual Studio 2019+","text":"<p>Ensure that you have <code>vcpkg</code> installed and integrated into Visual Studio via <code>vcpkg integrate install</code> (as Administrator). Then install the rtl-sdr drivers as follows: <pre><code>vcpkg install rtlsdr rtlsdr:x64-windows ZeroMQ ZeroMQ:x64-windows soxr soxr:x64-windows\n</code></pre> The included solution file in the mscv directory allows you to build AIS-catcher with RTL-SDR/ZMQ support in the Visual Studio IDE.</p>"},{"location":"installation/docker/","title":"Container images","text":"<p>Pre-built container images containing AIS-catcher are available from the GitHub Container Registry. Available container tags are documented on the package's page, with <code>latest</code> (the latest release) and <code>edge</code> (the bleeding edge of the <code>main</code> branch) being the two main ones.</p> <p>The following <code>docker run</code> command provides an example of the usage of this container image, running the latest release of AIS-catcher interactively:</p> <pre><code>docker run --rm -it --pull always --device /dev/bus/usb ghcr.io/jvde-github/ais-catcher:latest &lt;ais-catcher command line options&gt;\n</code></pre> <p>Alternatively, the following <code>docker-compose.yml</code> configuration provides a good starting point should you wish to use Docker Compose:</p> <p><pre><code>services:\n  ais-catcher:\n    command: &lt;ais-catcher command line options&gt; (e.g. -N 8100)\n    container_name: ais-catcher\n    ports:\n      - 8100:8100 &lt;don't forget to passthrough ports for the webclient&gt;\n    devices:\n      - \"/dev/bus/usb:/dev/bus/usb\"\n    image: ghcr.io/jvde-github/ais-catcher:latest\n    restart: always\n</code></pre> Please note that the SDRplay devices are currently not supported in the Docker images.</p>"},{"location":"installation/docker/#more-docker-options","title":"More Docker options","text":"<p>To pull the latest docker image (e.g. to create or refresh to the latest version) without running: <pre><code>docker pull ghcr.io/jvde-github/ais-catcher:edge\n</code></pre> To start AIS-catcher, you can then use: <pre><code>docker run --device /dev/bus/usb --rm -it ghcr.io/jvde-github/ais-catcher:edge\n</code></pre> Notice that if you want to run the webviewer (-N 8100) you need to make that available on the host system with (<code>-p 8100:8100</code>). To send UDP data to OpenCPN running on the host computer, you can try to find the bridge network address (<code>sudo docker network inspect bridge</code> as per tutorials and use this as UDP destination address (e.g. <code>-u 172.17.0.1  5077</code>). Alternatively you could use <code>--network host</code> although less desirable. Please consult the Docker documentation.</p> <p>An excellent Docker set-up is the docker-shipfeeder that provides a user friendly way to  feed various aggregators with excellent documentation and user support by the sdrenthusiasts community.</p>"},{"location":"installation/docker/#docker-with-gui","title":"Docker with GUI","text":"<p>If you are already up and running with Docker installed, you can simply use: <pre><code>docker run --privileged -v /dev/bus/usb:/dev/bus/usb -p 8110:8110 -p 8100:8100 --pull=always ghcr.io/jvde-github/ais-catcher-control:edge\n</code></pre></p>"},{"location":"installation/gui-installation/","title":"GUI Installation","text":"<p>This section describes setting up the GUI for Raspberry Pi devices.</p>"},{"location":"installation/gui-installation/#configuring-via-the-web-gui","title":"Configuring via the Web GUI","text":"<p>AIS-catcher provides a web-based graphical user interface for easy configuration. It needs to be installed as a separate service by entering in the terminal: <pre><code>sudo bash -c \"$(curl -fsSL https://raw.githubusercontent.com/jvde-github/AIS-catcher-control/main/install_ais_catcher_control.sh)\"\n</code></pre> To access it, open your web browser and navigate to your Raspberry Pi's IP address on port 8110 (for example, <code>http://zerowh:8110</code>). </p> <p></p> <p>When you first access the interface, use the default credentials (username: <code>admin</code>, password: <code>admin</code>). You'll be prompted to change this password immediately for security purposes.</p> <p></p>"},{"location":"installation/raspberry-pi/","title":"Basic Installation on a Raspberry Pi","text":"<p>This guide provides instructions for installing AIS-catcher on Debian-based systems (like Raspberry Pi) and setting it up to run as a background service. This ensures AIS-catcher will automatically start when the machine is booted.</p>"},{"location":"installation/raspberry-pi/#installation","title":"Installation","text":"<p>To install AIS-catcher via a script, open a terminal or log in via SSH, then run the following command: <pre><code>sudo bash -c \"$(wget -qO- https://raw.githubusercontent.com/jvde-github/AIS-catcher/main/scripts/aiscatcher-install)\"\n</code></pre> The script will install all dependencies and build AIS-catcher. The required SDR libraries are installed from the official packages if they cannot be found on the system. For the RTL-SDR we build from source from the official package to guarantee support for the RTL-SDR V4 but, again, only if the package is not already installed on the system. On a fresh Raspberry Pi4 this will take less than 20 minutes. </p> <p>To update AIS-catcher to the latest version, simply run the above command again.</p> <p>If you want to use pre-installed Debian packes in the installation use: <pre><code>sudo bash -c \"$(wget -qO- https://raw.githubusercontent.com/jvde-github/AIS-catcher/main/scripts/aiscatcher-install)\" _ -p\n</code></pre> The advantage that this avoids an compilation step which can save quite a bit of time on older Raspberry devices but it does not optimize the binaries for the specific hardware and is not compatible with the RTL-SDR V4.</p>"},{"location":"installation/raspberry-pi/#verifying-the-installation","title":"Verifying the installation","text":"<p>To verify that AIS-catcher is installed or updated, run: <pre><code>/usr/bin/AIS-catcher -L\n</code></pre> Now (re)connect the dongle and you can start playing with the various command line options, e.g. to start some basic decoding with a webviewer at <code>http://localhost:8100</code>, use file following command: <pre><code>/usr/bin/AIS-catcher -v 10 -N 8100\n</code></pre> If all works, you should start seeing NMEA lines on screen and have an active webviewer at the aforementioned address.</p>"},{"location":"installation/raspberry-pi/#configuration","title":"Configuration","text":"<p>For running AIS-catcher as a background service we can use two configuration files:</p> <ul> <li>/etc/AIS-catcher/config.json (JSON configuration)</li> <li>/etc/AIS-catcher/config.cmd (command line parameters)</li> </ul> <p>The simplest approach is to edit the configuration file /etc/AIS-catcher/config.cmd to capture your settings which are detailed below. Lines starting with # are considered comments and ignored. The default file contains comments for popular options, which can be modified using a text editor, for example: <pre><code>sudo nano /etc/AIS-catcher/config.cmd\n</code></pre></p>"},{"location":"installation/raspberry-pi/#running-ais-catcher-as-a-background-service","title":"Running AIS-catcher as a Background Service","text":"<p>To start AIS-catcher as a background service use the following command: <pre><code>sudo systemctl start ais-catcher.service\n</code></pre> To view the status of the service copy the following command: <pre><code>sudo systemctl status ais-catcher.service\n</code></pre> To ensure AIS-catcher starts automatically at boot time, enable the service with: <pre><code>sudo systemctl enable ais-catcher.service\n</code></pre></p>"},{"location":"installation/raspberry-pi/#feedback","title":"Feedback","text":"<p>This is fairly new script and under development so any feedback is appreciated. </p> <p></p>"},{"location":"installation/ubuntu-debian/","title":"Basic Installation on a Raspberry Pi","text":"<p>This guide provides instructions for installing AIS-catcher on Debian-based systems (like Raspberry Pi) and setting it up to run as a background service. This ensures AIS-catcher will automatically start when the machine is booted.</p>"},{"location":"installation/ubuntu-debian/#installation","title":"Installation","text":"<p>To install AIS-catcher via a script, open a terminal or log in via SSH, then run the following command: <pre><code>sudo bash -c \"$(wget -qO- https://raw.githubusercontent.com/jvde-github/AIS-catcher/main/scripts/aiscatcher-install)\"\n</code></pre> The script will install all dependencies and build AIS-catcher. The required SDR libraries are installed from the official packages if they cannot be found on the system. For the RTL-SDR we build from source from the official package to guarantee support for the RTL-SDR V4 but, again, only if the package is not already installed on the system. On a fresh Raspberry Pi4 this will take less than 20 minutes. </p> <p>To update AIS-catcher to the latest version, simply run the above command again.</p> <p>If you want to use pre-installed Debian packes in the installation use: <pre><code>sudo bash -c \"$(wget -qO- https://raw.githubusercontent.com/jvde-github/AIS-catcher/main/scripts/aiscatcher-install)\" _ -p\n</code></pre> The advantage that this avoids an compilation step which can save quite a bit of time on older Raspberry devices but it does not optimize the binaries for the specific hardware and is not compatible with the RTL-SDR V4.</p>"},{"location":"installation/ubuntu-debian/#verifying-the-installation","title":"Verifying the installation","text":"<p>To verify that AIS-catcher is installed or updated, run: <pre><code>/usr/bin/AIS-catcher -L\n</code></pre> Now (re)connect the dongle and you can start playing with the various command line options, e.g. to start some basic decoding with a webviewer at <code>http://localhost:8100</code>, use file following command: <pre><code>/usr/bin/AIS-catcher -v 10 -N 8100\n</code></pre> If all works, you should start seeing NMEA lines on screen and have an active webviewer at the aforementioned address.</p>"},{"location":"installation/ubuntu-debian/#configuration","title":"Configuration","text":"<p>For running AIS-catcher as a background service we can use two configuration files:</p> <ul> <li>/etc/AIS-catcher/config.json (JSON configuration)</li> <li>/etc/AIS-catcher/config.cmd (command line parameters)</li> </ul> <p>The simplest approach is to edit the configuration file /etc/AIS-catcher/config.cmd to capture your settings which are detailed below. Lines starting with # are considered comments and ignored. The default file contains comments for popular options, which can be modified using a text editor, for example: <pre><code>sudo nano /etc/AIS-catcher/config.cmd\n</code></pre></p>"},{"location":"installation/ubuntu-debian/#running-ais-catcher-as-a-background-service","title":"Running AIS-catcher as a Background Service","text":"<p>To start AIS-catcher as a background service use the following command: <pre><code>sudo systemctl start ais-catcher.service\n</code></pre> To view the status of the service copy the following command: <pre><code>sudo systemctl status ais-catcher.service\n</code></pre> To ensure AIS-catcher starts automatically at boot time, enable the service with: <pre><code>sudo systemctl enable ais-catcher.service\n</code></pre></p>"},{"location":"installation/ubuntu-debian/#feedback","title":"Feedback","text":"<p>This is fairly new script and under development so any feedback is appreciated. </p> <p></p>"},{"location":"installation/windows/","title":"Windows Binaries","text":"<p>Links to fully built Windows binaries of recent releases are provided in the table below, with and without SDRPlay support (which requires a running SDRPlay API). Running <code>AIS-catcher</code> should be a simple matter of unpacking the ZIP file in one directory and starting the executable on the command line with the required parameters or by clicking <code>start.bat</code>, which you can edit with Notepad to set desired parameters.</p> <p>It will likely run out of the box if you already have RTL-SDR software running on your PC. If you encounter an issue or crash, you might want to check: - Installation of RTL-SDR drivers is done via Zadig. - Installation of the Visual Studio runtime libraries.</p> <p>The AIS-catcher executables are built with the latest Windows MSVC compiler. Please update your libraries before starting the executables below. Issues have been reported on Windows 10.</p>"},{"location":"installation/windows/#recent-releases","title":"Recent Releases","text":"Version Win32 x64 Win32 + SDRPlay x64 + SDRPlay Edge ZIP ZIP ZIP ZIP v0.60 ZIP ZIP ZIP ZIP v0.59 ZIP ZIP ZIP ZIP v0.58 ZIP ZIP ZIP ZIP <p>If you are looking for a Windows version for the latest development version, it is automatically produced by the standard workflow and referenced in the table above.</p>"},{"location":"usage/cli/","title":"Command Line Interface","text":""},{"location":"usage/cli/#basic-usage","title":"Basic usage","text":"<p>To start AIS decoding, print some occasional statistics (every 10 seconds) <pre><code>AIS-catcher -v 10\n</code></pre> The next step is to share the data with other programs or services.  To share your raw feed with other AIS-catcher users (and see their data in your webviewer - see below) use <code>-X</code>. Additionally, for sending the messages via UDP to ports 10110 and 10111, we can use the following command: <pre><code>AIS-catcher -v 10 -X -u 127.0.0.1 10110 -u 127.0.0.1 10111\n</code></pre> If successful, NMEA messages will start to come in, appear on the screen and send as UDP messages to <code>127.0.0.1</code> port <code>10110</code> and port <code>10111</code> and will be visible on aiscatcher.org. The UDP messages are the primary method to forward messages for visualization in OpenCPN or to AIS aggregator websites like MarineTraffic, FleetMon, VesselFinder, ShipXplorer and others. See below for more pointers on how this can be set up. The AIS NMEA lines on screen can be suppressed with the option <code>-q</code>. </p> <p>For RTL-SDR devices performance can be sensitive to the device settings. In general, a good starting point is the following: <pre><code>AIS-catcher -gr RTLAGC on TUNER auto -a 192K\n</code></pre> It has been reported by several users that adding a bandwidth setting of <code>-a 192K</code> can be beneficial so it is worthwhile to try with and without this filter. Finding the best settings for your hardware requires some systematic experimentation whereby one parameter is changed at a time, e.g. switch RTLAGC <code>on</code> or <code>off</code>, set the TUNER to <code>auto</code> or try fixed tuner gains between 0 and 50. The hardware settings available depend on the hardware and more details can be found below.</p> <p>AIS-catcher also supports the 18 Euro RPI Zero W. However, the hardware might not keep up with the high data flow. This can sometimes be resolved by activating fast downsampling via: <pre><code>AIS-catcher -F\n</code></pre> Fast downsampling uses approximations and comes at a very small performance degradation, so is not set by default. If your device still struggles, you can try running at a sample rate of 288K (<code>-s 288K</code>): <pre><code>AIS-catcher -s 288K\n</code></pre> Reception will be impacted though. Unfortunately, latest feedback seems to be that this is best way to run on the Zero W as this Zero is struggling with the high data throuugput. Another drawback of these lower cost boards is that they can create interference that impacts the radio reception.</p> <p>Finally, to create a webviewer that you can access from your local network, use the following command: <pre><code>AIS-catcher -N 8100\n</code></pre> A simple webviewer with a map (and community feed) will be available at <code>http://localhost:8100</code>. The webviewer can be accessed from any device on the same network with the IP address of the machine. The webviewer can be customized, see below.</p> <p>That's all there is. Below we will dive into some more details.</p>"},{"location":"usage/cli/#detailed-settings","title":"Detailed settings","text":"<pre><code>AIS-catcher (build Nov 19 2024) v0.60-312-g4f7b402d\n(C) Copyright 2021-2024 jvde-github and other contributors\nThis is free software; see the source for copying conditions.There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nuse: AIS-catcher [options]\n\n    [-a xxx - set tuner bandwidth in Hz (default: off)]\n    [-b benchmark demodulation models for time - for development purposes (default: off)]\n    [-c [AB/CD] - [optional: AB] select AIS channels and optionally the NMEA channel designations]\n    [-C [filename] - read configuration settings from file]\n    [-D [connection string] - write messages to PostgreSQL database]\n    [-e [baudrate] [serial port] - read NMEA from serial port at specified baudrate]\n    [-f [filename] write NMEA lines to file]\n    [-F run model optimized for speed at the cost of accuracy for slow hardware (default: off)]\n    [-h display this message and terminate (default: false)]\n    [-H [optional: url] - send messages via HTTP, for options see documentation]\n    [-i [interface] - read NMEA2000 data from socketCAN interface - Linux only]\n    [-I [interface] - push messages as NMEA2000 data to a socketCAN interface - Linux only]\n    [-m xx - run specific decoding model (default: 2), see README for more details]\n    [-M xxx - set additional meta data to generate: T = NMEA timestamp, D = decoder related (signal power, ppm) (default: none)]\n    [-n show NMEA messages on screen without detail (-o 1)]\n    [-N [optional: port][optional settings] - start http server at port, see README for details]\n    [-o set output mode (0 = quiet, 1 = NMEA only, 2 = NMEA+, 3 = NMEA+ in JSON, 4 JSON Sparse, 5 JSON Full (default: 2)]\n    [-O MMSI - sets the own mmsi of the receiver]\n    [-p xxx - set frequency correction for device in PPM (default: zero)]\n    [-P xxx.xx.xx.xx yyy - TCP destination address and port (default: off)]\n    [-q suppress NMEA messages to screen (-o 0)]\n    [-s xxx - sample rate in Hz (default: based on SDR device)]\n    [-S xxx - TCP server for NMEA lines at port xxx]\n    [-T xx - auto terminate run with SDR after xxx seconds (default: off)]\n    [-u xxx.xx.xx.xx yyy - UDP destination address and port (default: off)]\n    [-v [option: xx] - enable verbose mode, optional to provide update frequency of xx seconds (default: false)]\n    [-X connect to AIS community feed at aiscatcher.org (default: off)]\n    [-Q publish data to MQTT server]\n\n    Device selection:\n\n    [-d:x - select device based on index (default: 0)]\n    [-d xxxx - select device based on serial number]\n    [-e baudrate port - open device at serial port with given baudrate]\n    [-l list available devices and terminate (default: off)]\n    [-L list supported SDR hardware and terminate (default: off)]\n    [-r [optional: yy] filename - read IQ data from file or stdin (.), short for -r -ga FORMAT yy FILE filename\n    [-t [[protocol]] [host [port]] - read IQ data from remote RTL-TCP instance]\n    [-w filename - read IQ data from WAV file, short for -w -gw FILE filename]\n    [-x [server][port] - UDP input of NMEA messages at port on server\n    [-y [host [port]] - read IQ data from remote SpyServer]\n    [-z [optional [format]] [optional endpoint] - read IQ data from [endpoint] in [format] via ZMQ (default: format is CU8)]\n\n    Device specific settings:\n\n    [-ga RAW file: FILE [filename] FORMAT [CF32/CS16/CU8/CS8] ]\n    [-ge Serial Port: PRINT [on/off]\n    [-gf HACKRF: LNA [0-40] VGA [0-62] PREAMP [on/off] ]\n    [-gh Airspy HF+: TRESHOLD [low/high] PREAMP [on/off] ]\n    [-gm Airspy: SENSITIVITY [0-21] LINEARITY [0-21] VGA [0-14] LNA [auto/0-14] MIXER [auto/0-14] BIASTEE [on/off] ]\n    [-gr RTLSDRs: TUNER [auto/0.0-50.0] RTLAGC [on/off] BIASTEE [on/off] ]\n    [-gs SDRPLAY: GRDB [0-59] LNASTATE [0-9] AGC [on/off] ]\n    [-gt RTLTCP: HOST [address] PORT [port] TUNER [auto/0.0-50.0] RTLAGC [on/off] FREQOFFSET [-150-150] PROTOCOL [none/rtltcp] TIMEOUT [1-60] ]\n    [-gu SOAPYSDR: DEVICE [string] GAIN [string] AGC [on/off] STREAM [string] SETTING [string] CH [0+] PROBE [on/off] ANTENNA [string] ]\n    [-gw WAV file: FILE [filename] ]\n    [-gy SPYSERVER: HOST [address] PORT [port] GAIN [0-50] ]\n    [-gz ZMQ: ENDPOINT [endpoint] FORMAT [CF32/CS16/CU8/CS8] ]\n\n    Model specific settings:\n\n    [-go Model: AFC_WIDE [on/off] FP_DS [on/off] PS_EMA [on/off] SOXR [on/off] SRC [on/off] DROOP [on/off] ]\n</code></pre>"},{"location":"usage/gui/","title":"Web GUI for Remote Configuration","text":"<p>This section is for Raspberry Pi devices only.</p>"},{"location":"usage/gui/#configuring-ais-catcher-via-the-web-gui","title":"Configuring AIS-catcher via the Web GUI","text":"<p>AIS-catcher provides a web-based graphical user interface for easy configuration. It needs to be installed as a separate service by entering in the terminal: <pre><code>sudo bash -c \"$(curl -fsSL https://raw.githubusercontent.com/jvde-github/AIS-catcher-control/main/install_ais_catcher_control.sh)\"\n</code></pre> To access it, open your web browser and navigate to your Raspberry Pi's IP address on port 8110 (for example, <code>http://zerowh:8110</code>). </p> <p></p> <p>When you first access the interface, use the default credentials (username: <code>admin</code>, password: <code>admin</code>). You'll be prompted to change this password immediately for security purposes.</p> <p></p>"},{"location":"usage/gui/#input-device-selection","title":"Input Device Selection","text":"<p>In the Input section of the web GUI, you'll need to select your input device. The interface allows you to select from any connected devices or manually specify a device type and serial number. If you're using a single SDR device, you can leave the device selection as 'None', and AIS-catcher will automatically use the available device. You can also click the Search Icon to let AIS-catcher detect the available SDR hardware.</p> <p></p> <p>Specific device settings for your SDR or other input device can be set on this page as well. </p> <p>Note: After any modification to the settings the changes need to be saved and the program needs to be (re)started for the changes to become effective. </p>"},{"location":"usage/gui/#output-settings","title":"Output Settings","text":"<p>AIS-catcher offers the ability to share your data with the aiscatcher.org community. Navigate to the Output &gt; Community section to enable this feature. By default, sharing is anonymous, but you can generate and enter a sharing key to associate the data with your station and view statistics. If you want to create a sharing key click \"Create\" and this will take you to the page on aiscatcher.org where you can set up a station and receive a sharing key.</p> <p></p>"},{"location":"usage/gui/#local-webviewer","title":"Local Webviewer","text":"<p>The local web viewer configuration can be found under Output &gt; Web Viewer. Here, you should activate the viewer and enter your station details, including a name and your geographical coordinates.</p> <p>This local webviewer is available from your Raspberry device (e.g. in this example at port 8100, hence can be accessed with <code>http://zerowh:8100</code> in the browser) and not by default accessible outside the local network. Some users share their webviewer externally, see here for examples. </p> <p>Note: If you desire a public page with your station performance the easiest approach is to feed aiscatcher.org with a sharing key.</p>"},{"location":"usage/gui/#service-control","title":"Service Control","text":"<p>The Control section is where you manage the AIS-catcher service. Here you can start and stop the service, enable auto-start functionality, and monitor the service status through the log display.  </p>"},{"location":"usage/gui/#accessing-the-ais-web-viewer","title":"Accessing the AIS Web Viewer","text":"<p>Press start in the Control section and ensure that it is running without errors (see the log). Once AIS-catcher is running, you can view your received AIS data through the aforementioned local web viewer. Access it by navigating to your Raspberry Pi's IP address on port 8100 (for example, <code>http://zerowh:8100</code>). The viewer provides a real-time display of AIS messages and vessel positions, allowing you to verify that your setup is working correctly. Another option is to have a quick view by choosing the Webviewer menu item in the menu.</p> <p></p>"},{"location":"usage/gui/#conclusion","title":"Conclusion","text":"<p>With these steps completed, you now have a fully functional AIS receiving station running on your Raspberry Pi. The system will receive AIS messages from nearby vessels and, if configured, share this data with the AIScatcher.org community. You can monitor vessel traffic in real-time through the web viewer interface.</p> <p>For advanced users who want to fine-tune their setup, AIS-catcher provides two configuration files:</p> <p>The JSON configuration file at: <pre><code>/etc/AIS-catcher/config.json\n</code></pre></p> <p>And the command-line parameters file at: <pre><code>/etc/AIS-catcher/config.cmd\n</code></pre></p> <p>Note: The GUI script can also be run for existing installations that are based on the AIS-catcher install script. But once configuration files are manually edited they cannot be edited via the HTML forms anymore. The configuration files still can be edited though under the advanced options menu. </p>"},{"location":"usage/json-configuration/","title":"Configuration (JSON)","text":"<p>As per version 0.41, AIS-catcher can be mostly configured via a configuration file in JSON format, <pre><code>AIS-catcher -C config.json\n</code></pre> where <code>config.json</code> is the name of the configuration file. The idea behind this feature is to simplify the setup of feeding multiple online sources. The minimal configuration file should have the following: <pre><code>{ \"config\": \"aiscatcher\", \"version\": 1 }\n</code></pre> A fuller example config file looks as follows: <pre><code>{\n    \"config\": \"aiscatcher\",\n    \"version\": \"1\",\n    \"input\": \"serialport\",\n    \"verbose\": true,\n    \"sharing\": true,\n    \"sharing_key\": \"6ef40ea8-59b9-11ef-8db4\",\n    \"screen\": 0,\n    \"serialport\": {\n        \"baudrate\": 38400,\n        \"port\": \"/dev/tty0\"\n    },\n    \"rtlsdr\": {\n        \"active\": true,\n        \"rtlagc\": true,\n        \"tuner\": \"auto\",\n        \"bandwidth\": \"192K\",\n        \"sample_rate\": \"1536K\",\n        \"biastee\": false,\n        \"buffer_count\": 2\n    },\n    \"airspy\": {\n        \"sample_rate\": \"3000K\",\n        \"linearity\": 17,\n        \"biastee\": false\n    },\n    \"airspyhf\": {\n        \"sample_rate\": \"192k\",\n        \"threshold\": \"low\",\n        \"preamp\": false\n    },\n    \"hackrf\": {\n        \"sample_rate\": \"6144k\",\n        \"lna\": 8,\n        \"vga\": 20,\n        \"preamp\": false\n    },\n    \"sdrplay\": {\n        \"sample_rate\": \"2304K\",\n        \"agc\": true,\n        \"lnastate\": 5,\n        \"grdb\": 40\n    },\n    \"udpserver\": {\n        \"server\": \"192.168.1.235\",\n        \"port\": 4002\n    },\n    \"server\": {\n        \"file\": \"stat.bin\",\n        \"backup\": 10,\n        \"realtime\": true,\n        \"active\": true,\n        \"port\": 8100,\n        \"station\": \"My Station\",\n        \"station_link\": \"http://example.com/\",\n        \"share_loc\": true,\n        \"lat\": 52,\n        \"lon\": 4.3,\n        \"plugin_dir\": \"/home/jasper/AIS-catcher/plugins/\",\n        \"cdn\": \"/home/jasper/webassets\",\n        \"prome\": true,\n        \"context\": \"settings\"\n    },\n    \"tcp\": [\n        {\n            \"active\": true,\n            \"host\": \"5.9.207.224\",\n            \"port\": 12,\n            \"keep_alive\": false\n        }\n    ],\n    \"udp\": [\n        {\n            \"host\": \"ais.fleetmon.com\",\n            \"port\": 0\n        },\n        {\n            \"active\": true,\n            \"host\": \"hub.shipxplorer.com\",\n            \"port\": 0,\n            \"filter\": false,\n            \"allow_type\": \"1,2,3,5,18,19,24\"\n        }\n    ],\n    \"tcp_listener\": [\n        {\n            \"port\": 5012\n        }\n    ],\n    \"http\": [\n        {\n            \"url\": \"https://ais.chaos-consulting.de/shipin/index.php\",\n            \"userpwd\": \"user:pwd\",\n            \"interval\": 30,\n            \"gzip\": false,\n            \"response\": false,\n            \"filter\": false\n        },\n        {\n            \"url\": \"http://aprs.fi/jsonais/post/secret_key\",\n            \"id\": \"myid\",\n            \"interval\": 60,\n            \"protocol\": \"aprs\",\n            \"response\": false\n        }\n    ]\n}\n</code></pre></p> <p>The UDP and HTTP outward connections are included as a JSON array (surrounded by <code>[</code> and <code>]</code>) with an  \"object\" for each separate channel. In each object we can include the  boolean field <code>active</code> (see the second UDP definition) which will cause the program to ignore the settings if set to <code>false</code> providing an easy way to switch particular channels or dongle configurations on and off. </p> <p>The fields and values in the configuration file can be specified consistent with the command line settings as described  in this document. JSON is however case sensitive so field names must be entered in lower case.</p> <p>The active device is selected via the <code>input</code> or <code>serial</code> field. Sections for specific SDRs like <code>rtlsdr</code> specify the settings of the device only and do not automatically select it. Therefore, we can specify settings for many devices even if not connected. This will not have an impact.</p> <p>If both <code>input</code> and <code>serial</code> are included in the configuration file to select a device for decoding, the program will check that they are consistent, i.e. the hardware with the specified serial number must be of type <code>input</code>.  If you want to run multiple receivers simultaneously, this is possible as well but the device-specific settings and selection need to be included in an array <code>receiver</code>: <pre><code>{\n  \"config\":\"aiscatcher\",\n  \"version\":1,\n  \"receiver\":[\n    {\n      \"input\":\"airspy\",\n      \"verbose\":true,\n      \"airspy\":{\n        \"sample_rate\":\"3000K\"\n      }\n    },\n    {\n      \"input\":\"rtlsdr\",\n      \"serial\":\"ais\",\n      \"verbose\":true,\n      \"rtlsdr\":{\n        \"bandwidth\":\"192k\"\n      }\n    }\n  ]\n}\n</code></pre> If there is only one RTL-SDR connected, only <code>input</code> set to <code>rtlsdr</code> is sufficient. Similarly, if there is only one device connected with serial <code>ais</code>, we only have to specify <code>serial</code>. </p>"},{"location":"usage/overview/","title":"Basic Usage","text":"<p>In this section we describe how to get stated with the three main configuation methods:</p> <ul> <li>Command Line Interface</li> <li>Web GUI</li> <li>JSON configuration</li> </ul>"}]}